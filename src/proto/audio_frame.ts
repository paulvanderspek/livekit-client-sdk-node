/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: audio_frame.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./handle";
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export enum AudioStreamType {
        AUDIO_STREAM_NATIVE = 0,
        AUDIO_STREAM_HTML = 1
    }
    export enum AudioSourceType {
        AUDIO_SOURCE_NATIVE = 0
    }
    export class AllocAudioBufferRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sample_rate?: number;
            num_channels?: number;
            samples_per_channel?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sample_rate" in data && data.sample_rate != undefined) {
                    this.sample_rate = data.sample_rate;
                }
                if ("num_channels" in data && data.num_channels != undefined) {
                    this.num_channels = data.num_channels;
                }
                if ("samples_per_channel" in data && data.samples_per_channel != undefined) {
                    this.samples_per_channel = data.samples_per_channel;
                }
            }
        }
        get sample_rate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sample_rate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get num_channels() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set num_channels(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get samples_per_channel() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set samples_per_channel(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sample_rate?: number;
            num_channels?: number;
            samples_per_channel?: number;
        }): AllocAudioBufferRequest {
            const message = new AllocAudioBufferRequest({});
            if (data.sample_rate != null) {
                message.sample_rate = data.sample_rate;
            }
            if (data.num_channels != null) {
                message.num_channels = data.num_channels;
            }
            if (data.samples_per_channel != null) {
                message.samples_per_channel = data.samples_per_channel;
            }
            return message;
        }
        toObject() {
            const data: {
                sample_rate?: number;
                num_channels?: number;
                samples_per_channel?: number;
            } = {};
            if (this.sample_rate != null) {
                data.sample_rate = this.sample_rate;
            }
            if (this.num_channels != null) {
                data.num_channels = this.num_channels;
            }
            if (this.samples_per_channel != null) {
                data.samples_per_channel = this.samples_per_channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sample_rate != 0)
                writer.writeUint32(1, this.sample_rate);
            if (this.num_channels != 0)
                writer.writeUint32(2, this.num_channels);
            if (this.samples_per_channel != 0)
                writer.writeUint32(3, this.samples_per_channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllocAudioBufferRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllocAudioBufferRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sample_rate = reader.readUint32();
                        break;
                    case 2:
                        message.num_channels = reader.readUint32();
                        break;
                    case 3:
                        message.samples_per_channel = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllocAudioBufferRequest {
            return AllocAudioBufferRequest.deserialize(bytes);
        }
    }
    export class AllocAudioBufferResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buffer?: OwnedAudioFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, OwnedAudioFrameBuffer, 1) as OwnedAudioFrameBuffer;
        }
        set buffer(value: OwnedAudioFrameBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            buffer?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
        }): AllocAudioBufferResponse {
            const message = new AllocAudioBufferResponse({});
            if (data.buffer != null) {
                message.buffer = OwnedAudioFrameBuffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                buffer?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
            } = {};
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_buffer)
                writer.writeMessage(1, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllocAudioBufferResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllocAudioBufferResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.buffer, () => message.buffer = OwnedAudioFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllocAudioBufferResponse {
            return AllocAudioBufferResponse.deserialize(bytes);
        }
    }
    export class NewAudioStreamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            track_handle?: number;
            type?: AudioStreamType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("track_handle" in data && data.track_handle != undefined) {
                    this.track_handle = data.track_handle;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get track_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set track_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, AudioStreamType.AUDIO_STREAM_NATIVE) as AudioStreamType;
        }
        set type(value: AudioStreamType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            track_handle?: number;
            type?: AudioStreamType;
        }): NewAudioStreamRequest {
            const message = new NewAudioStreamRequest({});
            if (data.track_handle != null) {
                message.track_handle = data.track_handle;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                track_handle?: number;
                type?: AudioStreamType;
            } = {};
            if (this.track_handle != null) {
                data.track_handle = this.track_handle;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.track_handle != 0)
                writer.writeUint64(1, this.track_handle);
            if (this.type != AudioStreamType.AUDIO_STREAM_NATIVE)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.track_handle = reader.readUint64();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioStreamRequest {
            return NewAudioStreamRequest.deserialize(bytes);
        }
    }
    export class NewAudioStreamResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stream?: OwnedAudioStream;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream" in data && data.stream != undefined) {
                    this.stream = data.stream;
                }
            }
        }
        get stream() {
            return pb_1.Message.getWrapperField(this, OwnedAudioStream, 1) as OwnedAudioStream;
        }
        set stream(value: OwnedAudioStream) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stream() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stream?: ReturnType<typeof OwnedAudioStream.prototype.toObject>;
        }): NewAudioStreamResponse {
            const message = new NewAudioStreamResponse({});
            if (data.stream != null) {
                message.stream = OwnedAudioStream.fromObject(data.stream);
            }
            return message;
        }
        toObject() {
            const data: {
                stream?: ReturnType<typeof OwnedAudioStream.prototype.toObject>;
            } = {};
            if (this.stream != null) {
                data.stream = this.stream.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stream)
                writer.writeMessage(1, this.stream, () => this.stream.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioStreamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioStreamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stream, () => message.stream = OwnedAudioStream.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioStreamResponse {
            return NewAudioStreamResponse.deserialize(bytes);
        }
    }
    export class NewAudioSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            type?: AudioSourceType;
            sample_rate?: number;
            num_channels?: number;
        } & (({
            options?: AudioSourceOptions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("sample_rate" in data && data.sample_rate != undefined) {
                    this.sample_rate = data.sample_rate;
                }
                if ("num_channels" in data && data.num_channels != undefined) {
                    this.num_channels = data.num_channels;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AudioSourceType.AUDIO_SOURCE_NATIVE) as AudioSourceType;
        }
        set type(value: AudioSourceType) {
            pb_1.Message.setField(this, 1, value);
        }
        get options() {
            return pb_1.Message.getWrapperField(this, AudioSourceOptions, 2) as AudioSourceOptions;
        }
        set options(value: AudioSourceOptions) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sample_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sample_rate(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get num_channels() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set num_channels(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get _options() {
            const cases: {
                [index: number]: "none" | "options";
            } = {
                0: "none",
                2: "options"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            type?: AudioSourceType;
            options?: ReturnType<typeof AudioSourceOptions.prototype.toObject>;
            sample_rate?: number;
            num_channels?: number;
        }): NewAudioSourceRequest {
            const message = new NewAudioSourceRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.options != null) {
                message.options = AudioSourceOptions.fromObject(data.options);
            }
            if (data.sample_rate != null) {
                message.sample_rate = data.sample_rate;
            }
            if (data.num_channels != null) {
                message.num_channels = data.num_channels;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: AudioSourceType;
                options?: ReturnType<typeof AudioSourceOptions.prototype.toObject>;
                sample_rate?: number;
                num_channels?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            if (this.sample_rate != null) {
                data.sample_rate = this.sample_rate;
            }
            if (this.num_channels != null) {
                data.num_channels = this.num_channels;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != AudioSourceType.AUDIO_SOURCE_NATIVE)
                writer.writeEnum(1, this.type);
            if (this.has_options)
                writer.writeMessage(2, this.options, () => this.options.serialize(writer));
            if (this.sample_rate != 0)
                writer.writeUint32(3, this.sample_rate);
            if (this.num_channels != 0)
                writer.writeUint32(4, this.num_channels);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.options, () => message.options = AudioSourceOptions.deserialize(reader));
                        break;
                    case 3:
                        message.sample_rate = reader.readUint32();
                        break;
                    case 4:
                        message.num_channels = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioSourceRequest {
            return NewAudioSourceRequest.deserialize(bytes);
        }
    }
    export class NewAudioSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: OwnedAudioSource;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
            }
        }
        get source() {
            return pb_1.Message.getWrapperField(this, OwnedAudioSource, 1) as OwnedAudioSource;
        }
        set source(value: OwnedAudioSource) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_source() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            source?: ReturnType<typeof OwnedAudioSource.prototype.toObject>;
        }): NewAudioSourceResponse {
            const message = new NewAudioSourceResponse({});
            if (data.source != null) {
                message.source = OwnedAudioSource.fromObject(data.source);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: ReturnType<typeof OwnedAudioSource.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_source)
                writer.writeMessage(1, this.source, () => this.source.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.source, () => message.source = OwnedAudioSource.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioSourceResponse {
            return NewAudioSourceResponse.deserialize(bytes);
        }
    }
    export class CaptureAudioFrameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_handle?: number;
            buffer?: AudioFrameBufferInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_handle" in data && data.source_handle != undefined) {
                    this.source_handle = data.source_handle;
                }
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get source_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set source_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, AudioFrameBufferInfo, 2) as AudioFrameBufferInfo;
        }
        set buffer(value: AudioFrameBufferInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            source_handle?: number;
            buffer?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
        }): CaptureAudioFrameRequest {
            const message = new CaptureAudioFrameRequest({});
            if (data.source_handle != null) {
                message.source_handle = data.source_handle;
            }
            if (data.buffer != null) {
                message.buffer = AudioFrameBufferInfo.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                source_handle?: number;
                buffer?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
            } = {};
            if (this.source_handle != null) {
                data.source_handle = this.source_handle;
            }
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_handle != 0)
                writer.writeUint64(1, this.source_handle);
            if (this.has_buffer)
                writer.writeMessage(2, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptureAudioFrameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptureAudioFrameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.buffer, () => message.buffer = AudioFrameBufferInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptureAudioFrameRequest {
            return CaptureAudioFrameRequest.deserialize(bytes);
        }
    }
    export class CaptureAudioFrameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): CaptureAudioFrameResponse {
            const message = new CaptureAudioFrameResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptureAudioFrameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptureAudioFrameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptureAudioFrameResponse {
            return CaptureAudioFrameResponse.deserialize(bytes);
        }
    }
    export class CaptureAudioFrameCallback extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            async_id?: number;
        } & (({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            async_id?: number;
            error?: string;
        }): CaptureAudioFrameCallback {
            const message = new CaptureAudioFrameCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
                error?: string;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (this.has_error)
                writer.writeString(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptureAudioFrameCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptureAudioFrameCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptureAudioFrameCallback {
            return CaptureAudioFrameCallback.deserialize(bytes);
        }
    }
    export class NewAudioResamplerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): NewAudioResamplerRequest {
            const message = new NewAudioResamplerRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioResamplerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioResamplerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioResamplerRequest {
            return NewAudioResamplerRequest.deserialize(bytes);
        }
    }
    export class NewAudioResamplerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resampler?: OwnedAudioResampler;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resampler" in data && data.resampler != undefined) {
                    this.resampler = data.resampler;
                }
            }
        }
        get resampler() {
            return pb_1.Message.getWrapperField(this, OwnedAudioResampler, 1) as OwnedAudioResampler;
        }
        set resampler(value: OwnedAudioResampler) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_resampler() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            resampler?: ReturnType<typeof OwnedAudioResampler.prototype.toObject>;
        }): NewAudioResamplerResponse {
            const message = new NewAudioResamplerResponse({});
            if (data.resampler != null) {
                message.resampler = OwnedAudioResampler.fromObject(data.resampler);
            }
            return message;
        }
        toObject() {
            const data: {
                resampler?: ReturnType<typeof OwnedAudioResampler.prototype.toObject>;
            } = {};
            if (this.resampler != null) {
                data.resampler = this.resampler.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_resampler)
                writer.writeMessage(1, this.resampler, () => this.resampler.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewAudioResamplerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewAudioResamplerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.resampler, () => message.resampler = OwnedAudioResampler.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewAudioResamplerResponse {
            return NewAudioResamplerResponse.deserialize(bytes);
        }
    }
    export class RemixAndResampleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resampler_handle?: number;
            buffer?: AudioFrameBufferInfo;
            num_channels?: number;
            sample_rate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resampler_handle" in data && data.resampler_handle != undefined) {
                    this.resampler_handle = data.resampler_handle;
                }
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
                if ("num_channels" in data && data.num_channels != undefined) {
                    this.num_channels = data.num_channels;
                }
                if ("sample_rate" in data && data.sample_rate != undefined) {
                    this.sample_rate = data.sample_rate;
                }
            }
        }
        get resampler_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set resampler_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, AudioFrameBufferInfo, 2) as AudioFrameBufferInfo;
        }
        set buffer(value: AudioFrameBufferInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get num_channels() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set num_channels(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get sample_rate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sample_rate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            resampler_handle?: number;
            buffer?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
            num_channels?: number;
            sample_rate?: number;
        }): RemixAndResampleRequest {
            const message = new RemixAndResampleRequest({});
            if (data.resampler_handle != null) {
                message.resampler_handle = data.resampler_handle;
            }
            if (data.buffer != null) {
                message.buffer = AudioFrameBufferInfo.fromObject(data.buffer);
            }
            if (data.num_channels != null) {
                message.num_channels = data.num_channels;
            }
            if (data.sample_rate != null) {
                message.sample_rate = data.sample_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                resampler_handle?: number;
                buffer?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
                num_channels?: number;
                sample_rate?: number;
            } = {};
            if (this.resampler_handle != null) {
                data.resampler_handle = this.resampler_handle;
            }
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            if (this.num_channels != null) {
                data.num_channels = this.num_channels;
            }
            if (this.sample_rate != null) {
                data.sample_rate = this.sample_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resampler_handle != 0)
                writer.writeUint64(1, this.resampler_handle);
            if (this.has_buffer)
                writer.writeMessage(2, this.buffer, () => this.buffer.serialize(writer));
            if (this.num_channels != 0)
                writer.writeUint32(3, this.num_channels);
            if (this.sample_rate != 0)
                writer.writeUint32(4, this.sample_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemixAndResampleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemixAndResampleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resampler_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.buffer, () => message.buffer = AudioFrameBufferInfo.deserialize(reader));
                        break;
                    case 3:
                        message.num_channels = reader.readUint32();
                        break;
                    case 4:
                        message.sample_rate = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemixAndResampleRequest {
            return RemixAndResampleRequest.deserialize(bytes);
        }
    }
    export class RemixAndResampleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buffer?: OwnedAudioFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, OwnedAudioFrameBuffer, 1) as OwnedAudioFrameBuffer;
        }
        set buffer(value: OwnedAudioFrameBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            buffer?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
        }): RemixAndResampleResponse {
            const message = new RemixAndResampleResponse({});
            if (data.buffer != null) {
                message.buffer = OwnedAudioFrameBuffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                buffer?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
            } = {};
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_buffer)
                writer.writeMessage(1, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemixAndResampleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemixAndResampleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.buffer, () => message.buffer = OwnedAudioFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemixAndResampleResponse {
            return RemixAndResampleResponse.deserialize(bytes);
        }
    }
    export class AudioFrameBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_ptr?: number;
            num_channels?: number;
            sample_rate?: number;
            samples_per_channel?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_ptr" in data && data.data_ptr != undefined) {
                    this.data_ptr = data.data_ptr;
                }
                if ("num_channels" in data && data.num_channels != undefined) {
                    this.num_channels = data.num_channels;
                }
                if ("sample_rate" in data && data.sample_rate != undefined) {
                    this.sample_rate = data.sample_rate;
                }
                if ("samples_per_channel" in data && data.samples_per_channel != undefined) {
                    this.samples_per_channel = data.samples_per_channel;
                }
            }
        }
        get data_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_ptr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get num_channels() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set num_channels(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sample_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sample_rate(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get samples_per_channel() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set samples_per_channel(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            data_ptr?: number;
            num_channels?: number;
            sample_rate?: number;
            samples_per_channel?: number;
        }): AudioFrameBufferInfo {
            const message = new AudioFrameBufferInfo({});
            if (data.data_ptr != null) {
                message.data_ptr = data.data_ptr;
            }
            if (data.num_channels != null) {
                message.num_channels = data.num_channels;
            }
            if (data.sample_rate != null) {
                message.sample_rate = data.sample_rate;
            }
            if (data.samples_per_channel != null) {
                message.samples_per_channel = data.samples_per_channel;
            }
            return message;
        }
        toObject() {
            const data: {
                data_ptr?: number;
                num_channels?: number;
                sample_rate?: number;
                samples_per_channel?: number;
            } = {};
            if (this.data_ptr != null) {
                data.data_ptr = this.data_ptr;
            }
            if (this.num_channels != null) {
                data.num_channels = this.num_channels;
            }
            if (this.sample_rate != null) {
                data.sample_rate = this.sample_rate;
            }
            if (this.samples_per_channel != null) {
                data.samples_per_channel = this.samples_per_channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_ptr != 0)
                writer.writeUint64(1, this.data_ptr);
            if (this.num_channels != 0)
                writer.writeUint32(2, this.num_channels);
            if (this.sample_rate != 0)
                writer.writeUint32(3, this.sample_rate);
            if (this.samples_per_channel != 0)
                writer.writeUint32(4, this.samples_per_channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioFrameBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioFrameBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_ptr = reader.readUint64();
                        break;
                    case 2:
                        message.num_channels = reader.readUint32();
                        break;
                    case 3:
                        message.sample_rate = reader.readUint32();
                        break;
                    case 4:
                        message.samples_per_channel = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioFrameBufferInfo {
            return AudioFrameBufferInfo.deserialize(bytes);
        }
    }
    export class OwnedAudioFrameBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: AudioFrameBufferInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, AudioFrameBufferInfo, 2) as AudioFrameBufferInfo;
        }
        set info(value: AudioFrameBufferInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
        }): OwnedAudioFrameBuffer {
            const message = new OwnedAudioFrameBuffer({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = AudioFrameBufferInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof AudioFrameBufferInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedAudioFrameBuffer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedAudioFrameBuffer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = AudioFrameBufferInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedAudioFrameBuffer {
            return OwnedAudioFrameBuffer.deserialize(bytes);
        }
    }
    export class AudioStreamInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: AudioStreamType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AudioStreamType.AUDIO_STREAM_NATIVE) as AudioStreamType;
        }
        set type(value: AudioStreamType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            type?: AudioStreamType;
        }): AudioStreamInfo {
            const message = new AudioStreamInfo({});
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: AudioStreamType;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != AudioStreamType.AUDIO_STREAM_NATIVE)
                writer.writeEnum(1, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioStreamInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioStreamInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioStreamInfo {
            return AudioStreamInfo.deserialize(bytes);
        }
    }
    export class OwnedAudioStream extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: AudioStreamInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, AudioStreamInfo, 2) as AudioStreamInfo;
        }
        set info(value: AudioStreamInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof AudioStreamInfo.prototype.toObject>;
        }): OwnedAudioStream {
            const message = new OwnedAudioStream({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = AudioStreamInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof AudioStreamInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedAudioStream {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedAudioStream();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = AudioStreamInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedAudioStream {
            return OwnedAudioStream.deserialize(bytes);
        }
    }
    export class AudioStreamEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            stream_handle?: number;
        } & (({
            frame_received?: AudioFrameReceived;
            eos?: never;
        } | {
            frame_received?: never;
            eos?: AudioStreamEOS;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream_handle" in data && data.stream_handle != undefined) {
                    this.stream_handle = data.stream_handle;
                }
                if ("frame_received" in data && data.frame_received != undefined) {
                    this.frame_received = data.frame_received;
                }
                if ("eos" in data && data.eos != undefined) {
                    this.eos = data.eos;
                }
            }
        }
        get stream_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set stream_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame_received() {
            return pb_1.Message.getWrapperField(this, AudioFrameReceived, 2) as AudioFrameReceived;
        }
        set frame_received(value: AudioFrameReceived) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_frame_received() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get eos() {
            return pb_1.Message.getWrapperField(this, AudioStreamEOS, 3) as AudioStreamEOS;
        }
        set eos(value: AudioStreamEOS) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_eos() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "frame_received" | "eos";
            } = {
                0: "none",
                2: "frame_received",
                3: "eos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            stream_handle?: number;
            frame_received?: ReturnType<typeof AudioFrameReceived.prototype.toObject>;
            eos?: ReturnType<typeof AudioStreamEOS.prototype.toObject>;
        }): AudioStreamEvent {
            const message = new AudioStreamEvent({});
            if (data.stream_handle != null) {
                message.stream_handle = data.stream_handle;
            }
            if (data.frame_received != null) {
                message.frame_received = AudioFrameReceived.fromObject(data.frame_received);
            }
            if (data.eos != null) {
                message.eos = AudioStreamEOS.fromObject(data.eos);
            }
            return message;
        }
        toObject() {
            const data: {
                stream_handle?: number;
                frame_received?: ReturnType<typeof AudioFrameReceived.prototype.toObject>;
                eos?: ReturnType<typeof AudioStreamEOS.prototype.toObject>;
            } = {};
            if (this.stream_handle != null) {
                data.stream_handle = this.stream_handle;
            }
            if (this.frame_received != null) {
                data.frame_received = this.frame_received.toObject();
            }
            if (this.eos != null) {
                data.eos = this.eos.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stream_handle != 0)
                writer.writeUint64(1, this.stream_handle);
            if (this.has_frame_received)
                writer.writeMessage(2, this.frame_received, () => this.frame_received.serialize(writer));
            if (this.has_eos)
                writer.writeMessage(3, this.eos, () => this.eos.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioStreamEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioStreamEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stream_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.frame_received, () => message.frame_received = AudioFrameReceived.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.eos, () => message.eos = AudioStreamEOS.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioStreamEvent {
            return AudioStreamEvent.deserialize(bytes);
        }
    }
    export class AudioFrameReceived extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            frame?: OwnedAudioFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get frame() {
            return pb_1.Message.getWrapperField(this, OwnedAudioFrameBuffer, 1) as OwnedAudioFrameBuffer;
        }
        set frame(value: OwnedAudioFrameBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            frame?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
        }): AudioFrameReceived {
            const message = new AudioFrameReceived({});
            if (data.frame != null) {
                message.frame = OwnedAudioFrameBuffer.fromObject(data.frame);
            }
            return message;
        }
        toObject() {
            const data: {
                frame?: ReturnType<typeof OwnedAudioFrameBuffer.prototype.toObject>;
            } = {};
            if (this.frame != null) {
                data.frame = this.frame.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_frame)
                writer.writeMessage(1, this.frame, () => this.frame.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioFrameReceived {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioFrameReceived();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.frame, () => message.frame = OwnedAudioFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioFrameReceived {
            return AudioFrameReceived.deserialize(bytes);
        }
    }
    export class AudioStreamEOS extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AudioStreamEOS {
            const message = new AudioStreamEOS({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioStreamEOS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioStreamEOS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioStreamEOS {
            return AudioStreamEOS.deserialize(bytes);
        }
    }
    export class AudioSourceOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            echo_cancellation?: boolean;
            noise_suppression?: boolean;
            auto_gain_control?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("echo_cancellation" in data && data.echo_cancellation != undefined) {
                    this.echo_cancellation = data.echo_cancellation;
                }
                if ("noise_suppression" in data && data.noise_suppression != undefined) {
                    this.noise_suppression = data.noise_suppression;
                }
                if ("auto_gain_control" in data && data.auto_gain_control != undefined) {
                    this.auto_gain_control = data.auto_gain_control;
                }
            }
        }
        get echo_cancellation() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set echo_cancellation(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get noise_suppression() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set noise_suppression(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get auto_gain_control() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set auto_gain_control(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            echo_cancellation?: boolean;
            noise_suppression?: boolean;
            auto_gain_control?: boolean;
        }): AudioSourceOptions {
            const message = new AudioSourceOptions({});
            if (data.echo_cancellation != null) {
                message.echo_cancellation = data.echo_cancellation;
            }
            if (data.noise_suppression != null) {
                message.noise_suppression = data.noise_suppression;
            }
            if (data.auto_gain_control != null) {
                message.auto_gain_control = data.auto_gain_control;
            }
            return message;
        }
        toObject() {
            const data: {
                echo_cancellation?: boolean;
                noise_suppression?: boolean;
                auto_gain_control?: boolean;
            } = {};
            if (this.echo_cancellation != null) {
                data.echo_cancellation = this.echo_cancellation;
            }
            if (this.noise_suppression != null) {
                data.noise_suppression = this.noise_suppression;
            }
            if (this.auto_gain_control != null) {
                data.auto_gain_control = this.auto_gain_control;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.echo_cancellation != false)
                writer.writeBool(1, this.echo_cancellation);
            if (this.noise_suppression != false)
                writer.writeBool(2, this.noise_suppression);
            if (this.auto_gain_control != false)
                writer.writeBool(3, this.auto_gain_control);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioSourceOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioSourceOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.echo_cancellation = reader.readBool();
                        break;
                    case 2:
                        message.noise_suppression = reader.readBool();
                        break;
                    case 3:
                        message.auto_gain_control = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioSourceOptions {
            return AudioSourceOptions.deserialize(bytes);
        }
    }
    export class AudioSourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: AudioSourceType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, AudioSourceType.AUDIO_SOURCE_NATIVE) as AudioSourceType;
        }
        set type(value: AudioSourceType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: AudioSourceType;
        }): AudioSourceInfo {
            const message = new AudioSourceInfo({});
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: AudioSourceType;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != AudioSourceType.AUDIO_SOURCE_NATIVE)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioSourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioSourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioSourceInfo {
            return AudioSourceInfo.deserialize(bytes);
        }
    }
    export class OwnedAudioSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: AudioSourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, AudioSourceInfo, 2) as AudioSourceInfo;
        }
        set info(value: AudioSourceInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof AudioSourceInfo.prototype.toObject>;
        }): OwnedAudioSource {
            const message = new OwnedAudioSource({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = AudioSourceInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof AudioSourceInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedAudioSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedAudioSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = AudioSourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedAudioSource {
            return OwnedAudioSource.deserialize(bytes);
        }
    }
    export class AudioResamplerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AudioResamplerInfo {
            const message = new AudioResamplerInfo({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioResamplerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioResamplerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioResamplerInfo {
            return AudioResamplerInfo.deserialize(bytes);
        }
    }
    export class OwnedAudioResampler extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: AudioResamplerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, AudioResamplerInfo, 2) as AudioResamplerInfo;
        }
        set info(value: AudioResamplerInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof AudioResamplerInfo.prototype.toObject>;
        }): OwnedAudioResampler {
            const message = new OwnedAudioResampler({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = AudioResamplerInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof AudioResamplerInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedAudioResampler {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedAudioResampler();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = AudioResamplerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedAudioResampler {
            return OwnedAudioResampler.deserialize(bytes);
        }
    }
}
