/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: ffi.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./e2ee";
import * as dependency_2 from "./track";
import * as dependency_3 from "./room";
import * as dependency_4 from "./video_frame";
import * as dependency_5 from "./audio_frame";
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export class FfiRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]];
        constructor(data?: any[] | ({} & (({
            initialize?: InitializeRequest;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: DisposeRequest;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: dependency_3.livekit.proto.ConnectRequest;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: dependency_3.livekit.proto.DisconnectRequest;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: dependency_3.livekit.proto.PublishTrackRequest;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: dependency_3.livekit.proto.UnpublishTrackRequest;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: dependency_3.livekit.proto.PublishDataRequest;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: dependency_3.livekit.proto.SetSubscribedRequest;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: dependency_2.livekit.proto.CreateVideoTrackRequest;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: dependency_2.livekit.proto.CreateAudioTrackRequest;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: dependency_4.livekit.proto.AllocVideoBufferRequest;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: dependency_4.livekit.proto.NewVideoStreamRequest;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: dependency_4.livekit.proto.NewVideoSourceRequest;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: dependency_4.livekit.proto.CaptureVideoFrameRequest;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: dependency_4.livekit.proto.ToI420Request;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: dependency_4.livekit.proto.ToArgbRequest;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: dependency_5.livekit.proto.AllocAudioBufferRequest;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: dependency_5.livekit.proto.NewAudioStreamRequest;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: dependency_5.livekit.proto.NewAudioSourceRequest;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: dependency_5.livekit.proto.CaptureAudioFrameRequest;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: dependency_5.livekit.proto.NewAudioResamplerRequest;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: dependency_5.livekit.proto.RemixAndResampleRequest;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: dependency_1.livekit.proto.E2eeRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("initialize" in data && data.initialize != undefined) {
                    this.initialize = data.initialize;
                }
                if ("dispose" in data && data.dispose != undefined) {
                    this.dispose = data.dispose;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
                if ("disconnect" in data && data.disconnect != undefined) {
                    this.disconnect = data.disconnect;
                }
                if ("publish_track" in data && data.publish_track != undefined) {
                    this.publish_track = data.publish_track;
                }
                if ("unpublish_track" in data && data.unpublish_track != undefined) {
                    this.unpublish_track = data.unpublish_track;
                }
                if ("publish_data" in data && data.publish_data != undefined) {
                    this.publish_data = data.publish_data;
                }
                if ("set_subscribed" in data && data.set_subscribed != undefined) {
                    this.set_subscribed = data.set_subscribed;
                }
                if ("create_video_track" in data && data.create_video_track != undefined) {
                    this.create_video_track = data.create_video_track;
                }
                if ("create_audio_track" in data && data.create_audio_track != undefined) {
                    this.create_audio_track = data.create_audio_track;
                }
                if ("alloc_video_buffer" in data && data.alloc_video_buffer != undefined) {
                    this.alloc_video_buffer = data.alloc_video_buffer;
                }
                if ("new_video_stream" in data && data.new_video_stream != undefined) {
                    this.new_video_stream = data.new_video_stream;
                }
                if ("new_video_source" in data && data.new_video_source != undefined) {
                    this.new_video_source = data.new_video_source;
                }
                if ("capture_video_frame" in data && data.capture_video_frame != undefined) {
                    this.capture_video_frame = data.capture_video_frame;
                }
                if ("to_i420" in data && data.to_i420 != undefined) {
                    this.to_i420 = data.to_i420;
                }
                if ("to_argb" in data && data.to_argb != undefined) {
                    this.to_argb = data.to_argb;
                }
                if ("alloc_audio_buffer" in data && data.alloc_audio_buffer != undefined) {
                    this.alloc_audio_buffer = data.alloc_audio_buffer;
                }
                if ("new_audio_stream" in data && data.new_audio_stream != undefined) {
                    this.new_audio_stream = data.new_audio_stream;
                }
                if ("new_audio_source" in data && data.new_audio_source != undefined) {
                    this.new_audio_source = data.new_audio_source;
                }
                if ("capture_audio_frame" in data && data.capture_audio_frame != undefined) {
                    this.capture_audio_frame = data.capture_audio_frame;
                }
                if ("new_audio_resampler" in data && data.new_audio_resampler != undefined) {
                    this.new_audio_resampler = data.new_audio_resampler;
                }
                if ("remix_and_resample" in data && data.remix_and_resample != undefined) {
                    this.remix_and_resample = data.remix_and_resample;
                }
                if ("e2ee" in data && data.e2ee != undefined) {
                    this.e2ee = data.e2ee;
                }
            }
        }
        get initialize() {
            return pb_1.Message.getWrapperField(this, InitializeRequest, 1) as InitializeRequest;
        }
        set initialize(value: InitializeRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_initialize() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get dispose() {
            return pb_1.Message.getWrapperField(this, DisposeRequest, 2) as DisposeRequest;
        }
        set dispose(value: DisposeRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_dispose() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get connect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.ConnectRequest, 3) as dependency_3.livekit.proto.ConnectRequest;
        }
        set connect(value: dependency_3.livekit.proto.ConnectRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_connect() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get disconnect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.DisconnectRequest, 4) as dependency_3.livekit.proto.DisconnectRequest;
        }
        set disconnect(value: dependency_3.livekit.proto.DisconnectRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_disconnect() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get publish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishTrackRequest, 5) as dependency_3.livekit.proto.PublishTrackRequest;
        }
        set publish_track(value: dependency_3.livekit.proto.PublishTrackRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_publish_track() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get unpublish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.UnpublishTrackRequest, 6) as dependency_3.livekit.proto.UnpublishTrackRequest;
        }
        set unpublish_track(value: dependency_3.livekit.proto.UnpublishTrackRequest) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_unpublish_track() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get publish_data() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishDataRequest, 7) as dependency_3.livekit.proto.PublishDataRequest;
        }
        set publish_data(value: dependency_3.livekit.proto.PublishDataRequest) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_publish_data() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get set_subscribed() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.SetSubscribedRequest, 8) as dependency_3.livekit.proto.SetSubscribedRequest;
        }
        set set_subscribed(value: dependency_3.livekit.proto.SetSubscribedRequest) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_set_subscribed() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get create_video_track() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.CreateVideoTrackRequest, 9) as dependency_2.livekit.proto.CreateVideoTrackRequest;
        }
        set create_video_track(value: dependency_2.livekit.proto.CreateVideoTrackRequest) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_create_video_track() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get create_audio_track() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.CreateAudioTrackRequest, 10) as dependency_2.livekit.proto.CreateAudioTrackRequest;
        }
        set create_audio_track(value: dependency_2.livekit.proto.CreateAudioTrackRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_create_audio_track() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get alloc_video_buffer() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.AllocVideoBufferRequest, 11) as dependency_4.livekit.proto.AllocVideoBufferRequest;
        }
        set alloc_video_buffer(value: dependency_4.livekit.proto.AllocVideoBufferRequest) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_alloc_video_buffer() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get new_video_stream() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.NewVideoStreamRequest, 12) as dependency_4.livekit.proto.NewVideoStreamRequest;
        }
        set new_video_stream(value: dependency_4.livekit.proto.NewVideoStreamRequest) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_new_video_stream() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get new_video_source() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.NewVideoSourceRequest, 13) as dependency_4.livekit.proto.NewVideoSourceRequest;
        }
        set new_video_source(value: dependency_4.livekit.proto.NewVideoSourceRequest) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_new_video_source() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get capture_video_frame() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.CaptureVideoFrameRequest, 14) as dependency_4.livekit.proto.CaptureVideoFrameRequest;
        }
        set capture_video_frame(value: dependency_4.livekit.proto.CaptureVideoFrameRequest) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_capture_video_frame() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get to_i420() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.ToI420Request, 15) as dependency_4.livekit.proto.ToI420Request;
        }
        set to_i420(value: dependency_4.livekit.proto.ToI420Request) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_to_i420() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get to_argb() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.ToArgbRequest, 16) as dependency_4.livekit.proto.ToArgbRequest;
        }
        set to_argb(value: dependency_4.livekit.proto.ToArgbRequest) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_to_argb() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get alloc_audio_buffer() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.AllocAudioBufferRequest, 17) as dependency_5.livekit.proto.AllocAudioBufferRequest;
        }
        set alloc_audio_buffer(value: dependency_5.livekit.proto.AllocAudioBufferRequest) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_alloc_audio_buffer() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get new_audio_stream() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioStreamRequest, 18) as dependency_5.livekit.proto.NewAudioStreamRequest;
        }
        set new_audio_stream(value: dependency_5.livekit.proto.NewAudioStreamRequest) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_new_audio_stream() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get new_audio_source() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioSourceRequest, 19) as dependency_5.livekit.proto.NewAudioSourceRequest;
        }
        set new_audio_source(value: dependency_5.livekit.proto.NewAudioSourceRequest) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_new_audio_source() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get capture_audio_frame() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.CaptureAudioFrameRequest, 20) as dependency_5.livekit.proto.CaptureAudioFrameRequest;
        }
        set capture_audio_frame(value: dependency_5.livekit.proto.CaptureAudioFrameRequest) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_capture_audio_frame() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get new_audio_resampler() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioResamplerRequest, 21) as dependency_5.livekit.proto.NewAudioResamplerRequest;
        }
        set new_audio_resampler(value: dependency_5.livekit.proto.NewAudioResamplerRequest) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_new_audio_resampler() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get remix_and_resample() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.RemixAndResampleRequest, 22) as dependency_5.livekit.proto.RemixAndResampleRequest;
        }
        set remix_and_resample(value: dependency_5.livekit.proto.RemixAndResampleRequest) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_remix_and_resample() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get e2ee() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.E2eeRequest, 23) as dependency_1.livekit.proto.E2eeRequest;
        }
        set e2ee(value: dependency_1.livekit.proto.E2eeRequest) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_e2ee() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "initialize" | "dispose" | "connect" | "disconnect" | "publish_track" | "unpublish_track" | "publish_data" | "set_subscribed" | "create_video_track" | "create_audio_track" | "alloc_video_buffer" | "new_video_stream" | "new_video_source" | "capture_video_frame" | "to_i420" | "to_argb" | "alloc_audio_buffer" | "new_audio_stream" | "new_audio_source" | "capture_audio_frame" | "new_audio_resampler" | "remix_and_resample" | "e2ee";
            } = {
                0: "none",
                1: "initialize",
                2: "dispose",
                3: "connect",
                4: "disconnect",
                5: "publish_track",
                6: "unpublish_track",
                7: "publish_data",
                8: "set_subscribed",
                9: "create_video_track",
                10: "create_audio_track",
                11: "alloc_video_buffer",
                12: "new_video_stream",
                13: "new_video_source",
                14: "capture_video_frame",
                15: "to_i420",
                16: "to_argb",
                17: "alloc_audio_buffer",
                18: "new_audio_stream",
                19: "new_audio_source",
                20: "capture_audio_frame",
                21: "new_audio_resampler",
                22: "remix_and_resample",
                23: "e2ee"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])];
        }
        static fromObject(data: {
            initialize?: ReturnType<typeof InitializeRequest.prototype.toObject>;
            dispose?: ReturnType<typeof DisposeRequest.prototype.toObject>;
            connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectRequest.prototype.toObject>;
            disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectRequest.prototype.toObject>;
            publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackRequest.prototype.toObject>;
            unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackRequest.prototype.toObject>;
            publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataRequest.prototype.toObject>;
            set_subscribed?: ReturnType<typeof dependency_3.livekit.proto.SetSubscribedRequest.prototype.toObject>;
            create_video_track?: ReturnType<typeof dependency_2.livekit.proto.CreateVideoTrackRequest.prototype.toObject>;
            create_audio_track?: ReturnType<typeof dependency_2.livekit.proto.CreateAudioTrackRequest.prototype.toObject>;
            alloc_video_buffer?: ReturnType<typeof dependency_4.livekit.proto.AllocVideoBufferRequest.prototype.toObject>;
            new_video_stream?: ReturnType<typeof dependency_4.livekit.proto.NewVideoStreamRequest.prototype.toObject>;
            new_video_source?: ReturnType<typeof dependency_4.livekit.proto.NewVideoSourceRequest.prototype.toObject>;
            capture_video_frame?: ReturnType<typeof dependency_4.livekit.proto.CaptureVideoFrameRequest.prototype.toObject>;
            to_i420?: ReturnType<typeof dependency_4.livekit.proto.ToI420Request.prototype.toObject>;
            to_argb?: ReturnType<typeof dependency_4.livekit.proto.ToArgbRequest.prototype.toObject>;
            alloc_audio_buffer?: ReturnType<typeof dependency_5.livekit.proto.AllocAudioBufferRequest.prototype.toObject>;
            new_audio_stream?: ReturnType<typeof dependency_5.livekit.proto.NewAudioStreamRequest.prototype.toObject>;
            new_audio_source?: ReturnType<typeof dependency_5.livekit.proto.NewAudioSourceRequest.prototype.toObject>;
            capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameRequest.prototype.toObject>;
            new_audio_resampler?: ReturnType<typeof dependency_5.livekit.proto.NewAudioResamplerRequest.prototype.toObject>;
            remix_and_resample?: ReturnType<typeof dependency_5.livekit.proto.RemixAndResampleRequest.prototype.toObject>;
            e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeRequest.prototype.toObject>;
        }): FfiRequest {
            const message = new FfiRequest({});
            if (data.initialize != null) {
                message.initialize = InitializeRequest.fromObject(data.initialize);
            }
            if (data.dispose != null) {
                message.dispose = DisposeRequest.fromObject(data.dispose);
            }
            if (data.connect != null) {
                message.connect = dependency_3.livekit.proto.ConnectRequest.fromObject(data.connect);
            }
            if (data.disconnect != null) {
                message.disconnect = dependency_3.livekit.proto.DisconnectRequest.fromObject(data.disconnect);
            }
            if (data.publish_track != null) {
                message.publish_track = dependency_3.livekit.proto.PublishTrackRequest.fromObject(data.publish_track);
            }
            if (data.unpublish_track != null) {
                message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackRequest.fromObject(data.unpublish_track);
            }
            if (data.publish_data != null) {
                message.publish_data = dependency_3.livekit.proto.PublishDataRequest.fromObject(data.publish_data);
            }
            if (data.set_subscribed != null) {
                message.set_subscribed = dependency_3.livekit.proto.SetSubscribedRequest.fromObject(data.set_subscribed);
            }
            if (data.create_video_track != null) {
                message.create_video_track = dependency_2.livekit.proto.CreateVideoTrackRequest.fromObject(data.create_video_track);
            }
            if (data.create_audio_track != null) {
                message.create_audio_track = dependency_2.livekit.proto.CreateAudioTrackRequest.fromObject(data.create_audio_track);
            }
            if (data.alloc_video_buffer != null) {
                message.alloc_video_buffer = dependency_4.livekit.proto.AllocVideoBufferRequest.fromObject(data.alloc_video_buffer);
            }
            if (data.new_video_stream != null) {
                message.new_video_stream = dependency_4.livekit.proto.NewVideoStreamRequest.fromObject(data.new_video_stream);
            }
            if (data.new_video_source != null) {
                message.new_video_source = dependency_4.livekit.proto.NewVideoSourceRequest.fromObject(data.new_video_source);
            }
            if (data.capture_video_frame != null) {
                message.capture_video_frame = dependency_4.livekit.proto.CaptureVideoFrameRequest.fromObject(data.capture_video_frame);
            }
            if (data.to_i420 != null) {
                message.to_i420 = dependency_4.livekit.proto.ToI420Request.fromObject(data.to_i420);
            }
            if (data.to_argb != null) {
                message.to_argb = dependency_4.livekit.proto.ToArgbRequest.fromObject(data.to_argb);
            }
            if (data.alloc_audio_buffer != null) {
                message.alloc_audio_buffer = dependency_5.livekit.proto.AllocAudioBufferRequest.fromObject(data.alloc_audio_buffer);
            }
            if (data.new_audio_stream != null) {
                message.new_audio_stream = dependency_5.livekit.proto.NewAudioStreamRequest.fromObject(data.new_audio_stream);
            }
            if (data.new_audio_source != null) {
                message.new_audio_source = dependency_5.livekit.proto.NewAudioSourceRequest.fromObject(data.new_audio_source);
            }
            if (data.capture_audio_frame != null) {
                message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameRequest.fromObject(data.capture_audio_frame);
            }
            if (data.new_audio_resampler != null) {
                message.new_audio_resampler = dependency_5.livekit.proto.NewAudioResamplerRequest.fromObject(data.new_audio_resampler);
            }
            if (data.remix_and_resample != null) {
                message.remix_and_resample = dependency_5.livekit.proto.RemixAndResampleRequest.fromObject(data.remix_and_resample);
            }
            if (data.e2ee != null) {
                message.e2ee = dependency_1.livekit.proto.E2eeRequest.fromObject(data.e2ee);
            }
            return message;
        }
        toObject() {
            const data: {
                initialize?: ReturnType<typeof InitializeRequest.prototype.toObject>;
                dispose?: ReturnType<typeof DisposeRequest.prototype.toObject>;
                connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectRequest.prototype.toObject>;
                disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectRequest.prototype.toObject>;
                publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackRequest.prototype.toObject>;
                unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackRequest.prototype.toObject>;
                publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataRequest.prototype.toObject>;
                set_subscribed?: ReturnType<typeof dependency_3.livekit.proto.SetSubscribedRequest.prototype.toObject>;
                create_video_track?: ReturnType<typeof dependency_2.livekit.proto.CreateVideoTrackRequest.prototype.toObject>;
                create_audio_track?: ReturnType<typeof dependency_2.livekit.proto.CreateAudioTrackRequest.prototype.toObject>;
                alloc_video_buffer?: ReturnType<typeof dependency_4.livekit.proto.AllocVideoBufferRequest.prototype.toObject>;
                new_video_stream?: ReturnType<typeof dependency_4.livekit.proto.NewVideoStreamRequest.prototype.toObject>;
                new_video_source?: ReturnType<typeof dependency_4.livekit.proto.NewVideoSourceRequest.prototype.toObject>;
                capture_video_frame?: ReturnType<typeof dependency_4.livekit.proto.CaptureVideoFrameRequest.prototype.toObject>;
                to_i420?: ReturnType<typeof dependency_4.livekit.proto.ToI420Request.prototype.toObject>;
                to_argb?: ReturnType<typeof dependency_4.livekit.proto.ToArgbRequest.prototype.toObject>;
                alloc_audio_buffer?: ReturnType<typeof dependency_5.livekit.proto.AllocAudioBufferRequest.prototype.toObject>;
                new_audio_stream?: ReturnType<typeof dependency_5.livekit.proto.NewAudioStreamRequest.prototype.toObject>;
                new_audio_source?: ReturnType<typeof dependency_5.livekit.proto.NewAudioSourceRequest.prototype.toObject>;
                capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameRequest.prototype.toObject>;
                new_audio_resampler?: ReturnType<typeof dependency_5.livekit.proto.NewAudioResamplerRequest.prototype.toObject>;
                remix_and_resample?: ReturnType<typeof dependency_5.livekit.proto.RemixAndResampleRequest.prototype.toObject>;
                e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeRequest.prototype.toObject>;
            } = {};
            if (this.initialize != null) {
                data.initialize = this.initialize.toObject();
            }
            if (this.dispose != null) {
                data.dispose = this.dispose.toObject();
            }
            if (this.connect != null) {
                data.connect = this.connect.toObject();
            }
            if (this.disconnect != null) {
                data.disconnect = this.disconnect.toObject();
            }
            if (this.publish_track != null) {
                data.publish_track = this.publish_track.toObject();
            }
            if (this.unpublish_track != null) {
                data.unpublish_track = this.unpublish_track.toObject();
            }
            if (this.publish_data != null) {
                data.publish_data = this.publish_data.toObject();
            }
            if (this.set_subscribed != null) {
                data.set_subscribed = this.set_subscribed.toObject();
            }
            if (this.create_video_track != null) {
                data.create_video_track = this.create_video_track.toObject();
            }
            if (this.create_audio_track != null) {
                data.create_audio_track = this.create_audio_track.toObject();
            }
            if (this.alloc_video_buffer != null) {
                data.alloc_video_buffer = this.alloc_video_buffer.toObject();
            }
            if (this.new_video_stream != null) {
                data.new_video_stream = this.new_video_stream.toObject();
            }
            if (this.new_video_source != null) {
                data.new_video_source = this.new_video_source.toObject();
            }
            if (this.capture_video_frame != null) {
                data.capture_video_frame = this.capture_video_frame.toObject();
            }
            if (this.to_i420 != null) {
                data.to_i420 = this.to_i420.toObject();
            }
            if (this.to_argb != null) {
                data.to_argb = this.to_argb.toObject();
            }
            if (this.alloc_audio_buffer != null) {
                data.alloc_audio_buffer = this.alloc_audio_buffer.toObject();
            }
            if (this.new_audio_stream != null) {
                data.new_audio_stream = this.new_audio_stream.toObject();
            }
            if (this.new_audio_source != null) {
                data.new_audio_source = this.new_audio_source.toObject();
            }
            if (this.capture_audio_frame != null) {
                data.capture_audio_frame = this.capture_audio_frame.toObject();
            }
            if (this.new_audio_resampler != null) {
                data.new_audio_resampler = this.new_audio_resampler.toObject();
            }
            if (this.remix_and_resample != null) {
                data.remix_and_resample = this.remix_and_resample.toObject();
            }
            if (this.e2ee != null) {
                data.e2ee = this.e2ee.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_initialize)
                writer.writeMessage(1, this.initialize, () => this.initialize.serialize(writer));
            if (this.has_dispose)
                writer.writeMessage(2, this.dispose, () => this.dispose.serialize(writer));
            if (this.has_connect)
                writer.writeMessage(3, this.connect, () => this.connect.serialize(writer));
            if (this.has_disconnect)
                writer.writeMessage(4, this.disconnect, () => this.disconnect.serialize(writer));
            if (this.has_publish_track)
                writer.writeMessage(5, this.publish_track, () => this.publish_track.serialize(writer));
            if (this.has_unpublish_track)
                writer.writeMessage(6, this.unpublish_track, () => this.unpublish_track.serialize(writer));
            if (this.has_publish_data)
                writer.writeMessage(7, this.publish_data, () => this.publish_data.serialize(writer));
            if (this.has_set_subscribed)
                writer.writeMessage(8, this.set_subscribed, () => this.set_subscribed.serialize(writer));
            if (this.has_create_video_track)
                writer.writeMessage(9, this.create_video_track, () => this.create_video_track.serialize(writer));
            if (this.has_create_audio_track)
                writer.writeMessage(10, this.create_audio_track, () => this.create_audio_track.serialize(writer));
            if (this.has_alloc_video_buffer)
                writer.writeMessage(11, this.alloc_video_buffer, () => this.alloc_video_buffer.serialize(writer));
            if (this.has_new_video_stream)
                writer.writeMessage(12, this.new_video_stream, () => this.new_video_stream.serialize(writer));
            if (this.has_new_video_source)
                writer.writeMessage(13, this.new_video_source, () => this.new_video_source.serialize(writer));
            if (this.has_capture_video_frame)
                writer.writeMessage(14, this.capture_video_frame, () => this.capture_video_frame.serialize(writer));
            if (this.has_to_i420)
                writer.writeMessage(15, this.to_i420, () => this.to_i420.serialize(writer));
            if (this.has_to_argb)
                writer.writeMessage(16, this.to_argb, () => this.to_argb.serialize(writer));
            if (this.has_alloc_audio_buffer)
                writer.writeMessage(17, this.alloc_audio_buffer, () => this.alloc_audio_buffer.serialize(writer));
            if (this.has_new_audio_stream)
                writer.writeMessage(18, this.new_audio_stream, () => this.new_audio_stream.serialize(writer));
            if (this.has_new_audio_source)
                writer.writeMessage(19, this.new_audio_source, () => this.new_audio_source.serialize(writer));
            if (this.has_capture_audio_frame)
                writer.writeMessage(20, this.capture_audio_frame, () => this.capture_audio_frame.serialize(writer));
            if (this.has_new_audio_resampler)
                writer.writeMessage(21, this.new_audio_resampler, () => this.new_audio_resampler.serialize(writer));
            if (this.has_remix_and_resample)
                writer.writeMessage(22, this.remix_and_resample, () => this.remix_and_resample.serialize(writer));
            if (this.has_e2ee)
                writer.writeMessage(23, this.e2ee, () => this.e2ee.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FfiRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FfiRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.initialize, () => message.initialize = InitializeRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.dispose, () => message.dispose = DisposeRequest.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.connect, () => message.connect = dependency_3.livekit.proto.ConnectRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.disconnect, () => message.disconnect = dependency_3.livekit.proto.DisconnectRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.publish_track, () => message.publish_track = dependency_3.livekit.proto.PublishTrackRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.unpublish_track, () => message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackRequest.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.publish_data, () => message.publish_data = dependency_3.livekit.proto.PublishDataRequest.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.set_subscribed, () => message.set_subscribed = dependency_3.livekit.proto.SetSubscribedRequest.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.create_video_track, () => message.create_video_track = dependency_2.livekit.proto.CreateVideoTrackRequest.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.create_audio_track, () => message.create_audio_track = dependency_2.livekit.proto.CreateAudioTrackRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.alloc_video_buffer, () => message.alloc_video_buffer = dependency_4.livekit.proto.AllocVideoBufferRequest.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.new_video_stream, () => message.new_video_stream = dependency_4.livekit.proto.NewVideoStreamRequest.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.new_video_source, () => message.new_video_source = dependency_4.livekit.proto.NewVideoSourceRequest.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.capture_video_frame, () => message.capture_video_frame = dependency_4.livekit.proto.CaptureVideoFrameRequest.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.to_i420, () => message.to_i420 = dependency_4.livekit.proto.ToI420Request.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.to_argb, () => message.to_argb = dependency_4.livekit.proto.ToArgbRequest.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.alloc_audio_buffer, () => message.alloc_audio_buffer = dependency_5.livekit.proto.AllocAudioBufferRequest.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.new_audio_stream, () => message.new_audio_stream = dependency_5.livekit.proto.NewAudioStreamRequest.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.new_audio_source, () => message.new_audio_source = dependency_5.livekit.proto.NewAudioSourceRequest.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.capture_audio_frame, () => message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameRequest.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.new_audio_resampler, () => message.new_audio_resampler = dependency_5.livekit.proto.NewAudioResamplerRequest.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.remix_and_resample, () => message.remix_and_resample = dependency_5.livekit.proto.RemixAndResampleRequest.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.e2ee, () => message.e2ee = dependency_1.livekit.proto.E2eeRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FfiRequest {
            return FfiRequest.deserialize(bytes);
        }
    }
    export class FfiResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]];
        constructor(data?: any[] | ({} & (({
            initialize?: InitializeResponse;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: DisposeResponse;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: dependency_3.livekit.proto.ConnectResponse;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: dependency_3.livekit.proto.DisconnectResponse;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: dependency_3.livekit.proto.PublishTrackResponse;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: dependency_3.livekit.proto.UnpublishTrackResponse;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: dependency_3.livekit.proto.PublishDataResponse;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: dependency_3.livekit.proto.SetSubscribedResponse;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: dependency_2.livekit.proto.CreateVideoTrackResponse;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: dependency_2.livekit.proto.CreateAudioTrackResponse;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: dependency_4.livekit.proto.AllocVideoBufferResponse;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: dependency_4.livekit.proto.NewVideoStreamResponse;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: dependency_4.livekit.proto.NewVideoSourceResponse;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: dependency_4.livekit.proto.CaptureVideoFrameResponse;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: dependency_4.livekit.proto.ToI420Response;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: dependency_4.livekit.proto.ToArgbResponse;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: dependency_5.livekit.proto.AllocAudioBufferResponse;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: dependency_5.livekit.proto.NewAudioStreamResponse;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: dependency_5.livekit.proto.NewAudioSourceResponse;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: dependency_5.livekit.proto.CaptureAudioFrameResponse;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: dependency_5.livekit.proto.NewAudioResamplerResponse;
            remix_and_resample?: never;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: dependency_5.livekit.proto.RemixAndResampleResponse;
            e2ee?: never;
        } | {
            initialize?: never;
            dispose?: never;
            connect?: never;
            disconnect?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            set_subscribed?: never;
            create_video_track?: never;
            create_audio_track?: never;
            alloc_video_buffer?: never;
            new_video_stream?: never;
            new_video_source?: never;
            capture_video_frame?: never;
            to_i420?: never;
            to_argb?: never;
            alloc_audio_buffer?: never;
            new_audio_stream?: never;
            new_audio_source?: never;
            capture_audio_frame?: never;
            new_audio_resampler?: never;
            remix_and_resample?: never;
            e2ee?: dependency_1.livekit.proto.E2eeResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("initialize" in data && data.initialize != undefined) {
                    this.initialize = data.initialize;
                }
                if ("dispose" in data && data.dispose != undefined) {
                    this.dispose = data.dispose;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
                if ("disconnect" in data && data.disconnect != undefined) {
                    this.disconnect = data.disconnect;
                }
                if ("publish_track" in data && data.publish_track != undefined) {
                    this.publish_track = data.publish_track;
                }
                if ("unpublish_track" in data && data.unpublish_track != undefined) {
                    this.unpublish_track = data.unpublish_track;
                }
                if ("publish_data" in data && data.publish_data != undefined) {
                    this.publish_data = data.publish_data;
                }
                if ("set_subscribed" in data && data.set_subscribed != undefined) {
                    this.set_subscribed = data.set_subscribed;
                }
                if ("create_video_track" in data && data.create_video_track != undefined) {
                    this.create_video_track = data.create_video_track;
                }
                if ("create_audio_track" in data && data.create_audio_track != undefined) {
                    this.create_audio_track = data.create_audio_track;
                }
                if ("alloc_video_buffer" in data && data.alloc_video_buffer != undefined) {
                    this.alloc_video_buffer = data.alloc_video_buffer;
                }
                if ("new_video_stream" in data && data.new_video_stream != undefined) {
                    this.new_video_stream = data.new_video_stream;
                }
                if ("new_video_source" in data && data.new_video_source != undefined) {
                    this.new_video_source = data.new_video_source;
                }
                if ("capture_video_frame" in data && data.capture_video_frame != undefined) {
                    this.capture_video_frame = data.capture_video_frame;
                }
                if ("to_i420" in data && data.to_i420 != undefined) {
                    this.to_i420 = data.to_i420;
                }
                if ("to_argb" in data && data.to_argb != undefined) {
                    this.to_argb = data.to_argb;
                }
                if ("alloc_audio_buffer" in data && data.alloc_audio_buffer != undefined) {
                    this.alloc_audio_buffer = data.alloc_audio_buffer;
                }
                if ("new_audio_stream" in data && data.new_audio_stream != undefined) {
                    this.new_audio_stream = data.new_audio_stream;
                }
                if ("new_audio_source" in data && data.new_audio_source != undefined) {
                    this.new_audio_source = data.new_audio_source;
                }
                if ("capture_audio_frame" in data && data.capture_audio_frame != undefined) {
                    this.capture_audio_frame = data.capture_audio_frame;
                }
                if ("new_audio_resampler" in data && data.new_audio_resampler != undefined) {
                    this.new_audio_resampler = data.new_audio_resampler;
                }
                if ("remix_and_resample" in data && data.remix_and_resample != undefined) {
                    this.remix_and_resample = data.remix_and_resample;
                }
                if ("e2ee" in data && data.e2ee != undefined) {
                    this.e2ee = data.e2ee;
                }
            }
        }
        get initialize() {
            return pb_1.Message.getWrapperField(this, InitializeResponse, 1) as InitializeResponse;
        }
        set initialize(value: InitializeResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_initialize() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get dispose() {
            return pb_1.Message.getWrapperField(this, DisposeResponse, 2) as DisposeResponse;
        }
        set dispose(value: DisposeResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_dispose() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get connect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.ConnectResponse, 3) as dependency_3.livekit.proto.ConnectResponse;
        }
        set connect(value: dependency_3.livekit.proto.ConnectResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_connect() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get disconnect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.DisconnectResponse, 4) as dependency_3.livekit.proto.DisconnectResponse;
        }
        set disconnect(value: dependency_3.livekit.proto.DisconnectResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_disconnect() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get publish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishTrackResponse, 5) as dependency_3.livekit.proto.PublishTrackResponse;
        }
        set publish_track(value: dependency_3.livekit.proto.PublishTrackResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_publish_track() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get unpublish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.UnpublishTrackResponse, 6) as dependency_3.livekit.proto.UnpublishTrackResponse;
        }
        set unpublish_track(value: dependency_3.livekit.proto.UnpublishTrackResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_unpublish_track() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get publish_data() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishDataResponse, 7) as dependency_3.livekit.proto.PublishDataResponse;
        }
        set publish_data(value: dependency_3.livekit.proto.PublishDataResponse) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_publish_data() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get set_subscribed() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.SetSubscribedResponse, 8) as dependency_3.livekit.proto.SetSubscribedResponse;
        }
        set set_subscribed(value: dependency_3.livekit.proto.SetSubscribedResponse) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_set_subscribed() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get create_video_track() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.CreateVideoTrackResponse, 9) as dependency_2.livekit.proto.CreateVideoTrackResponse;
        }
        set create_video_track(value: dependency_2.livekit.proto.CreateVideoTrackResponse) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_create_video_track() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get create_audio_track() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.CreateAudioTrackResponse, 10) as dependency_2.livekit.proto.CreateAudioTrackResponse;
        }
        set create_audio_track(value: dependency_2.livekit.proto.CreateAudioTrackResponse) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_create_audio_track() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get alloc_video_buffer() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.AllocVideoBufferResponse, 11) as dependency_4.livekit.proto.AllocVideoBufferResponse;
        }
        set alloc_video_buffer(value: dependency_4.livekit.proto.AllocVideoBufferResponse) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_alloc_video_buffer() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get new_video_stream() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.NewVideoStreamResponse, 12) as dependency_4.livekit.proto.NewVideoStreamResponse;
        }
        set new_video_stream(value: dependency_4.livekit.proto.NewVideoStreamResponse) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_new_video_stream() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get new_video_source() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.NewVideoSourceResponse, 13) as dependency_4.livekit.proto.NewVideoSourceResponse;
        }
        set new_video_source(value: dependency_4.livekit.proto.NewVideoSourceResponse) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_new_video_source() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get capture_video_frame() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.CaptureVideoFrameResponse, 14) as dependency_4.livekit.proto.CaptureVideoFrameResponse;
        }
        set capture_video_frame(value: dependency_4.livekit.proto.CaptureVideoFrameResponse) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_capture_video_frame() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get to_i420() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.ToI420Response, 15) as dependency_4.livekit.proto.ToI420Response;
        }
        set to_i420(value: dependency_4.livekit.proto.ToI420Response) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_to_i420() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get to_argb() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.ToArgbResponse, 16) as dependency_4.livekit.proto.ToArgbResponse;
        }
        set to_argb(value: dependency_4.livekit.proto.ToArgbResponse) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_to_argb() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get alloc_audio_buffer() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.AllocAudioBufferResponse, 17) as dependency_5.livekit.proto.AllocAudioBufferResponse;
        }
        set alloc_audio_buffer(value: dependency_5.livekit.proto.AllocAudioBufferResponse) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_alloc_audio_buffer() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get new_audio_stream() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioStreamResponse, 18) as dependency_5.livekit.proto.NewAudioStreamResponse;
        }
        set new_audio_stream(value: dependency_5.livekit.proto.NewAudioStreamResponse) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_new_audio_stream() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get new_audio_source() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioSourceResponse, 19) as dependency_5.livekit.proto.NewAudioSourceResponse;
        }
        set new_audio_source(value: dependency_5.livekit.proto.NewAudioSourceResponse) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_new_audio_source() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get capture_audio_frame() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.CaptureAudioFrameResponse, 20) as dependency_5.livekit.proto.CaptureAudioFrameResponse;
        }
        set capture_audio_frame(value: dependency_5.livekit.proto.CaptureAudioFrameResponse) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_capture_audio_frame() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get new_audio_resampler() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.NewAudioResamplerResponse, 21) as dependency_5.livekit.proto.NewAudioResamplerResponse;
        }
        set new_audio_resampler(value: dependency_5.livekit.proto.NewAudioResamplerResponse) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_new_audio_resampler() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get remix_and_resample() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.RemixAndResampleResponse, 22) as dependency_5.livekit.proto.RemixAndResampleResponse;
        }
        set remix_and_resample(value: dependency_5.livekit.proto.RemixAndResampleResponse) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_remix_and_resample() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get e2ee() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.E2eeResponse, 23) as dependency_1.livekit.proto.E2eeResponse;
        }
        set e2ee(value: dependency_1.livekit.proto.E2eeResponse) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_e2ee() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "initialize" | "dispose" | "connect" | "disconnect" | "publish_track" | "unpublish_track" | "publish_data" | "set_subscribed" | "create_video_track" | "create_audio_track" | "alloc_video_buffer" | "new_video_stream" | "new_video_source" | "capture_video_frame" | "to_i420" | "to_argb" | "alloc_audio_buffer" | "new_audio_stream" | "new_audio_source" | "capture_audio_frame" | "new_audio_resampler" | "remix_and_resample" | "e2ee";
            } = {
                0: "none",
                1: "initialize",
                2: "dispose",
                3: "connect",
                4: "disconnect",
                5: "publish_track",
                6: "unpublish_track",
                7: "publish_data",
                8: "set_subscribed",
                9: "create_video_track",
                10: "create_audio_track",
                11: "alloc_video_buffer",
                12: "new_video_stream",
                13: "new_video_source",
                14: "capture_video_frame",
                15: "to_i420",
                16: "to_argb",
                17: "alloc_audio_buffer",
                18: "new_audio_stream",
                19: "new_audio_source",
                20: "capture_audio_frame",
                21: "new_audio_resampler",
                22: "remix_and_resample",
                23: "e2ee"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])];
        }
        static fromObject(data: {
            initialize?: ReturnType<typeof InitializeResponse.prototype.toObject>;
            dispose?: ReturnType<typeof DisposeResponse.prototype.toObject>;
            connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectResponse.prototype.toObject>;
            disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectResponse.prototype.toObject>;
            publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackResponse.prototype.toObject>;
            unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackResponse.prototype.toObject>;
            publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataResponse.prototype.toObject>;
            set_subscribed?: ReturnType<typeof dependency_3.livekit.proto.SetSubscribedResponse.prototype.toObject>;
            create_video_track?: ReturnType<typeof dependency_2.livekit.proto.CreateVideoTrackResponse.prototype.toObject>;
            create_audio_track?: ReturnType<typeof dependency_2.livekit.proto.CreateAudioTrackResponse.prototype.toObject>;
            alloc_video_buffer?: ReturnType<typeof dependency_4.livekit.proto.AllocVideoBufferResponse.prototype.toObject>;
            new_video_stream?: ReturnType<typeof dependency_4.livekit.proto.NewVideoStreamResponse.prototype.toObject>;
            new_video_source?: ReturnType<typeof dependency_4.livekit.proto.NewVideoSourceResponse.prototype.toObject>;
            capture_video_frame?: ReturnType<typeof dependency_4.livekit.proto.CaptureVideoFrameResponse.prototype.toObject>;
            to_i420?: ReturnType<typeof dependency_4.livekit.proto.ToI420Response.prototype.toObject>;
            to_argb?: ReturnType<typeof dependency_4.livekit.proto.ToArgbResponse.prototype.toObject>;
            alloc_audio_buffer?: ReturnType<typeof dependency_5.livekit.proto.AllocAudioBufferResponse.prototype.toObject>;
            new_audio_stream?: ReturnType<typeof dependency_5.livekit.proto.NewAudioStreamResponse.prototype.toObject>;
            new_audio_source?: ReturnType<typeof dependency_5.livekit.proto.NewAudioSourceResponse.prototype.toObject>;
            capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameResponse.prototype.toObject>;
            new_audio_resampler?: ReturnType<typeof dependency_5.livekit.proto.NewAudioResamplerResponse.prototype.toObject>;
            remix_and_resample?: ReturnType<typeof dependency_5.livekit.proto.RemixAndResampleResponse.prototype.toObject>;
            e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeResponse.prototype.toObject>;
        }): FfiResponse {
            const message = new FfiResponse({});
            if (data.initialize != null) {
                message.initialize = InitializeResponse.fromObject(data.initialize);
            }
            if (data.dispose != null) {
                message.dispose = DisposeResponse.fromObject(data.dispose);
            }
            if (data.connect != null) {
                message.connect = dependency_3.livekit.proto.ConnectResponse.fromObject(data.connect);
            }
            if (data.disconnect != null) {
                message.disconnect = dependency_3.livekit.proto.DisconnectResponse.fromObject(data.disconnect);
            }
            if (data.publish_track != null) {
                message.publish_track = dependency_3.livekit.proto.PublishTrackResponse.fromObject(data.publish_track);
            }
            if (data.unpublish_track != null) {
                message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackResponse.fromObject(data.unpublish_track);
            }
            if (data.publish_data != null) {
                message.publish_data = dependency_3.livekit.proto.PublishDataResponse.fromObject(data.publish_data);
            }
            if (data.set_subscribed != null) {
                message.set_subscribed = dependency_3.livekit.proto.SetSubscribedResponse.fromObject(data.set_subscribed);
            }
            if (data.create_video_track != null) {
                message.create_video_track = dependency_2.livekit.proto.CreateVideoTrackResponse.fromObject(data.create_video_track);
            }
            if (data.create_audio_track != null) {
                message.create_audio_track = dependency_2.livekit.proto.CreateAudioTrackResponse.fromObject(data.create_audio_track);
            }
            if (data.alloc_video_buffer != null) {
                message.alloc_video_buffer = dependency_4.livekit.proto.AllocVideoBufferResponse.fromObject(data.alloc_video_buffer);
            }
            if (data.new_video_stream != null) {
                message.new_video_stream = dependency_4.livekit.proto.NewVideoStreamResponse.fromObject(data.new_video_stream);
            }
            if (data.new_video_source != null) {
                message.new_video_source = dependency_4.livekit.proto.NewVideoSourceResponse.fromObject(data.new_video_source);
            }
            if (data.capture_video_frame != null) {
                message.capture_video_frame = dependency_4.livekit.proto.CaptureVideoFrameResponse.fromObject(data.capture_video_frame);
            }
            if (data.to_i420 != null) {
                message.to_i420 = dependency_4.livekit.proto.ToI420Response.fromObject(data.to_i420);
            }
            if (data.to_argb != null) {
                message.to_argb = dependency_4.livekit.proto.ToArgbResponse.fromObject(data.to_argb);
            }
            if (data.alloc_audio_buffer != null) {
                message.alloc_audio_buffer = dependency_5.livekit.proto.AllocAudioBufferResponse.fromObject(data.alloc_audio_buffer);
            }
            if (data.new_audio_stream != null) {
                message.new_audio_stream = dependency_5.livekit.proto.NewAudioStreamResponse.fromObject(data.new_audio_stream);
            }
            if (data.new_audio_source != null) {
                message.new_audio_source = dependency_5.livekit.proto.NewAudioSourceResponse.fromObject(data.new_audio_source);
            }
            if (data.capture_audio_frame != null) {
                message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameResponse.fromObject(data.capture_audio_frame);
            }
            if (data.new_audio_resampler != null) {
                message.new_audio_resampler = dependency_5.livekit.proto.NewAudioResamplerResponse.fromObject(data.new_audio_resampler);
            }
            if (data.remix_and_resample != null) {
                message.remix_and_resample = dependency_5.livekit.proto.RemixAndResampleResponse.fromObject(data.remix_and_resample);
            }
            if (data.e2ee != null) {
                message.e2ee = dependency_1.livekit.proto.E2eeResponse.fromObject(data.e2ee);
            }
            return message;
        }
        toObject() {
            const data: {
                initialize?: ReturnType<typeof InitializeResponse.prototype.toObject>;
                dispose?: ReturnType<typeof DisposeResponse.prototype.toObject>;
                connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectResponse.prototype.toObject>;
                disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectResponse.prototype.toObject>;
                publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackResponse.prototype.toObject>;
                unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackResponse.prototype.toObject>;
                publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataResponse.prototype.toObject>;
                set_subscribed?: ReturnType<typeof dependency_3.livekit.proto.SetSubscribedResponse.prototype.toObject>;
                create_video_track?: ReturnType<typeof dependency_2.livekit.proto.CreateVideoTrackResponse.prototype.toObject>;
                create_audio_track?: ReturnType<typeof dependency_2.livekit.proto.CreateAudioTrackResponse.prototype.toObject>;
                alloc_video_buffer?: ReturnType<typeof dependency_4.livekit.proto.AllocVideoBufferResponse.prototype.toObject>;
                new_video_stream?: ReturnType<typeof dependency_4.livekit.proto.NewVideoStreamResponse.prototype.toObject>;
                new_video_source?: ReturnType<typeof dependency_4.livekit.proto.NewVideoSourceResponse.prototype.toObject>;
                capture_video_frame?: ReturnType<typeof dependency_4.livekit.proto.CaptureVideoFrameResponse.prototype.toObject>;
                to_i420?: ReturnType<typeof dependency_4.livekit.proto.ToI420Response.prototype.toObject>;
                to_argb?: ReturnType<typeof dependency_4.livekit.proto.ToArgbResponse.prototype.toObject>;
                alloc_audio_buffer?: ReturnType<typeof dependency_5.livekit.proto.AllocAudioBufferResponse.prototype.toObject>;
                new_audio_stream?: ReturnType<typeof dependency_5.livekit.proto.NewAudioStreamResponse.prototype.toObject>;
                new_audio_source?: ReturnType<typeof dependency_5.livekit.proto.NewAudioSourceResponse.prototype.toObject>;
                capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameResponse.prototype.toObject>;
                new_audio_resampler?: ReturnType<typeof dependency_5.livekit.proto.NewAudioResamplerResponse.prototype.toObject>;
                remix_and_resample?: ReturnType<typeof dependency_5.livekit.proto.RemixAndResampleResponse.prototype.toObject>;
                e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeResponse.prototype.toObject>;
            } = {};
            if (this.initialize != null) {
                data.initialize = this.initialize.toObject();
            }
            if (this.dispose != null) {
                data.dispose = this.dispose.toObject();
            }
            if (this.connect != null) {
                data.connect = this.connect.toObject();
            }
            if (this.disconnect != null) {
                data.disconnect = this.disconnect.toObject();
            }
            if (this.publish_track != null) {
                data.publish_track = this.publish_track.toObject();
            }
            if (this.unpublish_track != null) {
                data.unpublish_track = this.unpublish_track.toObject();
            }
            if (this.publish_data != null) {
                data.publish_data = this.publish_data.toObject();
            }
            if (this.set_subscribed != null) {
                data.set_subscribed = this.set_subscribed.toObject();
            }
            if (this.create_video_track != null) {
                data.create_video_track = this.create_video_track.toObject();
            }
            if (this.create_audio_track != null) {
                data.create_audio_track = this.create_audio_track.toObject();
            }
            if (this.alloc_video_buffer != null) {
                data.alloc_video_buffer = this.alloc_video_buffer.toObject();
            }
            if (this.new_video_stream != null) {
                data.new_video_stream = this.new_video_stream.toObject();
            }
            if (this.new_video_source != null) {
                data.new_video_source = this.new_video_source.toObject();
            }
            if (this.capture_video_frame != null) {
                data.capture_video_frame = this.capture_video_frame.toObject();
            }
            if (this.to_i420 != null) {
                data.to_i420 = this.to_i420.toObject();
            }
            if (this.to_argb != null) {
                data.to_argb = this.to_argb.toObject();
            }
            if (this.alloc_audio_buffer != null) {
                data.alloc_audio_buffer = this.alloc_audio_buffer.toObject();
            }
            if (this.new_audio_stream != null) {
                data.new_audio_stream = this.new_audio_stream.toObject();
            }
            if (this.new_audio_source != null) {
                data.new_audio_source = this.new_audio_source.toObject();
            }
            if (this.capture_audio_frame != null) {
                data.capture_audio_frame = this.capture_audio_frame.toObject();
            }
            if (this.new_audio_resampler != null) {
                data.new_audio_resampler = this.new_audio_resampler.toObject();
            }
            if (this.remix_and_resample != null) {
                data.remix_and_resample = this.remix_and_resample.toObject();
            }
            if (this.e2ee != null) {
                data.e2ee = this.e2ee.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_initialize)
                writer.writeMessage(1, this.initialize, () => this.initialize.serialize(writer));
            if (this.has_dispose)
                writer.writeMessage(2, this.dispose, () => this.dispose.serialize(writer));
            if (this.has_connect)
                writer.writeMessage(3, this.connect, () => this.connect.serialize(writer));
            if (this.has_disconnect)
                writer.writeMessage(4, this.disconnect, () => this.disconnect.serialize(writer));
            if (this.has_publish_track)
                writer.writeMessage(5, this.publish_track, () => this.publish_track.serialize(writer));
            if (this.has_unpublish_track)
                writer.writeMessage(6, this.unpublish_track, () => this.unpublish_track.serialize(writer));
            if (this.has_publish_data)
                writer.writeMessage(7, this.publish_data, () => this.publish_data.serialize(writer));
            if (this.has_set_subscribed)
                writer.writeMessage(8, this.set_subscribed, () => this.set_subscribed.serialize(writer));
            if (this.has_create_video_track)
                writer.writeMessage(9, this.create_video_track, () => this.create_video_track.serialize(writer));
            if (this.has_create_audio_track)
                writer.writeMessage(10, this.create_audio_track, () => this.create_audio_track.serialize(writer));
            if (this.has_alloc_video_buffer)
                writer.writeMessage(11, this.alloc_video_buffer, () => this.alloc_video_buffer.serialize(writer));
            if (this.has_new_video_stream)
                writer.writeMessage(12, this.new_video_stream, () => this.new_video_stream.serialize(writer));
            if (this.has_new_video_source)
                writer.writeMessage(13, this.new_video_source, () => this.new_video_source.serialize(writer));
            if (this.has_capture_video_frame)
                writer.writeMessage(14, this.capture_video_frame, () => this.capture_video_frame.serialize(writer));
            if (this.has_to_i420)
                writer.writeMessage(15, this.to_i420, () => this.to_i420.serialize(writer));
            if (this.has_to_argb)
                writer.writeMessage(16, this.to_argb, () => this.to_argb.serialize(writer));
            if (this.has_alloc_audio_buffer)
                writer.writeMessage(17, this.alloc_audio_buffer, () => this.alloc_audio_buffer.serialize(writer));
            if (this.has_new_audio_stream)
                writer.writeMessage(18, this.new_audio_stream, () => this.new_audio_stream.serialize(writer));
            if (this.has_new_audio_source)
                writer.writeMessage(19, this.new_audio_source, () => this.new_audio_source.serialize(writer));
            if (this.has_capture_audio_frame)
                writer.writeMessage(20, this.capture_audio_frame, () => this.capture_audio_frame.serialize(writer));
            if (this.has_new_audio_resampler)
                writer.writeMessage(21, this.new_audio_resampler, () => this.new_audio_resampler.serialize(writer));
            if (this.has_remix_and_resample)
                writer.writeMessage(22, this.remix_and_resample, () => this.remix_and_resample.serialize(writer));
            if (this.has_e2ee)
                writer.writeMessage(23, this.e2ee, () => this.e2ee.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FfiResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FfiResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.initialize, () => message.initialize = InitializeResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.dispose, () => message.dispose = DisposeResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.connect, () => message.connect = dependency_3.livekit.proto.ConnectResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.disconnect, () => message.disconnect = dependency_3.livekit.proto.DisconnectResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.publish_track, () => message.publish_track = dependency_3.livekit.proto.PublishTrackResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.unpublish_track, () => message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.publish_data, () => message.publish_data = dependency_3.livekit.proto.PublishDataResponse.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.set_subscribed, () => message.set_subscribed = dependency_3.livekit.proto.SetSubscribedResponse.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.create_video_track, () => message.create_video_track = dependency_2.livekit.proto.CreateVideoTrackResponse.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.create_audio_track, () => message.create_audio_track = dependency_2.livekit.proto.CreateAudioTrackResponse.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.alloc_video_buffer, () => message.alloc_video_buffer = dependency_4.livekit.proto.AllocVideoBufferResponse.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.new_video_stream, () => message.new_video_stream = dependency_4.livekit.proto.NewVideoStreamResponse.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.new_video_source, () => message.new_video_source = dependency_4.livekit.proto.NewVideoSourceResponse.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.capture_video_frame, () => message.capture_video_frame = dependency_4.livekit.proto.CaptureVideoFrameResponse.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.to_i420, () => message.to_i420 = dependency_4.livekit.proto.ToI420Response.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.to_argb, () => message.to_argb = dependency_4.livekit.proto.ToArgbResponse.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.alloc_audio_buffer, () => message.alloc_audio_buffer = dependency_5.livekit.proto.AllocAudioBufferResponse.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.new_audio_stream, () => message.new_audio_stream = dependency_5.livekit.proto.NewAudioStreamResponse.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.new_audio_source, () => message.new_audio_source = dependency_5.livekit.proto.NewAudioSourceResponse.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.capture_audio_frame, () => message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameResponse.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.new_audio_resampler, () => message.new_audio_resampler = dependency_5.livekit.proto.NewAudioResamplerResponse.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.remix_and_resample, () => message.remix_and_resample = dependency_5.livekit.proto.RemixAndResampleResponse.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.e2ee, () => message.e2ee = dependency_1.livekit.proto.E2eeResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FfiResponse {
            return FfiResponse.deserialize(bytes);
        }
    }
    export class FfiEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];
        constructor(data?: any[] | ({} & (({
            room_event?: dependency_3.livekit.proto.RoomEvent;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: dependency_2.livekit.proto.TrackEvent;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: dependency_4.livekit.proto.VideoStreamEvent;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: dependency_5.livekit.proto.AudioStreamEvent;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: dependency_3.livekit.proto.ConnectCallback;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: dependency_3.livekit.proto.DisconnectCallback;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: DisposeCallback;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: dependency_3.livekit.proto.PublishTrackCallback;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: dependency_3.livekit.proto.UnpublishTrackCallback;
            publish_data?: never;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: dependency_3.livekit.proto.PublishDataCallback;
            capture_audio_frame?: never;
        } | {
            room_event?: never;
            track_event?: never;
            video_stream_event?: never;
            audio_stream_event?: never;
            connect?: never;
            disconnect?: never;
            dispose?: never;
            publish_track?: never;
            unpublish_track?: never;
            publish_data?: never;
            capture_audio_frame?: dependency_5.livekit.proto.CaptureAudioFrameCallback;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_event" in data && data.room_event != undefined) {
                    this.room_event = data.room_event;
                }
                if ("track_event" in data && data.track_event != undefined) {
                    this.track_event = data.track_event;
                }
                if ("video_stream_event" in data && data.video_stream_event != undefined) {
                    this.video_stream_event = data.video_stream_event;
                }
                if ("audio_stream_event" in data && data.audio_stream_event != undefined) {
                    this.audio_stream_event = data.audio_stream_event;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
                if ("disconnect" in data && data.disconnect != undefined) {
                    this.disconnect = data.disconnect;
                }
                if ("dispose" in data && data.dispose != undefined) {
                    this.dispose = data.dispose;
                }
                if ("publish_track" in data && data.publish_track != undefined) {
                    this.publish_track = data.publish_track;
                }
                if ("unpublish_track" in data && data.unpublish_track != undefined) {
                    this.unpublish_track = data.unpublish_track;
                }
                if ("publish_data" in data && data.publish_data != undefined) {
                    this.publish_data = data.publish_data;
                }
                if ("capture_audio_frame" in data && data.capture_audio_frame != undefined) {
                    this.capture_audio_frame = data.capture_audio_frame;
                }
            }
        }
        get room_event() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.RoomEvent, 1) as dependency_3.livekit.proto.RoomEvent;
        }
        set room_event(value: dependency_3.livekit.proto.RoomEvent) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_room_event() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get track_event() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.TrackEvent, 2) as dependency_2.livekit.proto.TrackEvent;
        }
        set track_event(value: dependency_2.livekit.proto.TrackEvent) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_track_event() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get video_stream_event() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.VideoStreamEvent, 3) as dependency_4.livekit.proto.VideoStreamEvent;
        }
        set video_stream_event(value: dependency_4.livekit.proto.VideoStreamEvent) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_video_stream_event() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get audio_stream_event() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.AudioStreamEvent, 4) as dependency_5.livekit.proto.AudioStreamEvent;
        }
        set audio_stream_event(value: dependency_5.livekit.proto.AudioStreamEvent) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_audio_stream_event() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get connect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.ConnectCallback, 5) as dependency_3.livekit.proto.ConnectCallback;
        }
        set connect(value: dependency_3.livekit.proto.ConnectCallback) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_connect() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get disconnect() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.DisconnectCallback, 6) as dependency_3.livekit.proto.DisconnectCallback;
        }
        set disconnect(value: dependency_3.livekit.proto.DisconnectCallback) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_disconnect() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get dispose() {
            return pb_1.Message.getWrapperField(this, DisposeCallback, 7) as DisposeCallback;
        }
        set dispose(value: DisposeCallback) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_dispose() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get publish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishTrackCallback, 8) as dependency_3.livekit.proto.PublishTrackCallback;
        }
        set publish_track(value: dependency_3.livekit.proto.PublishTrackCallback) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_publish_track() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get unpublish_track() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.UnpublishTrackCallback, 9) as dependency_3.livekit.proto.UnpublishTrackCallback;
        }
        set unpublish_track(value: dependency_3.livekit.proto.UnpublishTrackCallback) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_unpublish_track() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get publish_data() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.PublishDataCallback, 10) as dependency_3.livekit.proto.PublishDataCallback;
        }
        set publish_data(value: dependency_3.livekit.proto.PublishDataCallback) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_publish_data() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get capture_audio_frame() {
            return pb_1.Message.getWrapperField(this, dependency_5.livekit.proto.CaptureAudioFrameCallback, 11) as dependency_5.livekit.proto.CaptureAudioFrameCallback;
        }
        set capture_audio_frame(value: dependency_5.livekit.proto.CaptureAudioFrameCallback) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_capture_audio_frame() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "room_event" | "track_event" | "video_stream_event" | "audio_stream_event" | "connect" | "disconnect" | "dispose" | "publish_track" | "unpublish_track" | "publish_data" | "capture_audio_frame";
            } = {
                0: "none",
                1: "room_event",
                2: "track_event",
                3: "video_stream_event",
                4: "audio_stream_event",
                5: "connect",
                6: "disconnect",
                7: "dispose",
                8: "publish_track",
                9: "unpublish_track",
                10: "publish_data",
                11: "capture_audio_frame"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];
        }
        static fromObject(data: {
            room_event?: ReturnType<typeof dependency_3.livekit.proto.RoomEvent.prototype.toObject>;
            track_event?: ReturnType<typeof dependency_2.livekit.proto.TrackEvent.prototype.toObject>;
            video_stream_event?: ReturnType<typeof dependency_4.livekit.proto.VideoStreamEvent.prototype.toObject>;
            audio_stream_event?: ReturnType<typeof dependency_5.livekit.proto.AudioStreamEvent.prototype.toObject>;
            connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectCallback.prototype.toObject>;
            disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectCallback.prototype.toObject>;
            dispose?: ReturnType<typeof DisposeCallback.prototype.toObject>;
            publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackCallback.prototype.toObject>;
            unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackCallback.prototype.toObject>;
            publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataCallback.prototype.toObject>;
            capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameCallback.prototype.toObject>;
        }): FfiEvent {
            const message = new FfiEvent({});
            if (data.room_event != null) {
                message.room_event = dependency_3.livekit.proto.RoomEvent.fromObject(data.room_event);
            }
            if (data.track_event != null) {
                message.track_event = dependency_2.livekit.proto.TrackEvent.fromObject(data.track_event);
            }
            if (data.video_stream_event != null) {
                message.video_stream_event = dependency_4.livekit.proto.VideoStreamEvent.fromObject(data.video_stream_event);
            }
            if (data.audio_stream_event != null) {
                message.audio_stream_event = dependency_5.livekit.proto.AudioStreamEvent.fromObject(data.audio_stream_event);
            }
            if (data.connect != null) {
                message.connect = dependency_3.livekit.proto.ConnectCallback.fromObject(data.connect);
            }
            if (data.disconnect != null) {
                message.disconnect = dependency_3.livekit.proto.DisconnectCallback.fromObject(data.disconnect);
            }
            if (data.dispose != null) {
                message.dispose = DisposeCallback.fromObject(data.dispose);
            }
            if (data.publish_track != null) {
                message.publish_track = dependency_3.livekit.proto.PublishTrackCallback.fromObject(data.publish_track);
            }
            if (data.unpublish_track != null) {
                message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackCallback.fromObject(data.unpublish_track);
            }
            if (data.publish_data != null) {
                message.publish_data = dependency_3.livekit.proto.PublishDataCallback.fromObject(data.publish_data);
            }
            if (data.capture_audio_frame != null) {
                message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameCallback.fromObject(data.capture_audio_frame);
            }
            return message;
        }
        toObject() {
            const data: {
                room_event?: ReturnType<typeof dependency_3.livekit.proto.RoomEvent.prototype.toObject>;
                track_event?: ReturnType<typeof dependency_2.livekit.proto.TrackEvent.prototype.toObject>;
                video_stream_event?: ReturnType<typeof dependency_4.livekit.proto.VideoStreamEvent.prototype.toObject>;
                audio_stream_event?: ReturnType<typeof dependency_5.livekit.proto.AudioStreamEvent.prototype.toObject>;
                connect?: ReturnType<typeof dependency_3.livekit.proto.ConnectCallback.prototype.toObject>;
                disconnect?: ReturnType<typeof dependency_3.livekit.proto.DisconnectCallback.prototype.toObject>;
                dispose?: ReturnType<typeof DisposeCallback.prototype.toObject>;
                publish_track?: ReturnType<typeof dependency_3.livekit.proto.PublishTrackCallback.prototype.toObject>;
                unpublish_track?: ReturnType<typeof dependency_3.livekit.proto.UnpublishTrackCallback.prototype.toObject>;
                publish_data?: ReturnType<typeof dependency_3.livekit.proto.PublishDataCallback.prototype.toObject>;
                capture_audio_frame?: ReturnType<typeof dependency_5.livekit.proto.CaptureAudioFrameCallback.prototype.toObject>;
            } = {};
            if (this.room_event != null) {
                data.room_event = this.room_event.toObject();
            }
            if (this.track_event != null) {
                data.track_event = this.track_event.toObject();
            }
            if (this.video_stream_event != null) {
                data.video_stream_event = this.video_stream_event.toObject();
            }
            if (this.audio_stream_event != null) {
                data.audio_stream_event = this.audio_stream_event.toObject();
            }
            if (this.connect != null) {
                data.connect = this.connect.toObject();
            }
            if (this.disconnect != null) {
                data.disconnect = this.disconnect.toObject();
            }
            if (this.dispose != null) {
                data.dispose = this.dispose.toObject();
            }
            if (this.publish_track != null) {
                data.publish_track = this.publish_track.toObject();
            }
            if (this.unpublish_track != null) {
                data.unpublish_track = this.unpublish_track.toObject();
            }
            if (this.publish_data != null) {
                data.publish_data = this.publish_data.toObject();
            }
            if (this.capture_audio_frame != null) {
                data.capture_audio_frame = this.capture_audio_frame.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_room_event)
                writer.writeMessage(1, this.room_event, () => this.room_event.serialize(writer));
            if (this.has_track_event)
                writer.writeMessage(2, this.track_event, () => this.track_event.serialize(writer));
            if (this.has_video_stream_event)
                writer.writeMessage(3, this.video_stream_event, () => this.video_stream_event.serialize(writer));
            if (this.has_audio_stream_event)
                writer.writeMessage(4, this.audio_stream_event, () => this.audio_stream_event.serialize(writer));
            if (this.has_connect)
                writer.writeMessage(5, this.connect, () => this.connect.serialize(writer));
            if (this.has_disconnect)
                writer.writeMessage(6, this.disconnect, () => this.disconnect.serialize(writer));
            if (this.has_dispose)
                writer.writeMessage(7, this.dispose, () => this.dispose.serialize(writer));
            if (this.has_publish_track)
                writer.writeMessage(8, this.publish_track, () => this.publish_track.serialize(writer));
            if (this.has_unpublish_track)
                writer.writeMessage(9, this.unpublish_track, () => this.unpublish_track.serialize(writer));
            if (this.has_publish_data)
                writer.writeMessage(10, this.publish_data, () => this.publish_data.serialize(writer));
            if (this.has_capture_audio_frame)
                writer.writeMessage(11, this.capture_audio_frame, () => this.capture_audio_frame.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FfiEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FfiEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.room_event, () => message.room_event = dependency_3.livekit.proto.RoomEvent.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.track_event, () => message.track_event = dependency_2.livekit.proto.TrackEvent.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.video_stream_event, () => message.video_stream_event = dependency_4.livekit.proto.VideoStreamEvent.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.audio_stream_event, () => message.audio_stream_event = dependency_5.livekit.proto.AudioStreamEvent.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.connect, () => message.connect = dependency_3.livekit.proto.ConnectCallback.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.disconnect, () => message.disconnect = dependency_3.livekit.proto.DisconnectCallback.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.dispose, () => message.dispose = DisposeCallback.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.publish_track, () => message.publish_track = dependency_3.livekit.proto.PublishTrackCallback.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.unpublish_track, () => message.unpublish_track = dependency_3.livekit.proto.UnpublishTrackCallback.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.publish_data, () => message.publish_data = dependency_3.livekit.proto.PublishDataCallback.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.capture_audio_frame, () => message.capture_audio_frame = dependency_5.livekit.proto.CaptureAudioFrameCallback.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FfiEvent {
            return FfiEvent.deserialize(bytes);
        }
    }
    export class InitializeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_callback_ptr?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_callback_ptr" in data && data.event_callback_ptr != undefined) {
                    this.event_callback_ptr = data.event_callback_ptr;
                }
            }
        }
        get event_callback_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set event_callback_ptr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            event_callback_ptr?: number;
        }): InitializeRequest {
            const message = new InitializeRequest({});
            if (data.event_callback_ptr != null) {
                message.event_callback_ptr = data.event_callback_ptr;
            }
            return message;
        }
        toObject() {
            const data: {
                event_callback_ptr?: number;
            } = {};
            if (this.event_callback_ptr != null) {
                data.event_callback_ptr = this.event_callback_ptr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_callback_ptr != 0)
                writer.writeUint64(1, this.event_callback_ptr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_callback_ptr = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeRequest {
            return InitializeRequest.deserialize(bytes);
        }
    }
    export class InitializeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): InitializeResponse {
            const message = new InitializeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeResponse {
            return InitializeResponse.deserialize(bytes);
        }
    }
    export class DisposeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async" in data && data.async != undefined) {
                    this.async = data.async;
                }
            }
        }
        get async() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set async(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async?: boolean;
        }): DisposeRequest {
            const message = new DisposeRequest({});
            if (data.async != null) {
                message.async = data.async;
            }
            return message;
        }
        toObject() {
            const data: {
                async?: boolean;
            } = {};
            if (this.async != null) {
                data.async = this.async;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async != false)
                writer.writeBool(1, this.async);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisposeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisposeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisposeRequest {
            return DisposeRequest.deserialize(bytes);
        }
    }
    export class DisposeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            async_id?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_async_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _async_id() {
            const cases: {
                [index: number]: "none" | "async_id";
            } = {
                0: "none",
                1: "async_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            async_id?: number;
        }): DisposeResponse {
            const message = new DisposeResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_id)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisposeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisposeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisposeResponse {
            return DisposeResponse.deserialize(bytes);
        }
    }
    export class DisposeCallback extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): DisposeCallback {
            const message = new DisposeCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisposeCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisposeCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisposeCallback {
            return DisposeCallback.deserialize(bytes);
        }
    }
}
