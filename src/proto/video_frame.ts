/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: video_frame.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./handle";
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export enum VideoCodec {
        VP8 = 0,
        H264 = 1,
        AV1 = 2
    }
    export enum VideoRotation {
        VIDEO_ROTATION_0 = 0,
        VIDEO_ROTATION_90 = 1,
        VIDEO_ROTATION_180 = 2,
        VIDEO_ROTATION_270 = 3
    }
    export enum VideoFormatType {
        FORMAT_ARGB = 0,
        FORMAT_BGRA = 1,
        FORMAT_ABGR = 2,
        FORMAT_RGBA = 3
    }
    export enum VideoFrameBufferType {
        NATIVE = 0,
        I420 = 1,
        I420A = 2,
        I422 = 3,
        I444 = 4,
        I010 = 5,
        NV12 = 6
    }
    export enum VideoStreamType {
        VIDEO_STREAM_NATIVE = 0,
        VIDEO_STREAM_WEBGL = 1,
        VIDEO_STREAM_HTML = 2
    }
    export enum VideoSourceType {
        VIDEO_SOURCE_NATIVE = 0
    }
    export class AllocVideoBufferRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: VideoFrameBufferType;
            width?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoFrameBufferType.NATIVE) as VideoFrameBufferType;
        }
        set type(value: VideoFrameBufferType) {
            pb_1.Message.setField(this, 1, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: VideoFrameBufferType;
            width?: number;
            height?: number;
        }): AllocVideoBufferRequest {
            const message = new AllocVideoBufferRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: VideoFrameBufferType;
                width?: number;
                height?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != VideoFrameBufferType.NATIVE)
                writer.writeEnum(1, this.type);
            if (this.width != 0)
                writer.writeUint32(2, this.width);
            if (this.height != 0)
                writer.writeUint32(3, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllocVideoBufferRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllocVideoBufferRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.width = reader.readUint32();
                        break;
                    case 3:
                        message.height = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllocVideoBufferRequest {
            return AllocVideoBufferRequest.deserialize(bytes);
        }
    }
    export class AllocVideoBufferResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buffer?: OwnedVideoFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, OwnedVideoFrameBuffer, 1) as OwnedVideoFrameBuffer;
        }
        set buffer(value: OwnedVideoFrameBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
        }): AllocVideoBufferResponse {
            const message = new AllocVideoBufferResponse({});
            if (data.buffer != null) {
                message.buffer = OwnedVideoFrameBuffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
            } = {};
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_buffer)
                writer.writeMessage(1, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllocVideoBufferResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllocVideoBufferResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.buffer, () => message.buffer = OwnedVideoFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllocVideoBufferResponse {
            return AllocVideoBufferResponse.deserialize(bytes);
        }
    }
    export class NewVideoStreamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            track_handle?: number;
            type?: VideoStreamType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("track_handle" in data && data.track_handle != undefined) {
                    this.track_handle = data.track_handle;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get track_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set track_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, VideoStreamType.VIDEO_STREAM_NATIVE) as VideoStreamType;
        }
        set type(value: VideoStreamType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            track_handle?: number;
            type?: VideoStreamType;
        }): NewVideoStreamRequest {
            const message = new NewVideoStreamRequest({});
            if (data.track_handle != null) {
                message.track_handle = data.track_handle;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                track_handle?: number;
                type?: VideoStreamType;
            } = {};
            if (this.track_handle != null) {
                data.track_handle = this.track_handle;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.track_handle != 0)
                writer.writeUint64(1, this.track_handle);
            if (this.type != VideoStreamType.VIDEO_STREAM_NATIVE)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewVideoStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewVideoStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.track_handle = reader.readUint64();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewVideoStreamRequest {
            return NewVideoStreamRequest.deserialize(bytes);
        }
    }
    export class NewVideoStreamResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stream?: OwnedVideoStream;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream" in data && data.stream != undefined) {
                    this.stream = data.stream;
                }
            }
        }
        get stream() {
            return pb_1.Message.getWrapperField(this, OwnedVideoStream, 1) as OwnedVideoStream;
        }
        set stream(value: OwnedVideoStream) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stream() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stream?: ReturnType<typeof OwnedVideoStream.prototype.toObject>;
        }): NewVideoStreamResponse {
            const message = new NewVideoStreamResponse({});
            if (data.stream != null) {
                message.stream = OwnedVideoStream.fromObject(data.stream);
            }
            return message;
        }
        toObject() {
            const data: {
                stream?: ReturnType<typeof OwnedVideoStream.prototype.toObject>;
            } = {};
            if (this.stream != null) {
                data.stream = this.stream.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stream)
                writer.writeMessage(1, this.stream, () => this.stream.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewVideoStreamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewVideoStreamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stream, () => message.stream = OwnedVideoStream.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewVideoStreamResponse {
            return NewVideoStreamResponse.deserialize(bytes);
        }
    }
    export class NewVideoSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: VideoSourceType;
            resolution?: VideoSourceResolution;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("resolution" in data && data.resolution != undefined) {
                    this.resolution = data.resolution;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoSourceType.VIDEO_SOURCE_NATIVE) as VideoSourceType;
        }
        set type(value: VideoSourceType) {
            pb_1.Message.setField(this, 1, value);
        }
        get resolution() {
            return pb_1.Message.getWrapperField(this, VideoSourceResolution, 2) as VideoSourceResolution;
        }
        set resolution(value: VideoSourceResolution) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_resolution() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            type?: VideoSourceType;
            resolution?: ReturnType<typeof VideoSourceResolution.prototype.toObject>;
        }): NewVideoSourceRequest {
            const message = new NewVideoSourceRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.resolution != null) {
                message.resolution = VideoSourceResolution.fromObject(data.resolution);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: VideoSourceType;
                resolution?: ReturnType<typeof VideoSourceResolution.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.resolution != null) {
                data.resolution = this.resolution.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != VideoSourceType.VIDEO_SOURCE_NATIVE)
                writer.writeEnum(1, this.type);
            if (this.has_resolution)
                writer.writeMessage(2, this.resolution, () => this.resolution.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewVideoSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewVideoSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.resolution, () => message.resolution = VideoSourceResolution.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewVideoSourceRequest {
            return NewVideoSourceRequest.deserialize(bytes);
        }
    }
    export class NewVideoSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: OwnedVideoSource;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
            }
        }
        get source() {
            return pb_1.Message.getWrapperField(this, OwnedVideoSource, 1) as OwnedVideoSource;
        }
        set source(value: OwnedVideoSource) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_source() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            source?: ReturnType<typeof OwnedVideoSource.prototype.toObject>;
        }): NewVideoSourceResponse {
            const message = new NewVideoSourceResponse({});
            if (data.source != null) {
                message.source = OwnedVideoSource.fromObject(data.source);
            }
            return message;
        }
        toObject() {
            const data: {
                source?: ReturnType<typeof OwnedVideoSource.prototype.toObject>;
            } = {};
            if (this.source != null) {
                data.source = this.source.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_source)
                writer.writeMessage(1, this.source, () => this.source.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewVideoSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewVideoSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.source, () => message.source = OwnedVideoSource.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewVideoSourceResponse {
            return NewVideoSourceResponse.deserialize(bytes);
        }
    }
    export class CaptureVideoFrameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_handle?: number;
            frame?: VideoFrameInfo;
            buffer_handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_handle" in data && data.source_handle != undefined) {
                    this.source_handle = data.source_handle;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
                if ("buffer_handle" in data && data.buffer_handle != undefined) {
                    this.buffer_handle = data.buffer_handle;
                }
            }
        }
        get source_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set source_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame() {
            return pb_1.Message.getWrapperField(this, VideoFrameInfo, 2) as VideoFrameInfo;
        }
        set frame(value: VideoFrameInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get buffer_handle() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set buffer_handle(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            source_handle?: number;
            frame?: ReturnType<typeof VideoFrameInfo.prototype.toObject>;
            buffer_handle?: number;
        }): CaptureVideoFrameRequest {
            const message = new CaptureVideoFrameRequest({});
            if (data.source_handle != null) {
                message.source_handle = data.source_handle;
            }
            if (data.frame != null) {
                message.frame = VideoFrameInfo.fromObject(data.frame);
            }
            if (data.buffer_handle != null) {
                message.buffer_handle = data.buffer_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                source_handle?: number;
                frame?: ReturnType<typeof VideoFrameInfo.prototype.toObject>;
                buffer_handle?: number;
            } = {};
            if (this.source_handle != null) {
                data.source_handle = this.source_handle;
            }
            if (this.frame != null) {
                data.frame = this.frame.toObject();
            }
            if (this.buffer_handle != null) {
                data.buffer_handle = this.buffer_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_handle != 0)
                writer.writeUint64(1, this.source_handle);
            if (this.has_frame)
                writer.writeMessage(2, this.frame, () => this.frame.serialize(writer));
            if (this.buffer_handle != 0)
                writer.writeUint64(3, this.buffer_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptureVideoFrameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptureVideoFrameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.frame, () => message.frame = VideoFrameInfo.deserialize(reader));
                        break;
                    case 3:
                        message.buffer_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptureVideoFrameRequest {
            return CaptureVideoFrameRequest.deserialize(bytes);
        }
    }
    export class CaptureVideoFrameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CaptureVideoFrameResponse {
            const message = new CaptureVideoFrameResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptureVideoFrameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptureVideoFrameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptureVideoFrameResponse {
            return CaptureVideoFrameResponse.deserialize(bytes);
        }
    }
    export class ToI420Request extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            flip_y?: boolean;
        } & (({
            argb?: ArgbBufferInfo;
            yuv_handle?: never;
        } | {
            argb?: never;
            yuv_handle?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("flip_y" in data && data.flip_y != undefined) {
                    this.flip_y = data.flip_y;
                }
                if ("argb" in data && data.argb != undefined) {
                    this.argb = data.argb;
                }
                if ("yuv_handle" in data && data.yuv_handle != undefined) {
                    this.yuv_handle = data.yuv_handle;
                }
            }
        }
        get flip_y() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set flip_y(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get argb() {
            return pb_1.Message.getWrapperField(this, ArgbBufferInfo, 2) as ArgbBufferInfo;
        }
        set argb(value: ArgbBufferInfo) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_argb() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get yuv_handle() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set yuv_handle(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_yuv_handle() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get from() {
            const cases: {
                [index: number]: "none" | "argb" | "yuv_handle";
            } = {
                0: "none",
                2: "argb",
                3: "yuv_handle"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            flip_y?: boolean;
            argb?: ReturnType<typeof ArgbBufferInfo.prototype.toObject>;
            yuv_handle?: number;
        }): ToI420Request {
            const message = new ToI420Request({});
            if (data.flip_y != null) {
                message.flip_y = data.flip_y;
            }
            if (data.argb != null) {
                message.argb = ArgbBufferInfo.fromObject(data.argb);
            }
            if (data.yuv_handle != null) {
                message.yuv_handle = data.yuv_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                flip_y?: boolean;
                argb?: ReturnType<typeof ArgbBufferInfo.prototype.toObject>;
                yuv_handle?: number;
            } = {};
            if (this.flip_y != null) {
                data.flip_y = this.flip_y;
            }
            if (this.argb != null) {
                data.argb = this.argb.toObject();
            }
            if (this.yuv_handle != null) {
                data.yuv_handle = this.yuv_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.flip_y != false)
                writer.writeBool(1, this.flip_y);
            if (this.has_argb)
                writer.writeMessage(2, this.argb, () => this.argb.serialize(writer));
            if (this.has_yuv_handle)
                writer.writeUint64(3, this.yuv_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToI420Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToI420Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.flip_y = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.argb, () => message.argb = ArgbBufferInfo.deserialize(reader));
                        break;
                    case 3:
                        message.yuv_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToI420Request {
            return ToI420Request.deserialize(bytes);
        }
    }
    export class ToI420Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buffer?: OwnedVideoFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, OwnedVideoFrameBuffer, 1) as OwnedVideoFrameBuffer;
        }
        set buffer(value: OwnedVideoFrameBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
        }): ToI420Response {
            const message = new ToI420Response({});
            if (data.buffer != null) {
                message.buffer = OwnedVideoFrameBuffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
            } = {};
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_buffer)
                writer.writeMessage(1, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToI420Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToI420Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.buffer, () => message.buffer = OwnedVideoFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToI420Response {
            return ToI420Response.deserialize(bytes);
        }
    }
    export class ToArgbRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            buffer_handle?: number;
            dst_ptr?: number;
            dst_format?: VideoFormatType;
            dst_stride?: number;
            dst_width?: number;
            dst_height?: number;
            flip_y?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer_handle" in data && data.buffer_handle != undefined) {
                    this.buffer_handle = data.buffer_handle;
                }
                if ("dst_ptr" in data && data.dst_ptr != undefined) {
                    this.dst_ptr = data.dst_ptr;
                }
                if ("dst_format" in data && data.dst_format != undefined) {
                    this.dst_format = data.dst_format;
                }
                if ("dst_stride" in data && data.dst_stride != undefined) {
                    this.dst_stride = data.dst_stride;
                }
                if ("dst_width" in data && data.dst_width != undefined) {
                    this.dst_width = data.dst_width;
                }
                if ("dst_height" in data && data.dst_height != undefined) {
                    this.dst_height = data.dst_height;
                }
                if ("flip_y" in data && data.flip_y != undefined) {
                    this.flip_y = data.flip_y;
                }
            }
        }
        get buffer_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set buffer_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get dst_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set dst_ptr(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get dst_format() {
            return pb_1.Message.getFieldWithDefault(this, 3, VideoFormatType.FORMAT_ARGB) as VideoFormatType;
        }
        set dst_format(value: VideoFormatType) {
            pb_1.Message.setField(this, 3, value);
        }
        get dst_stride() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set dst_stride(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get dst_width() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set dst_width(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get dst_height() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set dst_height(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get flip_y() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set flip_y(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            buffer_handle?: number;
            dst_ptr?: number;
            dst_format?: VideoFormatType;
            dst_stride?: number;
            dst_width?: number;
            dst_height?: number;
            flip_y?: boolean;
        }): ToArgbRequest {
            const message = new ToArgbRequest({});
            if (data.buffer_handle != null) {
                message.buffer_handle = data.buffer_handle;
            }
            if (data.dst_ptr != null) {
                message.dst_ptr = data.dst_ptr;
            }
            if (data.dst_format != null) {
                message.dst_format = data.dst_format;
            }
            if (data.dst_stride != null) {
                message.dst_stride = data.dst_stride;
            }
            if (data.dst_width != null) {
                message.dst_width = data.dst_width;
            }
            if (data.dst_height != null) {
                message.dst_height = data.dst_height;
            }
            if (data.flip_y != null) {
                message.flip_y = data.flip_y;
            }
            return message;
        }
        toObject() {
            const data: {
                buffer_handle?: number;
                dst_ptr?: number;
                dst_format?: VideoFormatType;
                dst_stride?: number;
                dst_width?: number;
                dst_height?: number;
                flip_y?: boolean;
            } = {};
            if (this.buffer_handle != null) {
                data.buffer_handle = this.buffer_handle;
            }
            if (this.dst_ptr != null) {
                data.dst_ptr = this.dst_ptr;
            }
            if (this.dst_format != null) {
                data.dst_format = this.dst_format;
            }
            if (this.dst_stride != null) {
                data.dst_stride = this.dst_stride;
            }
            if (this.dst_width != null) {
                data.dst_width = this.dst_width;
            }
            if (this.dst_height != null) {
                data.dst_height = this.dst_height;
            }
            if (this.flip_y != null) {
                data.flip_y = this.flip_y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.buffer_handle != 0)
                writer.writeUint64(1, this.buffer_handle);
            if (this.dst_ptr != 0)
                writer.writeUint64(2, this.dst_ptr);
            if (this.dst_format != VideoFormatType.FORMAT_ARGB)
                writer.writeEnum(3, this.dst_format);
            if (this.dst_stride != 0)
                writer.writeUint32(4, this.dst_stride);
            if (this.dst_width != 0)
                writer.writeUint32(5, this.dst_width);
            if (this.dst_height != 0)
                writer.writeUint32(6, this.dst_height);
            if (this.flip_y != false)
                writer.writeBool(7, this.flip_y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToArgbRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToArgbRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.buffer_handle = reader.readUint64();
                        break;
                    case 2:
                        message.dst_ptr = reader.readUint64();
                        break;
                    case 3:
                        message.dst_format = reader.readEnum();
                        break;
                    case 4:
                        message.dst_stride = reader.readUint32();
                        break;
                    case 5:
                        message.dst_width = reader.readUint32();
                        break;
                    case 6:
                        message.dst_height = reader.readUint32();
                        break;
                    case 7:
                        message.flip_y = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToArgbRequest {
            return ToArgbRequest.deserialize(bytes);
        }
    }
    export class ToArgbResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ToArgbResponse {
            const message = new ToArgbResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToArgbResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToArgbResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToArgbResponse {
            return ToArgbResponse.deserialize(bytes);
        }
    }
    export class VideoResolution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            width?: number;
            height?: number;
            frame_rate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("frame_rate" in data && data.frame_rate != undefined) {
                    this.frame_rate = data.frame_rate;
                }
            }
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get frame_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set frame_rate(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            width?: number;
            height?: number;
            frame_rate?: number;
        }): VideoResolution {
            const message = new VideoResolution({});
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.frame_rate != null) {
                message.frame_rate = data.frame_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                width?: number;
                height?: number;
                frame_rate?: number;
            } = {};
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.frame_rate != null) {
                data.frame_rate = this.frame_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.width != 0)
                writer.writeUint32(1, this.width);
            if (this.height != 0)
                writer.writeUint32(2, this.height);
            if (this.frame_rate != 0)
                writer.writeDouble(3, this.frame_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoResolution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoResolution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.width = reader.readUint32();
                        break;
                    case 2:
                        message.height = reader.readUint32();
                        break;
                    case 3:
                        message.frame_rate = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoResolution {
            return VideoResolution.deserialize(bytes);
        }
    }
    export class ArgbBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ptr?: number;
            format?: VideoFormatType;
            stride?: number;
            width?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ptr" in data && data.ptr != undefined) {
                    this.ptr = data.ptr;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("stride" in data && data.stride != undefined) {
                    this.stride = data.stride;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get ptr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ptr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, VideoFormatType.FORMAT_ARGB) as VideoFormatType;
        }
        set format(value: VideoFormatType) {
            pb_1.Message.setField(this, 2, value);
        }
        get stride() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set stride(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ptr?: number;
            format?: VideoFormatType;
            stride?: number;
            width?: number;
            height?: number;
        }): ArgbBufferInfo {
            const message = new ArgbBufferInfo({});
            if (data.ptr != null) {
                message.ptr = data.ptr;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.stride != null) {
                message.stride = data.stride;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                ptr?: number;
                format?: VideoFormatType;
                stride?: number;
                width?: number;
                height?: number;
            } = {};
            if (this.ptr != null) {
                data.ptr = this.ptr;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.stride != null) {
                data.stride = this.stride;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ptr != 0)
                writer.writeUint64(1, this.ptr);
            if (this.format != VideoFormatType.FORMAT_ARGB)
                writer.writeEnum(2, this.format);
            if (this.stride != 0)
                writer.writeUint32(3, this.stride);
            if (this.width != 0)
                writer.writeUint32(4, this.width);
            if (this.height != 0)
                writer.writeUint32(5, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArgbBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArgbBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ptr = reader.readUint64();
                        break;
                    case 2:
                        message.format = reader.readEnum();
                        break;
                    case 3:
                        message.stride = reader.readUint32();
                        break;
                    case 4:
                        message.width = reader.readUint32();
                        break;
                    case 5:
                        message.height = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArgbBufferInfo {
            return ArgbBufferInfo.deserialize(bytes);
        }
    }
    export class VideoFrameInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp_us?: number;
            rotation?: VideoRotation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp_us" in data && data.timestamp_us != undefined) {
                    this.timestamp_us = data.timestamp_us;
                }
                if ("rotation" in data && data.rotation != undefined) {
                    this.rotation = data.rotation;
                }
            }
        }
        get timestamp_us() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp_us(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rotation() {
            return pb_1.Message.getFieldWithDefault(this, 2, VideoRotation.VIDEO_ROTATION_0) as VideoRotation;
        }
        set rotation(value: VideoRotation) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            timestamp_us?: number;
            rotation?: VideoRotation;
        }): VideoFrameInfo {
            const message = new VideoFrameInfo({});
            if (data.timestamp_us != null) {
                message.timestamp_us = data.timestamp_us;
            }
            if (data.rotation != null) {
                message.rotation = data.rotation;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp_us?: number;
                rotation?: VideoRotation;
            } = {};
            if (this.timestamp_us != null) {
                data.timestamp_us = this.timestamp_us;
            }
            if (this.rotation != null) {
                data.rotation = this.rotation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp_us != 0)
                writer.writeInt64(1, this.timestamp_us);
            if (this.rotation != VideoRotation.VIDEO_ROTATION_0)
                writer.writeEnum(2, this.rotation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoFrameInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoFrameInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp_us = reader.readInt64();
                        break;
                    case 2:
                        message.rotation = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoFrameInfo {
            return VideoFrameInfo.deserialize(bytes);
        }
    }
    export class VideoFrameBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6]];
        constructor(data?: any[] | ({
            buffer_type?: VideoFrameBufferType;
            width?: number;
            height?: number;
        } & (({
            yuv?: PlanarYuvBufferInfo;
            bi_yuv?: never;
            native?: never;
        } | {
            yuv?: never;
            bi_yuv?: BiplanarYuvBufferInfo;
            native?: never;
        } | {
            yuv?: never;
            bi_yuv?: never;
            native?: NativeBufferInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("buffer_type" in data && data.buffer_type != undefined) {
                    this.buffer_type = data.buffer_type;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("yuv" in data && data.yuv != undefined) {
                    this.yuv = data.yuv;
                }
                if ("bi_yuv" in data && data.bi_yuv != undefined) {
                    this.bi_yuv = data.bi_yuv;
                }
                if ("native" in data && data.native != undefined) {
                    this.native = data.native;
                }
            }
        }
        get buffer_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoFrameBufferType.NATIVE) as VideoFrameBufferType;
        }
        set buffer_type(value: VideoFrameBufferType) {
            pb_1.Message.setField(this, 1, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get yuv() {
            return pb_1.Message.getWrapperField(this, PlanarYuvBufferInfo, 4) as PlanarYuvBufferInfo;
        }
        set yuv(value: PlanarYuvBufferInfo) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_yuv() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bi_yuv() {
            return pb_1.Message.getWrapperField(this, BiplanarYuvBufferInfo, 5) as BiplanarYuvBufferInfo;
        }
        set bi_yuv(value: BiplanarYuvBufferInfo) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_bi_yuv() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get native() {
            return pb_1.Message.getWrapperField(this, NativeBufferInfo, 6) as NativeBufferInfo;
        }
        set native(value: NativeBufferInfo) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_native() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get buffer() {
            const cases: {
                [index: number]: "none" | "yuv" | "bi_yuv" | "native";
            } = {
                0: "none",
                4: "yuv",
                5: "bi_yuv",
                6: "native"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6])];
        }
        static fromObject(data: {
            buffer_type?: VideoFrameBufferType;
            width?: number;
            height?: number;
            yuv?: ReturnType<typeof PlanarYuvBufferInfo.prototype.toObject>;
            bi_yuv?: ReturnType<typeof BiplanarYuvBufferInfo.prototype.toObject>;
            native?: ReturnType<typeof NativeBufferInfo.prototype.toObject>;
        }): VideoFrameBufferInfo {
            const message = new VideoFrameBufferInfo({});
            if (data.buffer_type != null) {
                message.buffer_type = data.buffer_type;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.yuv != null) {
                message.yuv = PlanarYuvBufferInfo.fromObject(data.yuv);
            }
            if (data.bi_yuv != null) {
                message.bi_yuv = BiplanarYuvBufferInfo.fromObject(data.bi_yuv);
            }
            if (data.native != null) {
                message.native = NativeBufferInfo.fromObject(data.native);
            }
            return message;
        }
        toObject() {
            const data: {
                buffer_type?: VideoFrameBufferType;
                width?: number;
                height?: number;
                yuv?: ReturnType<typeof PlanarYuvBufferInfo.prototype.toObject>;
                bi_yuv?: ReturnType<typeof BiplanarYuvBufferInfo.prototype.toObject>;
                native?: ReturnType<typeof NativeBufferInfo.prototype.toObject>;
            } = {};
            if (this.buffer_type != null) {
                data.buffer_type = this.buffer_type;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.yuv != null) {
                data.yuv = this.yuv.toObject();
            }
            if (this.bi_yuv != null) {
                data.bi_yuv = this.bi_yuv.toObject();
            }
            if (this.native != null) {
                data.native = this.native.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.buffer_type != VideoFrameBufferType.NATIVE)
                writer.writeEnum(1, this.buffer_type);
            if (this.width != 0)
                writer.writeUint32(2, this.width);
            if (this.height != 0)
                writer.writeUint32(3, this.height);
            if (this.has_yuv)
                writer.writeMessage(4, this.yuv, () => this.yuv.serialize(writer));
            if (this.has_bi_yuv)
                writer.writeMessage(5, this.bi_yuv, () => this.bi_yuv.serialize(writer));
            if (this.has_native)
                writer.writeMessage(6, this.native, () => this.native.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoFrameBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoFrameBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.buffer_type = reader.readEnum();
                        break;
                    case 2:
                        message.width = reader.readUint32();
                        break;
                    case 3:
                        message.height = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.yuv, () => message.yuv = PlanarYuvBufferInfo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.bi_yuv, () => message.bi_yuv = BiplanarYuvBufferInfo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.native, () => message.native = NativeBufferInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoFrameBufferInfo {
            return VideoFrameBufferInfo.deserialize(bytes);
        }
    }
    export class OwnedVideoFrameBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: VideoFrameBufferInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, VideoFrameBufferInfo, 2) as VideoFrameBufferInfo;
        }
        set info(value: VideoFrameBufferInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof VideoFrameBufferInfo.prototype.toObject>;
        }): OwnedVideoFrameBuffer {
            const message = new OwnedVideoFrameBuffer({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = VideoFrameBufferInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof VideoFrameBufferInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedVideoFrameBuffer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedVideoFrameBuffer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = VideoFrameBufferInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedVideoFrameBuffer {
            return OwnedVideoFrameBuffer.deserialize(bytes);
        }
    }
    export class PlanarYuvBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chroma_width?: number;
            chroma_height?: number;
            stride_y?: number;
            stride_u?: number;
            stride_v?: number;
            stride_a?: number;
            data_y_ptr?: number;
            data_u_ptr?: number;
            data_v_ptr?: number;
            data_a_ptr?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chroma_width" in data && data.chroma_width != undefined) {
                    this.chroma_width = data.chroma_width;
                }
                if ("chroma_height" in data && data.chroma_height != undefined) {
                    this.chroma_height = data.chroma_height;
                }
                if ("stride_y" in data && data.stride_y != undefined) {
                    this.stride_y = data.stride_y;
                }
                if ("stride_u" in data && data.stride_u != undefined) {
                    this.stride_u = data.stride_u;
                }
                if ("stride_v" in data && data.stride_v != undefined) {
                    this.stride_v = data.stride_v;
                }
                if ("stride_a" in data && data.stride_a != undefined) {
                    this.stride_a = data.stride_a;
                }
                if ("data_y_ptr" in data && data.data_y_ptr != undefined) {
                    this.data_y_ptr = data.data_y_ptr;
                }
                if ("data_u_ptr" in data && data.data_u_ptr != undefined) {
                    this.data_u_ptr = data.data_u_ptr;
                }
                if ("data_v_ptr" in data && data.data_v_ptr != undefined) {
                    this.data_v_ptr = data.data_v_ptr;
                }
                if ("data_a_ptr" in data && data.data_a_ptr != undefined) {
                    this.data_a_ptr = data.data_a_ptr;
                }
            }
        }
        get chroma_width() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chroma_width(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get chroma_height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chroma_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get stride_y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set stride_y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get stride_u() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set stride_u(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get stride_v() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set stride_v(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get stride_a() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set stride_a(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get data_y_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set data_y_ptr(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get data_u_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set data_u_ptr(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get data_v_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set data_v_ptr(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get data_a_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set data_a_ptr(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            chroma_width?: number;
            chroma_height?: number;
            stride_y?: number;
            stride_u?: number;
            stride_v?: number;
            stride_a?: number;
            data_y_ptr?: number;
            data_u_ptr?: number;
            data_v_ptr?: number;
            data_a_ptr?: number;
        }): PlanarYuvBufferInfo {
            const message = new PlanarYuvBufferInfo({});
            if (data.chroma_width != null) {
                message.chroma_width = data.chroma_width;
            }
            if (data.chroma_height != null) {
                message.chroma_height = data.chroma_height;
            }
            if (data.stride_y != null) {
                message.stride_y = data.stride_y;
            }
            if (data.stride_u != null) {
                message.stride_u = data.stride_u;
            }
            if (data.stride_v != null) {
                message.stride_v = data.stride_v;
            }
            if (data.stride_a != null) {
                message.stride_a = data.stride_a;
            }
            if (data.data_y_ptr != null) {
                message.data_y_ptr = data.data_y_ptr;
            }
            if (data.data_u_ptr != null) {
                message.data_u_ptr = data.data_u_ptr;
            }
            if (data.data_v_ptr != null) {
                message.data_v_ptr = data.data_v_ptr;
            }
            if (data.data_a_ptr != null) {
                message.data_a_ptr = data.data_a_ptr;
            }
            return message;
        }
        toObject() {
            const data: {
                chroma_width?: number;
                chroma_height?: number;
                stride_y?: number;
                stride_u?: number;
                stride_v?: number;
                stride_a?: number;
                data_y_ptr?: number;
                data_u_ptr?: number;
                data_v_ptr?: number;
                data_a_ptr?: number;
            } = {};
            if (this.chroma_width != null) {
                data.chroma_width = this.chroma_width;
            }
            if (this.chroma_height != null) {
                data.chroma_height = this.chroma_height;
            }
            if (this.stride_y != null) {
                data.stride_y = this.stride_y;
            }
            if (this.stride_u != null) {
                data.stride_u = this.stride_u;
            }
            if (this.stride_v != null) {
                data.stride_v = this.stride_v;
            }
            if (this.stride_a != null) {
                data.stride_a = this.stride_a;
            }
            if (this.data_y_ptr != null) {
                data.data_y_ptr = this.data_y_ptr;
            }
            if (this.data_u_ptr != null) {
                data.data_u_ptr = this.data_u_ptr;
            }
            if (this.data_v_ptr != null) {
                data.data_v_ptr = this.data_v_ptr;
            }
            if (this.data_a_ptr != null) {
                data.data_a_ptr = this.data_a_ptr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chroma_width != 0)
                writer.writeUint32(1, this.chroma_width);
            if (this.chroma_height != 0)
                writer.writeUint32(2, this.chroma_height);
            if (this.stride_y != 0)
                writer.writeUint32(3, this.stride_y);
            if (this.stride_u != 0)
                writer.writeUint32(4, this.stride_u);
            if (this.stride_v != 0)
                writer.writeUint32(5, this.stride_v);
            if (this.stride_a != 0)
                writer.writeUint32(6, this.stride_a);
            if (this.data_y_ptr != 0)
                writer.writeUint64(7, this.data_y_ptr);
            if (this.data_u_ptr != 0)
                writer.writeUint64(8, this.data_u_ptr);
            if (this.data_v_ptr != 0)
                writer.writeUint64(9, this.data_v_ptr);
            if (this.data_a_ptr != 0)
                writer.writeUint64(10, this.data_a_ptr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlanarYuvBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlanarYuvBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chroma_width = reader.readUint32();
                        break;
                    case 2:
                        message.chroma_height = reader.readUint32();
                        break;
                    case 3:
                        message.stride_y = reader.readUint32();
                        break;
                    case 4:
                        message.stride_u = reader.readUint32();
                        break;
                    case 5:
                        message.stride_v = reader.readUint32();
                        break;
                    case 6:
                        message.stride_a = reader.readUint32();
                        break;
                    case 7:
                        message.data_y_ptr = reader.readUint64();
                        break;
                    case 8:
                        message.data_u_ptr = reader.readUint64();
                        break;
                    case 9:
                        message.data_v_ptr = reader.readUint64();
                        break;
                    case 10:
                        message.data_a_ptr = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlanarYuvBufferInfo {
            return PlanarYuvBufferInfo.deserialize(bytes);
        }
    }
    export class BiplanarYuvBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chroma_width?: number;
            chroma_height?: number;
            stride_y?: number;
            stride_uv?: number;
            data_y_ptr?: number;
            data_uv_ptr?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chroma_width" in data && data.chroma_width != undefined) {
                    this.chroma_width = data.chroma_width;
                }
                if ("chroma_height" in data && data.chroma_height != undefined) {
                    this.chroma_height = data.chroma_height;
                }
                if ("stride_y" in data && data.stride_y != undefined) {
                    this.stride_y = data.stride_y;
                }
                if ("stride_uv" in data && data.stride_uv != undefined) {
                    this.stride_uv = data.stride_uv;
                }
                if ("data_y_ptr" in data && data.data_y_ptr != undefined) {
                    this.data_y_ptr = data.data_y_ptr;
                }
                if ("data_uv_ptr" in data && data.data_uv_ptr != undefined) {
                    this.data_uv_ptr = data.data_uv_ptr;
                }
            }
        }
        get chroma_width() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chroma_width(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get chroma_height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chroma_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get stride_y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set stride_y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get stride_uv() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set stride_uv(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_y_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set data_y_ptr(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get data_uv_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set data_uv_ptr(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            chroma_width?: number;
            chroma_height?: number;
            stride_y?: number;
            stride_uv?: number;
            data_y_ptr?: number;
            data_uv_ptr?: number;
        }): BiplanarYuvBufferInfo {
            const message = new BiplanarYuvBufferInfo({});
            if (data.chroma_width != null) {
                message.chroma_width = data.chroma_width;
            }
            if (data.chroma_height != null) {
                message.chroma_height = data.chroma_height;
            }
            if (data.stride_y != null) {
                message.stride_y = data.stride_y;
            }
            if (data.stride_uv != null) {
                message.stride_uv = data.stride_uv;
            }
            if (data.data_y_ptr != null) {
                message.data_y_ptr = data.data_y_ptr;
            }
            if (data.data_uv_ptr != null) {
                message.data_uv_ptr = data.data_uv_ptr;
            }
            return message;
        }
        toObject() {
            const data: {
                chroma_width?: number;
                chroma_height?: number;
                stride_y?: number;
                stride_uv?: number;
                data_y_ptr?: number;
                data_uv_ptr?: number;
            } = {};
            if (this.chroma_width != null) {
                data.chroma_width = this.chroma_width;
            }
            if (this.chroma_height != null) {
                data.chroma_height = this.chroma_height;
            }
            if (this.stride_y != null) {
                data.stride_y = this.stride_y;
            }
            if (this.stride_uv != null) {
                data.stride_uv = this.stride_uv;
            }
            if (this.data_y_ptr != null) {
                data.data_y_ptr = this.data_y_ptr;
            }
            if (this.data_uv_ptr != null) {
                data.data_uv_ptr = this.data_uv_ptr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chroma_width != 0)
                writer.writeUint32(1, this.chroma_width);
            if (this.chroma_height != 0)
                writer.writeUint32(2, this.chroma_height);
            if (this.stride_y != 0)
                writer.writeUint32(3, this.stride_y);
            if (this.stride_uv != 0)
                writer.writeUint32(4, this.stride_uv);
            if (this.data_y_ptr != 0)
                writer.writeUint64(5, this.data_y_ptr);
            if (this.data_uv_ptr != 0)
                writer.writeUint64(6, this.data_uv_ptr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BiplanarYuvBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BiplanarYuvBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chroma_width = reader.readUint32();
                        break;
                    case 2:
                        message.chroma_height = reader.readUint32();
                        break;
                    case 3:
                        message.stride_y = reader.readUint32();
                        break;
                    case 4:
                        message.stride_uv = reader.readUint32();
                        break;
                    case 5:
                        message.data_y_ptr = reader.readUint64();
                        break;
                    case 6:
                        message.data_uv_ptr = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BiplanarYuvBufferInfo {
            return BiplanarYuvBufferInfo.deserialize(bytes);
        }
    }
    export class NativeBufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): NativeBufferInfo {
            const message = new NativeBufferInfo({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NativeBufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NativeBufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NativeBufferInfo {
            return NativeBufferInfo.deserialize(bytes);
        }
    }
    export class VideoStreamInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: VideoStreamType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoStreamType.VIDEO_STREAM_NATIVE) as VideoStreamType;
        }
        set type(value: VideoStreamType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            type?: VideoStreamType;
        }): VideoStreamInfo {
            const message = new VideoStreamInfo({});
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: VideoStreamType;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != VideoStreamType.VIDEO_STREAM_NATIVE)
                writer.writeEnum(1, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoStreamInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoStreamInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoStreamInfo {
            return VideoStreamInfo.deserialize(bytes);
        }
    }
    export class OwnedVideoStream extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: VideoStreamInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, VideoStreamInfo, 2) as VideoStreamInfo;
        }
        set info(value: VideoStreamInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof VideoStreamInfo.prototype.toObject>;
        }): OwnedVideoStream {
            const message = new OwnedVideoStream({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = VideoStreamInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof VideoStreamInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedVideoStream {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedVideoStream();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = VideoStreamInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedVideoStream {
            return OwnedVideoStream.deserialize(bytes);
        }
    }
    export class VideoStreamEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            stream_handle?: number;
        } & (({
            frame_received?: VideoFrameReceived;
            eos?: never;
        } | {
            frame_received?: never;
            eos?: VideoStreamEOS;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream_handle" in data && data.stream_handle != undefined) {
                    this.stream_handle = data.stream_handle;
                }
                if ("frame_received" in data && data.frame_received != undefined) {
                    this.frame_received = data.frame_received;
                }
                if ("eos" in data && data.eos != undefined) {
                    this.eos = data.eos;
                }
            }
        }
        get stream_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set stream_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame_received() {
            return pb_1.Message.getWrapperField(this, VideoFrameReceived, 2) as VideoFrameReceived;
        }
        set frame_received(value: VideoFrameReceived) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_frame_received() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get eos() {
            return pb_1.Message.getWrapperField(this, VideoStreamEOS, 3) as VideoStreamEOS;
        }
        set eos(value: VideoStreamEOS) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_eos() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "frame_received" | "eos";
            } = {
                0: "none",
                2: "frame_received",
                3: "eos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            stream_handle?: number;
            frame_received?: ReturnType<typeof VideoFrameReceived.prototype.toObject>;
            eos?: ReturnType<typeof VideoStreamEOS.prototype.toObject>;
        }): VideoStreamEvent {
            const message = new VideoStreamEvent({});
            if (data.stream_handle != null) {
                message.stream_handle = data.stream_handle;
            }
            if (data.frame_received != null) {
                message.frame_received = VideoFrameReceived.fromObject(data.frame_received);
            }
            if (data.eos != null) {
                message.eos = VideoStreamEOS.fromObject(data.eos);
            }
            return message;
        }
        toObject() {
            const data: {
                stream_handle?: number;
                frame_received?: ReturnType<typeof VideoFrameReceived.prototype.toObject>;
                eos?: ReturnType<typeof VideoStreamEOS.prototype.toObject>;
            } = {};
            if (this.stream_handle != null) {
                data.stream_handle = this.stream_handle;
            }
            if (this.frame_received != null) {
                data.frame_received = this.frame_received.toObject();
            }
            if (this.eos != null) {
                data.eos = this.eos.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stream_handle != 0)
                writer.writeUint64(1, this.stream_handle);
            if (this.has_frame_received)
                writer.writeMessage(2, this.frame_received, () => this.frame_received.serialize(writer));
            if (this.has_eos)
                writer.writeMessage(3, this.eos, () => this.eos.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoStreamEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoStreamEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stream_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.frame_received, () => message.frame_received = VideoFrameReceived.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.eos, () => message.eos = VideoStreamEOS.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoStreamEvent {
            return VideoStreamEvent.deserialize(bytes);
        }
    }
    export class VideoFrameReceived extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            frame?: VideoFrameInfo;
            buffer?: OwnedVideoFrameBuffer;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
                if ("buffer" in data && data.buffer != undefined) {
                    this.buffer = data.buffer;
                }
            }
        }
        get frame() {
            return pb_1.Message.getWrapperField(this, VideoFrameInfo, 1) as VideoFrameInfo;
        }
        set frame(value: VideoFrameInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get buffer() {
            return pb_1.Message.getWrapperField(this, OwnedVideoFrameBuffer, 2) as OwnedVideoFrameBuffer;
        }
        set buffer(value: OwnedVideoFrameBuffer) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_buffer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            frame?: ReturnType<typeof VideoFrameInfo.prototype.toObject>;
            buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
        }): VideoFrameReceived {
            const message = new VideoFrameReceived({});
            if (data.frame != null) {
                message.frame = VideoFrameInfo.fromObject(data.frame);
            }
            if (data.buffer != null) {
                message.buffer = OwnedVideoFrameBuffer.fromObject(data.buffer);
            }
            return message;
        }
        toObject() {
            const data: {
                frame?: ReturnType<typeof VideoFrameInfo.prototype.toObject>;
                buffer?: ReturnType<typeof OwnedVideoFrameBuffer.prototype.toObject>;
            } = {};
            if (this.frame != null) {
                data.frame = this.frame.toObject();
            }
            if (this.buffer != null) {
                data.buffer = this.buffer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_frame)
                writer.writeMessage(1, this.frame, () => this.frame.serialize(writer));
            if (this.has_buffer)
                writer.writeMessage(2, this.buffer, () => this.buffer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoFrameReceived {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoFrameReceived();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.frame, () => message.frame = VideoFrameInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.buffer, () => message.buffer = OwnedVideoFrameBuffer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoFrameReceived {
            return VideoFrameReceived.deserialize(bytes);
        }
    }
    export class VideoStreamEOS extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): VideoStreamEOS {
            const message = new VideoStreamEOS({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoStreamEOS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoStreamEOS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoStreamEOS {
            return VideoStreamEOS.deserialize(bytes);
        }
    }
    export class VideoSourceResolution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            width?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            width?: number;
            height?: number;
        }): VideoSourceResolution {
            const message = new VideoSourceResolution({});
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                width?: number;
                height?: number;
            } = {};
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.width != 0)
                writer.writeUint32(1, this.width);
            if (this.height != 0)
                writer.writeUint32(2, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoSourceResolution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoSourceResolution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.width = reader.readUint32();
                        break;
                    case 2:
                        message.height = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoSourceResolution {
            return VideoSourceResolution.deserialize(bytes);
        }
    }
    export class VideoSourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: VideoSourceType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoSourceType.VIDEO_SOURCE_NATIVE) as VideoSourceType;
        }
        set type(value: VideoSourceType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            type?: VideoSourceType;
        }): VideoSourceInfo {
            const message = new VideoSourceInfo({});
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: VideoSourceType;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != VideoSourceType.VIDEO_SOURCE_NATIVE)
                writer.writeEnum(1, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoSourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoSourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoSourceInfo {
            return VideoSourceInfo.deserialize(bytes);
        }
    }
    export class OwnedVideoSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_1.livekit.proto.FfiOwnedHandle;
            info?: VideoSourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.FfiOwnedHandle, 1) as dependency_1.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_1.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, VideoSourceInfo, 2) as VideoSourceInfo;
        }
        set info(value: VideoSourceInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof VideoSourceInfo.prototype.toObject>;
        }): OwnedVideoSource {
            const message = new OwnedVideoSource({});
            if (data.handle != null) {
                message.handle = dependency_1.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = VideoSourceInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_1.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof VideoSourceInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedVideoSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedVideoSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_1.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = VideoSourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedVideoSource {
            return OwnedVideoSource.deserialize(bytes);
        }
    }
}
