/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: track.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./e2ee";
import * as dependency_2 from "./handle";
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export enum TrackKind {
        KIND_UNKNOWN = 0,
        KIND_AUDIO = 1,
        KIND_VIDEO = 2
    }
    export enum TrackSource {
        SOURCE_UNKNOWN = 0,
        SOURCE_CAMERA = 1,
        SOURCE_MICROPHONE = 2,
        SOURCE_SCREENSHARE = 3,
        SOURCE_SCREENSHARE_AUDIO = 4
    }
    export enum StreamState {
        STATE_UNKNOWN = 0,
        STATE_ACTIVE = 1,
        STATE_PAUSED = 2
    }
    export class CreateVideoTrackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            source_handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("source_handle" in data && data.source_handle != undefined) {
                    this.source_handle = data.source_handle;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set source_handle(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            source_handle?: number;
        }): CreateVideoTrackRequest {
            const message = new CreateVideoTrackRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.source_handle != null) {
                message.source_handle = data.source_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                source_handle?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.source_handle != null) {
                data.source_handle = this.source_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.source_handle != 0)
                writer.writeUint64(2, this.source_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVideoTrackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVideoTrackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.source_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVideoTrackRequest {
            return CreateVideoTrackRequest.deserialize(bytes);
        }
    }
    export class CreateVideoTrackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            track?: OwnedTrack;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("track" in data && data.track != undefined) {
                    this.track = data.track;
                }
            }
        }
        get track() {
            return pb_1.Message.getWrapperField(this, OwnedTrack, 1) as OwnedTrack;
        }
        set track(value: OwnedTrack) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_track() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            track?: ReturnType<typeof OwnedTrack.prototype.toObject>;
        }): CreateVideoTrackResponse {
            const message = new CreateVideoTrackResponse({});
            if (data.track != null) {
                message.track = OwnedTrack.fromObject(data.track);
            }
            return message;
        }
        toObject() {
            const data: {
                track?: ReturnType<typeof OwnedTrack.prototype.toObject>;
            } = {};
            if (this.track != null) {
                data.track = this.track.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_track)
                writer.writeMessage(1, this.track, () => this.track.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVideoTrackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVideoTrackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.track, () => message.track = OwnedTrack.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVideoTrackResponse {
            return CreateVideoTrackResponse.deserialize(bytes);
        }
    }
    export class CreateAudioTrackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            source_handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("source_handle" in data && data.source_handle != undefined) {
                    this.source_handle = data.source_handle;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set source_handle(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            source_handle?: number;
        }): CreateAudioTrackRequest {
            const message = new CreateAudioTrackRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.source_handle != null) {
                message.source_handle = data.source_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                source_handle?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.source_handle != null) {
                data.source_handle = this.source_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.source_handle != 0)
                writer.writeUint64(2, this.source_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAudioTrackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAudioTrackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.source_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAudioTrackRequest {
            return CreateAudioTrackRequest.deserialize(bytes);
        }
    }
    export class CreateAudioTrackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            track?: OwnedTrack;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("track" in data && data.track != undefined) {
                    this.track = data.track;
                }
            }
        }
        get track() {
            return pb_1.Message.getWrapperField(this, OwnedTrack, 1) as OwnedTrack;
        }
        set track(value: OwnedTrack) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_track() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            track?: ReturnType<typeof OwnedTrack.prototype.toObject>;
        }): CreateAudioTrackResponse {
            const message = new CreateAudioTrackResponse({});
            if (data.track != null) {
                message.track = OwnedTrack.fromObject(data.track);
            }
            return message;
        }
        toObject() {
            const data: {
                track?: ReturnType<typeof OwnedTrack.prototype.toObject>;
            } = {};
            if (this.track != null) {
                data.track = this.track.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_track)
                writer.writeMessage(1, this.track, () => this.track.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAudioTrackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAudioTrackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.track, () => message.track = OwnedTrack.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAudioTrackResponse {
            return CreateAudioTrackResponse.deserialize(bytes);
        }
    }
    export class TrackEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): TrackEvent {
            const message = new TrackEvent({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackEvent {
            return TrackEvent.deserialize(bytes);
        }
    }
    export class TrackPublicationInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            name?: string;
            kind?: TrackKind;
            source?: TrackSource;
            simulcasted?: boolean;
            width?: number;
            height?: number;
            mime_type?: string;
            muted?: boolean;
            remote?: boolean;
            encryption_type?: dependency_1.livekit.proto.EncryptionType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("simulcasted" in data && data.simulcasted != undefined) {
                    this.simulcasted = data.simulcasted;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("muted" in data && data.muted != undefined) {
                    this.muted = data.muted;
                }
                if ("remote" in data && data.remote != undefined) {
                    this.remote = data.remote;
                }
                if ("encryption_type" in data && data.encryption_type != undefined) {
                    this.encryption_type = data.encryption_type;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 3, TrackKind.KIND_UNKNOWN) as TrackKind;
        }
        set kind(value: TrackKind) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, TrackSource.SOURCE_UNKNOWN) as TrackSource;
        }
        set source(value: TrackSource) {
            pb_1.Message.setField(this, 4, value);
        }
        get simulcasted() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set simulcasted(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get muted() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set muted(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get remote() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set remote(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get encryption_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.livekit.proto.EncryptionType.NONE) as dependency_1.livekit.proto.EncryptionType;
        }
        set encryption_type(value: dependency_1.livekit.proto.EncryptionType) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            sid?: string;
            name?: string;
            kind?: TrackKind;
            source?: TrackSource;
            simulcasted?: boolean;
            width?: number;
            height?: number;
            mime_type?: string;
            muted?: boolean;
            remote?: boolean;
            encryption_type?: dependency_1.livekit.proto.EncryptionType;
        }): TrackPublicationInfo {
            const message = new TrackPublicationInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.simulcasted != null) {
                message.simulcasted = data.simulcasted;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.muted != null) {
                message.muted = data.muted;
            }
            if (data.remote != null) {
                message.remote = data.remote;
            }
            if (data.encryption_type != null) {
                message.encryption_type = data.encryption_type;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                name?: string;
                kind?: TrackKind;
                source?: TrackSource;
                simulcasted?: boolean;
                width?: number;
                height?: number;
                mime_type?: string;
                muted?: boolean;
                remote?: boolean;
                encryption_type?: dependency_1.livekit.proto.EncryptionType;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.simulcasted != null) {
                data.simulcasted = this.simulcasted;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.muted != null) {
                data.muted = this.muted;
            }
            if (this.remote != null) {
                data.remote = this.remote;
            }
            if (this.encryption_type != null) {
                data.encryption_type = this.encryption_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.kind != TrackKind.KIND_UNKNOWN)
                writer.writeEnum(3, this.kind);
            if (this.source != TrackSource.SOURCE_UNKNOWN)
                writer.writeEnum(4, this.source);
            if (this.simulcasted != false)
                writer.writeBool(5, this.simulcasted);
            if (this.width != 0)
                writer.writeUint32(6, this.width);
            if (this.height != 0)
                writer.writeUint32(7, this.height);
            if (this.mime_type.length)
                writer.writeString(8, this.mime_type);
            if (this.muted != false)
                writer.writeBool(9, this.muted);
            if (this.remote != false)
                writer.writeBool(10, this.remote);
            if (this.encryption_type != dependency_1.livekit.proto.EncryptionType.NONE)
                writer.writeEnum(11, this.encryption_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackPublicationInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackPublicationInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.kind = reader.readEnum();
                        break;
                    case 4:
                        message.source = reader.readEnum();
                        break;
                    case 5:
                        message.simulcasted = reader.readBool();
                        break;
                    case 6:
                        message.width = reader.readUint32();
                        break;
                    case 7:
                        message.height = reader.readUint32();
                        break;
                    case 8:
                        message.mime_type = reader.readString();
                        break;
                    case 9:
                        message.muted = reader.readBool();
                        break;
                    case 10:
                        message.remote = reader.readBool();
                        break;
                    case 11:
                        message.encryption_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackPublicationInfo {
            return TrackPublicationInfo.deserialize(bytes);
        }
    }
    export class OwnedTrackPublication extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_2.livekit.proto.FfiOwnedHandle;
            info?: TrackPublicationInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.FfiOwnedHandle, 1) as dependency_2.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_2.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, TrackPublicationInfo, 2) as TrackPublicationInfo;
        }
        set info(value: TrackPublicationInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof TrackPublicationInfo.prototype.toObject>;
        }): OwnedTrackPublication {
            const message = new OwnedTrackPublication({});
            if (data.handle != null) {
                message.handle = dependency_2.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = TrackPublicationInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof TrackPublicationInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedTrackPublication {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedTrackPublication();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_2.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = TrackPublicationInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedTrackPublication {
            return OwnedTrackPublication.deserialize(bytes);
        }
    }
    export class TrackInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            name?: string;
            kind?: TrackKind;
            stream_state?: StreamState;
            muted?: boolean;
            remote?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("stream_state" in data && data.stream_state != undefined) {
                    this.stream_state = data.stream_state;
                }
                if ("muted" in data && data.muted != undefined) {
                    this.muted = data.muted;
                }
                if ("remote" in data && data.remote != undefined) {
                    this.remote = data.remote;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 3, TrackKind.KIND_UNKNOWN) as TrackKind;
        }
        set kind(value: TrackKind) {
            pb_1.Message.setField(this, 3, value);
        }
        get stream_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, StreamState.STATE_UNKNOWN) as StreamState;
        }
        set stream_state(value: StreamState) {
            pb_1.Message.setField(this, 4, value);
        }
        get muted() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set muted(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get remote() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set remote(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            sid?: string;
            name?: string;
            kind?: TrackKind;
            stream_state?: StreamState;
            muted?: boolean;
            remote?: boolean;
        }): TrackInfo {
            const message = new TrackInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.stream_state != null) {
                message.stream_state = data.stream_state;
            }
            if (data.muted != null) {
                message.muted = data.muted;
            }
            if (data.remote != null) {
                message.remote = data.remote;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                name?: string;
                kind?: TrackKind;
                stream_state?: StreamState;
                muted?: boolean;
                remote?: boolean;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.stream_state != null) {
                data.stream_state = this.stream_state;
            }
            if (this.muted != null) {
                data.muted = this.muted;
            }
            if (this.remote != null) {
                data.remote = this.remote;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.kind != TrackKind.KIND_UNKNOWN)
                writer.writeEnum(3, this.kind);
            if (this.stream_state != StreamState.STATE_UNKNOWN)
                writer.writeEnum(4, this.stream_state);
            if (this.muted != false)
                writer.writeBool(5, this.muted);
            if (this.remote != false)
                writer.writeBool(6, this.remote);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.kind = reader.readEnum();
                        break;
                    case 4:
                        message.stream_state = reader.readEnum();
                        break;
                    case 5:
                        message.muted = reader.readBool();
                        break;
                    case 6:
                        message.remote = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackInfo {
            return TrackInfo.deserialize(bytes);
        }
    }
    export class OwnedTrack extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_2.livekit.proto.FfiOwnedHandle;
            info?: TrackInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.FfiOwnedHandle, 1) as dependency_2.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_2.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, TrackInfo, 2) as TrackInfo;
        }
        set info(value: TrackInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof TrackInfo.prototype.toObject>;
        }): OwnedTrack {
            const message = new OwnedTrack({});
            if (data.handle != null) {
                message.handle = dependency_2.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = TrackInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof TrackInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedTrack {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedTrack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_2.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = TrackInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedTrack {
            return OwnedTrack.deserialize(bytes);
        }
    }
}
