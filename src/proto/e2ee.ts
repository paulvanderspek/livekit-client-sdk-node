/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: e2ee.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export enum EncryptionType {
        NONE = 0,
        GCM = 1,
        CUSTOM = 2
    }
    export enum EncryptionState {
        NEW = 0,
        OK = 1,
        ENCRYPTION_FAILED = 2,
        DECRYPTION_FAILED = 3,
        MISSING_KEY = 4,
        KEY_RATCHETED = 5,
        INTERNAL_ERROR = 6
    }
    export class FrameCryptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            track_sid?: string;
            key_index?: number;
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            track_sid?: string;
            key_index?: number;
            enabled?: boolean;
        }): FrameCryptor {
            const message = new FrameCryptor({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                track_sid?: string;
                key_index?: number;
                enabled?: boolean;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (this.key_index != 0)
                writer.writeInt32(3, this.key_index);
            if (this.enabled != false)
                writer.writeBool(4, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrameCryptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrameCryptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    case 3:
                        message.key_index = reader.readInt32();
                        break;
                    case 4:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrameCryptor {
            return FrameCryptor.deserialize(bytes);
        }
    }
    export class KeyProviderOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({
            ratchet_window_size?: number;
            ratchet_salt?: Uint8Array;
            uncrypted_magic_bytes?: Uint8Array;
        } & (({
            shared_key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shared_key" in data && data.shared_key != undefined) {
                    this.shared_key = data.shared_key;
                }
                if ("ratchet_window_size" in data && data.ratchet_window_size != undefined) {
                    this.ratchet_window_size = data.ratchet_window_size;
                }
                if ("ratchet_salt" in data && data.ratchet_salt != undefined) {
                    this.ratchet_salt = data.ratchet_salt;
                }
                if ("uncrypted_magic_bytes" in data && data.uncrypted_magic_bytes != undefined) {
                    this.uncrypted_magic_bytes = data.uncrypted_magic_bytes;
                }
            }
        }
        get shared_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set shared_key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_shared_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ratchet_window_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ratchet_window_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ratchet_salt() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ratchet_salt(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get uncrypted_magic_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set uncrypted_magic_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get _shared_key() {
            const cases: {
                [index: number]: "none" | "shared_key";
            } = {
                0: "none",
                1: "shared_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            shared_key?: Uint8Array;
            ratchet_window_size?: number;
            ratchet_salt?: Uint8Array;
            uncrypted_magic_bytes?: Uint8Array;
        }): KeyProviderOptions {
            const message = new KeyProviderOptions({});
            if (data.shared_key != null) {
                message.shared_key = data.shared_key;
            }
            if (data.ratchet_window_size != null) {
                message.ratchet_window_size = data.ratchet_window_size;
            }
            if (data.ratchet_salt != null) {
                message.ratchet_salt = data.ratchet_salt;
            }
            if (data.uncrypted_magic_bytes != null) {
                message.uncrypted_magic_bytes = data.uncrypted_magic_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                shared_key?: Uint8Array;
                ratchet_window_size?: number;
                ratchet_salt?: Uint8Array;
                uncrypted_magic_bytes?: Uint8Array;
            } = {};
            if (this.shared_key != null) {
                data.shared_key = this.shared_key;
            }
            if (this.ratchet_window_size != null) {
                data.ratchet_window_size = this.ratchet_window_size;
            }
            if (this.ratchet_salt != null) {
                data.ratchet_salt = this.ratchet_salt;
            }
            if (this.uncrypted_magic_bytes != null) {
                data.uncrypted_magic_bytes = this.uncrypted_magic_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_shared_key)
                writer.writeBytes(1, this.shared_key);
            if (this.ratchet_window_size != 0)
                writer.writeInt32(2, this.ratchet_window_size);
            if (this.ratchet_salt.length)
                writer.writeBytes(3, this.ratchet_salt);
            if (this.uncrypted_magic_bytes.length)
                writer.writeBytes(4, this.uncrypted_magic_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyProviderOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyProviderOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shared_key = reader.readBytes();
                        break;
                    case 2:
                        message.ratchet_window_size = reader.readInt32();
                        break;
                    case 3:
                        message.ratchet_salt = reader.readBytes();
                        break;
                    case 4:
                        message.uncrypted_magic_bytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyProviderOptions {
            return KeyProviderOptions.deserialize(bytes);
        }
    }
    export class E2eeOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            encryption_type?: EncryptionType;
            key_provider_options?: KeyProviderOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("encryption_type" in data && data.encryption_type != undefined) {
                    this.encryption_type = data.encryption_type;
                }
                if ("key_provider_options" in data && data.key_provider_options != undefined) {
                    this.key_provider_options = data.key_provider_options;
                }
            }
        }
        get encryption_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, EncryptionType.NONE) as EncryptionType;
        }
        set encryption_type(value: EncryptionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_provider_options() {
            return pb_1.Message.getWrapperField(this, KeyProviderOptions, 2) as KeyProviderOptions;
        }
        set key_provider_options(value: KeyProviderOptions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_key_provider_options() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            encryption_type?: EncryptionType;
            key_provider_options?: ReturnType<typeof KeyProviderOptions.prototype.toObject>;
        }): E2eeOptions {
            const message = new E2eeOptions({});
            if (data.encryption_type != null) {
                message.encryption_type = data.encryption_type;
            }
            if (data.key_provider_options != null) {
                message.key_provider_options = KeyProviderOptions.fromObject(data.key_provider_options);
            }
            return message;
        }
        toObject() {
            const data: {
                encryption_type?: EncryptionType;
                key_provider_options?: ReturnType<typeof KeyProviderOptions.prototype.toObject>;
            } = {};
            if (this.encryption_type != null) {
                data.encryption_type = this.encryption_type;
            }
            if (this.key_provider_options != null) {
                data.key_provider_options = this.key_provider_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.encryption_type != EncryptionType.NONE)
                writer.writeEnum(1, this.encryption_type);
            if (this.has_key_provider_options)
                writer.writeMessage(2, this.key_provider_options, () => this.key_provider_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.encryption_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.key_provider_options, () => message.key_provider_options = KeyProviderOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeOptions {
            return E2eeOptions.deserialize(bytes);
        }
    }
    export class E2eeManagerSetEnabledRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enabled?: boolean;
        }): E2eeManagerSetEnabledRequest {
            const message = new E2eeManagerSetEnabledRequest({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeManagerSetEnabledRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeManagerSetEnabledRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeManagerSetEnabledRequest {
            return E2eeManagerSetEnabledRequest.deserialize(bytes);
        }
    }
    export class E2eeManagerSetEnabledResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): E2eeManagerSetEnabledResponse {
            const message = new E2eeManagerSetEnabledResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeManagerSetEnabledResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeManagerSetEnabledResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeManagerSetEnabledResponse {
            return E2eeManagerSetEnabledResponse.deserialize(bytes);
        }
    }
    export class E2eeManagerGetFrameCryptorsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): E2eeManagerGetFrameCryptorsRequest {
            const message = new E2eeManagerGetFrameCryptorsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeManagerGetFrameCryptorsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeManagerGetFrameCryptorsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeManagerGetFrameCryptorsRequest {
            return E2eeManagerGetFrameCryptorsRequest.deserialize(bytes);
        }
    }
    export class E2eeManagerGetFrameCryptorsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            frame_cryptors?: FrameCryptor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("frame_cryptors" in data && data.frame_cryptors != undefined) {
                    this.frame_cryptors = data.frame_cryptors;
                }
            }
        }
        get frame_cryptors() {
            return pb_1.Message.getRepeatedWrapperField(this, FrameCryptor, 1) as FrameCryptor[];
        }
        set frame_cryptors(value: FrameCryptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            frame_cryptors?: ReturnType<typeof FrameCryptor.prototype.toObject>[];
        }): E2eeManagerGetFrameCryptorsResponse {
            const message = new E2eeManagerGetFrameCryptorsResponse({});
            if (data.frame_cryptors != null) {
                message.frame_cryptors = data.frame_cryptors.map(item => FrameCryptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                frame_cryptors?: ReturnType<typeof FrameCryptor.prototype.toObject>[];
            } = {};
            if (this.frame_cryptors != null) {
                data.frame_cryptors = this.frame_cryptors.map((item: FrameCryptor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.frame_cryptors.length)
                writer.writeRepeatedMessage(1, this.frame_cryptors, (item: FrameCryptor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeManagerGetFrameCryptorsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeManagerGetFrameCryptorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.frame_cryptors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FrameCryptor.deserialize(reader), FrameCryptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeManagerGetFrameCryptorsResponse {
            return E2eeManagerGetFrameCryptorsResponse.deserialize(bytes);
        }
    }
    export class FrameCryptorSetEnabledRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            track_sid?: string;
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            track_sid?: string;
            enabled?: boolean;
        }): FrameCryptorSetEnabledRequest {
            const message = new FrameCryptorSetEnabledRequest({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                track_sid?: string;
                enabled?: boolean;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (this.enabled != false)
                writer.writeBool(3, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrameCryptorSetEnabledRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrameCryptorSetEnabledRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    case 3:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrameCryptorSetEnabledRequest {
            return FrameCryptorSetEnabledRequest.deserialize(bytes);
        }
    }
    export class FrameCryptorSetEnabledResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): FrameCryptorSetEnabledResponse {
            const message = new FrameCryptorSetEnabledResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrameCryptorSetEnabledResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrameCryptorSetEnabledResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrameCryptorSetEnabledResponse {
            return FrameCryptorSetEnabledResponse.deserialize(bytes);
        }
    }
    export class FrameCryptorSetKeyIndexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            track_sid?: string;
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            track_sid?: string;
            key_index?: number;
        }): FrameCryptorSetKeyIndexRequest {
            const message = new FrameCryptorSetKeyIndexRequest({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                track_sid?: string;
                key_index?: number;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (this.key_index != 0)
                writer.writeInt32(3, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrameCryptorSetKeyIndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrameCryptorSetKeyIndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    case 3:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrameCryptorSetKeyIndexRequest {
            return FrameCryptorSetKeyIndexRequest.deserialize(bytes);
        }
    }
    export class FrameCryptorSetKeyIndexResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): FrameCryptorSetKeyIndexResponse {
            const message = new FrameCryptorSetKeyIndexResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrameCryptorSetKeyIndexResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrameCryptorSetKeyIndexResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FrameCryptorSetKeyIndexResponse {
            return FrameCryptorSetKeyIndexResponse.deserialize(bytes);
        }
    }
    export class SetSharedKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shared_key?: Uint8Array;
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shared_key" in data && data.shared_key != undefined) {
                    this.shared_key = data.shared_key;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get shared_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set shared_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            shared_key?: Uint8Array;
            key_index?: number;
        }): SetSharedKeyRequest {
            const message = new SetSharedKeyRequest({});
            if (data.shared_key != null) {
                message.shared_key = data.shared_key;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                shared_key?: Uint8Array;
                key_index?: number;
            } = {};
            if (this.shared_key != null) {
                data.shared_key = this.shared_key;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shared_key.length)
                writer.writeBytes(1, this.shared_key);
            if (this.key_index != 0)
                writer.writeInt32(2, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSharedKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSharedKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shared_key = reader.readBytes();
                        break;
                    case 2:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSharedKeyRequest {
            return SetSharedKeyRequest.deserialize(bytes);
        }
    }
    export class SetSharedKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetSharedKeyResponse {
            const message = new SetSharedKeyResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSharedKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSharedKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSharedKeyResponse {
            return SetSharedKeyResponse.deserialize(bytes);
        }
    }
    export class RatchetSharedKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_index?: number;
        }): RatchetSharedKeyRequest {
            const message = new RatchetSharedKeyRequest({});
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                key_index?: number;
            } = {};
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_index != 0)
                writer.writeInt32(1, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RatchetSharedKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RatchetSharedKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RatchetSharedKeyRequest {
            return RatchetSharedKeyRequest.deserialize(bytes);
        }
    }
    export class RatchetSharedKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            new_key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_key" in data && data.new_key != undefined) {
                    this.new_key = data.new_key;
                }
            }
        }
        get new_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set new_key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _new_key() {
            const cases: {
                [index: number]: "none" | "new_key";
            } = {
                0: "none",
                1: "new_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            new_key?: Uint8Array;
        }): RatchetSharedKeyResponse {
            const message = new RatchetSharedKeyResponse({});
            if (data.new_key != null) {
                message.new_key = data.new_key;
            }
            return message;
        }
        toObject() {
            const data: {
                new_key?: Uint8Array;
            } = {};
            if (this.new_key != null) {
                data.new_key = this.new_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_key)
                writer.writeBytes(1, this.new_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RatchetSharedKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RatchetSharedKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.new_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RatchetSharedKeyResponse {
            return RatchetSharedKeyResponse.deserialize(bytes);
        }
    }
    export class GetSharedKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_index?: number;
        }): GetSharedKeyRequest {
            const message = new GetSharedKeyRequest({});
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                key_index?: number;
            } = {};
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_index != 0)
                writer.writeInt32(1, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSharedKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSharedKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSharedKeyRequest {
            return GetSharedKeyRequest.deserialize(bytes);
        }
    }
    export class GetSharedKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _key() {
            const cases: {
                [index: number]: "none" | "key";
            } = {
                0: "none",
                1: "key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            key?: Uint8Array;
        }): GetSharedKeyResponse {
            const message = new GetSharedKeyResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: Uint8Array;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeBytes(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSharedKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSharedKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSharedKeyResponse {
            return GetSharedKeyResponse.deserialize(bytes);
        }
    }
    export class SetKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            key?: Uint8Array;
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            key?: Uint8Array;
            key_index?: number;
        }): SetKeyRequest {
            const message = new SetKeyRequest({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                key?: Uint8Array;
                key_index?: number;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.key.length)
                writer.writeBytes(2, this.key);
            if (this.key_index != 0)
                writer.writeInt32(3, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readBytes();
                        break;
                    case 3:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetKeyRequest {
            return SetKeyRequest.deserialize(bytes);
        }
    }
    export class SetKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetKeyResponse {
            const message = new SetKeyResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetKeyResponse {
            return SetKeyResponse.deserialize(bytes);
        }
    }
    export class RatchetKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            key_index?: number;
        }): RatchetKeyRequest {
            const message = new RatchetKeyRequest({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                key_index?: number;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.key_index != 0)
                writer.writeInt32(2, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RatchetKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RatchetKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RatchetKeyRequest {
            return RatchetKeyRequest.deserialize(bytes);
        }
    }
    export class RatchetKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            new_key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_key" in data && data.new_key != undefined) {
                    this.new_key = data.new_key;
                }
            }
        }
        get new_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set new_key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _new_key() {
            const cases: {
                [index: number]: "none" | "new_key";
            } = {
                0: "none",
                1: "new_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            new_key?: Uint8Array;
        }): RatchetKeyResponse {
            const message = new RatchetKeyResponse({});
            if (data.new_key != null) {
                message.new_key = data.new_key;
            }
            return message;
        }
        toObject() {
            const data: {
                new_key?: Uint8Array;
            } = {};
            if (this.new_key != null) {
                data.new_key = this.new_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_key)
                writer.writeBytes(1, this.new_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RatchetKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RatchetKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.new_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RatchetKeyResponse {
            return RatchetKeyResponse.deserialize(bytes);
        }
    }
    export class GetKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_identity?: string;
            key_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_identity" in data && data.participant_identity != undefined) {
                    this.participant_identity = data.participant_identity;
                }
                if ("key_index" in data && data.key_index != undefined) {
                    this.key_index = data.key_index;
                }
            }
        }
        get participant_identity() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_identity(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set key_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_identity?: string;
            key_index?: number;
        }): GetKeyRequest {
            const message = new GetKeyRequest({});
            if (data.participant_identity != null) {
                message.participant_identity = data.participant_identity;
            }
            if (data.key_index != null) {
                message.key_index = data.key_index;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_identity?: string;
                key_index?: number;
            } = {};
            if (this.participant_identity != null) {
                data.participant_identity = this.participant_identity;
            }
            if (this.key_index != null) {
                data.key_index = this.key_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_identity.length)
                writer.writeString(1, this.participant_identity);
            if (this.key_index != 0)
                writer.writeInt32(2, this.key_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_identity = reader.readString();
                        break;
                    case 2:
                        message.key_index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyRequest {
            return GetKeyRequest.deserialize(bytes);
        }
    }
    export class GetKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _key() {
            const cases: {
                [index: number]: "none" | "key";
            } = {
                0: "none",
                1: "key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            key?: Uint8Array;
        }): GetKeyResponse {
            const message = new GetKeyResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: Uint8Array;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeBytes(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyResponse {
            return GetKeyResponse.deserialize(bytes);
        }
    }
    export class E2eeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];
        constructor(data?: any[] | ({
            room_handle?: number;
        } & (({
            manager_set_enabled?: E2eeManagerSetEnabledRequest;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: E2eeManagerGetFrameCryptorsRequest;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: FrameCryptorSetEnabledRequest;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: FrameCryptorSetKeyIndexRequest;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: SetSharedKeyRequest;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: RatchetSharedKeyRequest;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: GetSharedKeyRequest;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: SetKeyRequest;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: RatchetKeyRequest;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: GetKeyRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_handle" in data && data.room_handle != undefined) {
                    this.room_handle = data.room_handle;
                }
                if ("manager_set_enabled" in data && data.manager_set_enabled != undefined) {
                    this.manager_set_enabled = data.manager_set_enabled;
                }
                if ("manager_get_frame_cryptors" in data && data.manager_get_frame_cryptors != undefined) {
                    this.manager_get_frame_cryptors = data.manager_get_frame_cryptors;
                }
                if ("cryptor_set_enabled" in data && data.cryptor_set_enabled != undefined) {
                    this.cryptor_set_enabled = data.cryptor_set_enabled;
                }
                if ("cryptor_set_key_index" in data && data.cryptor_set_key_index != undefined) {
                    this.cryptor_set_key_index = data.cryptor_set_key_index;
                }
                if ("set_shared_key" in data && data.set_shared_key != undefined) {
                    this.set_shared_key = data.set_shared_key;
                }
                if ("ratchet_shared_key" in data && data.ratchet_shared_key != undefined) {
                    this.ratchet_shared_key = data.ratchet_shared_key;
                }
                if ("get_shared_key" in data && data.get_shared_key != undefined) {
                    this.get_shared_key = data.get_shared_key;
                }
                if ("set_key" in data && data.set_key != undefined) {
                    this.set_key = data.set_key;
                }
                if ("ratchet_key" in data && data.ratchet_key != undefined) {
                    this.ratchet_key = data.ratchet_key;
                }
                if ("get_key" in data && data.get_key != undefined) {
                    this.get_key = data.get_key;
                }
            }
        }
        get room_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get manager_set_enabled() {
            return pb_1.Message.getWrapperField(this, E2eeManagerSetEnabledRequest, 2) as E2eeManagerSetEnabledRequest;
        }
        set manager_set_enabled(value: E2eeManagerSetEnabledRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_manager_set_enabled() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get manager_get_frame_cryptors() {
            return pb_1.Message.getWrapperField(this, E2eeManagerGetFrameCryptorsRequest, 3) as E2eeManagerGetFrameCryptorsRequest;
        }
        set manager_get_frame_cryptors(value: E2eeManagerGetFrameCryptorsRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_manager_get_frame_cryptors() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cryptor_set_enabled() {
            return pb_1.Message.getWrapperField(this, FrameCryptorSetEnabledRequest, 4) as FrameCryptorSetEnabledRequest;
        }
        set cryptor_set_enabled(value: FrameCryptorSetEnabledRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_cryptor_set_enabled() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cryptor_set_key_index() {
            return pb_1.Message.getWrapperField(this, FrameCryptorSetKeyIndexRequest, 5) as FrameCryptorSetKeyIndexRequest;
        }
        set cryptor_set_key_index(value: FrameCryptorSetKeyIndexRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_cryptor_set_key_index() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get set_shared_key() {
            return pb_1.Message.getWrapperField(this, SetSharedKeyRequest, 6) as SetSharedKeyRequest;
        }
        set set_shared_key(value: SetSharedKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_set_shared_key() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ratchet_shared_key() {
            return pb_1.Message.getWrapperField(this, RatchetSharedKeyRequest, 7) as RatchetSharedKeyRequest;
        }
        set ratchet_shared_key(value: RatchetSharedKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_ratchet_shared_key() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get get_shared_key() {
            return pb_1.Message.getWrapperField(this, GetSharedKeyRequest, 8) as GetSharedKeyRequest;
        }
        set get_shared_key(value: GetSharedKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_get_shared_key() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get set_key() {
            return pb_1.Message.getWrapperField(this, SetKeyRequest, 9) as SetKeyRequest;
        }
        set set_key(value: SetKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_set_key() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ratchet_key() {
            return pb_1.Message.getWrapperField(this, RatchetKeyRequest, 10) as RatchetKeyRequest;
        }
        set ratchet_key(value: RatchetKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_ratchet_key() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get get_key() {
            return pb_1.Message.getWrapperField(this, GetKeyRequest, 11) as GetKeyRequest;
        }
        set get_key(value: GetKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_get_key() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "manager_set_enabled" | "manager_get_frame_cryptors" | "cryptor_set_enabled" | "cryptor_set_key_index" | "set_shared_key" | "ratchet_shared_key" | "get_shared_key" | "set_key" | "ratchet_key" | "get_key";
            } = {
                0: "none",
                2: "manager_set_enabled",
                3: "manager_get_frame_cryptors",
                4: "cryptor_set_enabled",
                5: "cryptor_set_key_index",
                6: "set_shared_key",
                7: "ratchet_shared_key",
                8: "get_shared_key",
                9: "set_key",
                10: "ratchet_key",
                11: "get_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];
        }
        static fromObject(data: {
            room_handle?: number;
            manager_set_enabled?: ReturnType<typeof E2eeManagerSetEnabledRequest.prototype.toObject>;
            manager_get_frame_cryptors?: ReturnType<typeof E2eeManagerGetFrameCryptorsRequest.prototype.toObject>;
            cryptor_set_enabled?: ReturnType<typeof FrameCryptorSetEnabledRequest.prototype.toObject>;
            cryptor_set_key_index?: ReturnType<typeof FrameCryptorSetKeyIndexRequest.prototype.toObject>;
            set_shared_key?: ReturnType<typeof SetSharedKeyRequest.prototype.toObject>;
            ratchet_shared_key?: ReturnType<typeof RatchetSharedKeyRequest.prototype.toObject>;
            get_shared_key?: ReturnType<typeof GetSharedKeyRequest.prototype.toObject>;
            set_key?: ReturnType<typeof SetKeyRequest.prototype.toObject>;
            ratchet_key?: ReturnType<typeof RatchetKeyRequest.prototype.toObject>;
            get_key?: ReturnType<typeof GetKeyRequest.prototype.toObject>;
        }): E2eeRequest {
            const message = new E2eeRequest({});
            if (data.room_handle != null) {
                message.room_handle = data.room_handle;
            }
            if (data.manager_set_enabled != null) {
                message.manager_set_enabled = E2eeManagerSetEnabledRequest.fromObject(data.manager_set_enabled);
            }
            if (data.manager_get_frame_cryptors != null) {
                message.manager_get_frame_cryptors = E2eeManagerGetFrameCryptorsRequest.fromObject(data.manager_get_frame_cryptors);
            }
            if (data.cryptor_set_enabled != null) {
                message.cryptor_set_enabled = FrameCryptorSetEnabledRequest.fromObject(data.cryptor_set_enabled);
            }
            if (data.cryptor_set_key_index != null) {
                message.cryptor_set_key_index = FrameCryptorSetKeyIndexRequest.fromObject(data.cryptor_set_key_index);
            }
            if (data.set_shared_key != null) {
                message.set_shared_key = SetSharedKeyRequest.fromObject(data.set_shared_key);
            }
            if (data.ratchet_shared_key != null) {
                message.ratchet_shared_key = RatchetSharedKeyRequest.fromObject(data.ratchet_shared_key);
            }
            if (data.get_shared_key != null) {
                message.get_shared_key = GetSharedKeyRequest.fromObject(data.get_shared_key);
            }
            if (data.set_key != null) {
                message.set_key = SetKeyRequest.fromObject(data.set_key);
            }
            if (data.ratchet_key != null) {
                message.ratchet_key = RatchetKeyRequest.fromObject(data.ratchet_key);
            }
            if (data.get_key != null) {
                message.get_key = GetKeyRequest.fromObject(data.get_key);
            }
            return message;
        }
        toObject() {
            const data: {
                room_handle?: number;
                manager_set_enabled?: ReturnType<typeof E2eeManagerSetEnabledRequest.prototype.toObject>;
                manager_get_frame_cryptors?: ReturnType<typeof E2eeManagerGetFrameCryptorsRequest.prototype.toObject>;
                cryptor_set_enabled?: ReturnType<typeof FrameCryptorSetEnabledRequest.prototype.toObject>;
                cryptor_set_key_index?: ReturnType<typeof FrameCryptorSetKeyIndexRequest.prototype.toObject>;
                set_shared_key?: ReturnType<typeof SetSharedKeyRequest.prototype.toObject>;
                ratchet_shared_key?: ReturnType<typeof RatchetSharedKeyRequest.prototype.toObject>;
                get_shared_key?: ReturnType<typeof GetSharedKeyRequest.prototype.toObject>;
                set_key?: ReturnType<typeof SetKeyRequest.prototype.toObject>;
                ratchet_key?: ReturnType<typeof RatchetKeyRequest.prototype.toObject>;
                get_key?: ReturnType<typeof GetKeyRequest.prototype.toObject>;
            } = {};
            if (this.room_handle != null) {
                data.room_handle = this.room_handle;
            }
            if (this.manager_set_enabled != null) {
                data.manager_set_enabled = this.manager_set_enabled.toObject();
            }
            if (this.manager_get_frame_cryptors != null) {
                data.manager_get_frame_cryptors = this.manager_get_frame_cryptors.toObject();
            }
            if (this.cryptor_set_enabled != null) {
                data.cryptor_set_enabled = this.cryptor_set_enabled.toObject();
            }
            if (this.cryptor_set_key_index != null) {
                data.cryptor_set_key_index = this.cryptor_set_key_index.toObject();
            }
            if (this.set_shared_key != null) {
                data.set_shared_key = this.set_shared_key.toObject();
            }
            if (this.ratchet_shared_key != null) {
                data.ratchet_shared_key = this.ratchet_shared_key.toObject();
            }
            if (this.get_shared_key != null) {
                data.get_shared_key = this.get_shared_key.toObject();
            }
            if (this.set_key != null) {
                data.set_key = this.set_key.toObject();
            }
            if (this.ratchet_key != null) {
                data.ratchet_key = this.ratchet_key.toObject();
            }
            if (this.get_key != null) {
                data.get_key = this.get_key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_handle != 0)
                writer.writeUint64(1, this.room_handle);
            if (this.has_manager_set_enabled)
                writer.writeMessage(2, this.manager_set_enabled, () => this.manager_set_enabled.serialize(writer));
            if (this.has_manager_get_frame_cryptors)
                writer.writeMessage(3, this.manager_get_frame_cryptors, () => this.manager_get_frame_cryptors.serialize(writer));
            if (this.has_cryptor_set_enabled)
                writer.writeMessage(4, this.cryptor_set_enabled, () => this.cryptor_set_enabled.serialize(writer));
            if (this.has_cryptor_set_key_index)
                writer.writeMessage(5, this.cryptor_set_key_index, () => this.cryptor_set_key_index.serialize(writer));
            if (this.has_set_shared_key)
                writer.writeMessage(6, this.set_shared_key, () => this.set_shared_key.serialize(writer));
            if (this.has_ratchet_shared_key)
                writer.writeMessage(7, this.ratchet_shared_key, () => this.ratchet_shared_key.serialize(writer));
            if (this.has_get_shared_key)
                writer.writeMessage(8, this.get_shared_key, () => this.get_shared_key.serialize(writer));
            if (this.has_set_key)
                writer.writeMessage(9, this.set_key, () => this.set_key.serialize(writer));
            if (this.has_ratchet_key)
                writer.writeMessage(10, this.ratchet_key, () => this.ratchet_key.serialize(writer));
            if (this.has_get_key)
                writer.writeMessage(11, this.get_key, () => this.get_key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.manager_set_enabled, () => message.manager_set_enabled = E2eeManagerSetEnabledRequest.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.manager_get_frame_cryptors, () => message.manager_get_frame_cryptors = E2eeManagerGetFrameCryptorsRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.cryptor_set_enabled, () => message.cryptor_set_enabled = FrameCryptorSetEnabledRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.cryptor_set_key_index, () => message.cryptor_set_key_index = FrameCryptorSetKeyIndexRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.set_shared_key, () => message.set_shared_key = SetSharedKeyRequest.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.ratchet_shared_key, () => message.ratchet_shared_key = RatchetSharedKeyRequest.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.get_shared_key, () => message.get_shared_key = GetSharedKeyRequest.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.set_key, () => message.set_key = SetKeyRequest.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.ratchet_key, () => message.ratchet_key = RatchetKeyRequest.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.get_key, () => message.get_key = GetKeyRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeRequest {
            return E2eeRequest.deserialize(bytes);
        }
    }
    export class E2eeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            manager_set_enabled?: E2eeManagerSetEnabledResponse;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: E2eeManagerGetFrameCryptorsResponse;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: FrameCryptorSetEnabledResponse;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: FrameCryptorSetKeyIndexResponse;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: SetSharedKeyResponse;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: RatchetSharedKeyResponse;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: GetSharedKeyResponse;
            set_key?: never;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: SetKeyResponse;
            ratchet_key?: never;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: RatchetKeyResponse;
            get_key?: never;
        } | {
            manager_set_enabled?: never;
            manager_get_frame_cryptors?: never;
            cryptor_set_enabled?: never;
            cryptor_set_key_index?: never;
            set_shared_key?: never;
            ratchet_shared_key?: never;
            get_shared_key?: never;
            set_key?: never;
            ratchet_key?: never;
            get_key?: GetKeyResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager_set_enabled" in data && data.manager_set_enabled != undefined) {
                    this.manager_set_enabled = data.manager_set_enabled;
                }
                if ("manager_get_frame_cryptors" in data && data.manager_get_frame_cryptors != undefined) {
                    this.manager_get_frame_cryptors = data.manager_get_frame_cryptors;
                }
                if ("cryptor_set_enabled" in data && data.cryptor_set_enabled != undefined) {
                    this.cryptor_set_enabled = data.cryptor_set_enabled;
                }
                if ("cryptor_set_key_index" in data && data.cryptor_set_key_index != undefined) {
                    this.cryptor_set_key_index = data.cryptor_set_key_index;
                }
                if ("set_shared_key" in data && data.set_shared_key != undefined) {
                    this.set_shared_key = data.set_shared_key;
                }
                if ("ratchet_shared_key" in data && data.ratchet_shared_key != undefined) {
                    this.ratchet_shared_key = data.ratchet_shared_key;
                }
                if ("get_shared_key" in data && data.get_shared_key != undefined) {
                    this.get_shared_key = data.get_shared_key;
                }
                if ("set_key" in data && data.set_key != undefined) {
                    this.set_key = data.set_key;
                }
                if ("ratchet_key" in data && data.ratchet_key != undefined) {
                    this.ratchet_key = data.ratchet_key;
                }
                if ("get_key" in data && data.get_key != undefined) {
                    this.get_key = data.get_key;
                }
            }
        }
        get manager_set_enabled() {
            return pb_1.Message.getWrapperField(this, E2eeManagerSetEnabledResponse, 1) as E2eeManagerSetEnabledResponse;
        }
        set manager_set_enabled(value: E2eeManagerSetEnabledResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_manager_set_enabled() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get manager_get_frame_cryptors() {
            return pb_1.Message.getWrapperField(this, E2eeManagerGetFrameCryptorsResponse, 2) as E2eeManagerGetFrameCryptorsResponse;
        }
        set manager_get_frame_cryptors(value: E2eeManagerGetFrameCryptorsResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_manager_get_frame_cryptors() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cryptor_set_enabled() {
            return pb_1.Message.getWrapperField(this, FrameCryptorSetEnabledResponse, 3) as FrameCryptorSetEnabledResponse;
        }
        set cryptor_set_enabled(value: FrameCryptorSetEnabledResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_cryptor_set_enabled() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cryptor_set_key_index() {
            return pb_1.Message.getWrapperField(this, FrameCryptorSetKeyIndexResponse, 4) as FrameCryptorSetKeyIndexResponse;
        }
        set cryptor_set_key_index(value: FrameCryptorSetKeyIndexResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_cryptor_set_key_index() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get set_shared_key() {
            return pb_1.Message.getWrapperField(this, SetSharedKeyResponse, 5) as SetSharedKeyResponse;
        }
        set set_shared_key(value: SetSharedKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_set_shared_key() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ratchet_shared_key() {
            return pb_1.Message.getWrapperField(this, RatchetSharedKeyResponse, 6) as RatchetSharedKeyResponse;
        }
        set ratchet_shared_key(value: RatchetSharedKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_ratchet_shared_key() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get get_shared_key() {
            return pb_1.Message.getWrapperField(this, GetSharedKeyResponse, 7) as GetSharedKeyResponse;
        }
        set get_shared_key(value: GetSharedKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_get_shared_key() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get set_key() {
            return pb_1.Message.getWrapperField(this, SetKeyResponse, 8) as SetKeyResponse;
        }
        set set_key(value: SetKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_set_key() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get ratchet_key() {
            return pb_1.Message.getWrapperField(this, RatchetKeyResponse, 9) as RatchetKeyResponse;
        }
        set ratchet_key(value: RatchetKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_ratchet_key() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get get_key() {
            return pb_1.Message.getWrapperField(this, GetKeyResponse, 10) as GetKeyResponse;
        }
        set get_key(value: GetKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_get_key() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "manager_set_enabled" | "manager_get_frame_cryptors" | "cryptor_set_enabled" | "cryptor_set_key_index" | "set_shared_key" | "ratchet_shared_key" | "get_shared_key" | "set_key" | "ratchet_key" | "get_key";
            } = {
                0: "none",
                1: "manager_set_enabled",
                2: "manager_get_frame_cryptors",
                3: "cryptor_set_enabled",
                4: "cryptor_set_key_index",
                5: "set_shared_key",
                6: "ratchet_shared_key",
                7: "get_shared_key",
                8: "set_key",
                9: "ratchet_key",
                10: "get_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            manager_set_enabled?: ReturnType<typeof E2eeManagerSetEnabledResponse.prototype.toObject>;
            manager_get_frame_cryptors?: ReturnType<typeof E2eeManagerGetFrameCryptorsResponse.prototype.toObject>;
            cryptor_set_enabled?: ReturnType<typeof FrameCryptorSetEnabledResponse.prototype.toObject>;
            cryptor_set_key_index?: ReturnType<typeof FrameCryptorSetKeyIndexResponse.prototype.toObject>;
            set_shared_key?: ReturnType<typeof SetSharedKeyResponse.prototype.toObject>;
            ratchet_shared_key?: ReturnType<typeof RatchetSharedKeyResponse.prototype.toObject>;
            get_shared_key?: ReturnType<typeof GetSharedKeyResponse.prototype.toObject>;
            set_key?: ReturnType<typeof SetKeyResponse.prototype.toObject>;
            ratchet_key?: ReturnType<typeof RatchetKeyResponse.prototype.toObject>;
            get_key?: ReturnType<typeof GetKeyResponse.prototype.toObject>;
        }): E2eeResponse {
            const message = new E2eeResponse({});
            if (data.manager_set_enabled != null) {
                message.manager_set_enabled = E2eeManagerSetEnabledResponse.fromObject(data.manager_set_enabled);
            }
            if (data.manager_get_frame_cryptors != null) {
                message.manager_get_frame_cryptors = E2eeManagerGetFrameCryptorsResponse.fromObject(data.manager_get_frame_cryptors);
            }
            if (data.cryptor_set_enabled != null) {
                message.cryptor_set_enabled = FrameCryptorSetEnabledResponse.fromObject(data.cryptor_set_enabled);
            }
            if (data.cryptor_set_key_index != null) {
                message.cryptor_set_key_index = FrameCryptorSetKeyIndexResponse.fromObject(data.cryptor_set_key_index);
            }
            if (data.set_shared_key != null) {
                message.set_shared_key = SetSharedKeyResponse.fromObject(data.set_shared_key);
            }
            if (data.ratchet_shared_key != null) {
                message.ratchet_shared_key = RatchetSharedKeyResponse.fromObject(data.ratchet_shared_key);
            }
            if (data.get_shared_key != null) {
                message.get_shared_key = GetSharedKeyResponse.fromObject(data.get_shared_key);
            }
            if (data.set_key != null) {
                message.set_key = SetKeyResponse.fromObject(data.set_key);
            }
            if (data.ratchet_key != null) {
                message.ratchet_key = RatchetKeyResponse.fromObject(data.ratchet_key);
            }
            if (data.get_key != null) {
                message.get_key = GetKeyResponse.fromObject(data.get_key);
            }
            return message;
        }
        toObject() {
            const data: {
                manager_set_enabled?: ReturnType<typeof E2eeManagerSetEnabledResponse.prototype.toObject>;
                manager_get_frame_cryptors?: ReturnType<typeof E2eeManagerGetFrameCryptorsResponse.prototype.toObject>;
                cryptor_set_enabled?: ReturnType<typeof FrameCryptorSetEnabledResponse.prototype.toObject>;
                cryptor_set_key_index?: ReturnType<typeof FrameCryptorSetKeyIndexResponse.prototype.toObject>;
                set_shared_key?: ReturnType<typeof SetSharedKeyResponse.prototype.toObject>;
                ratchet_shared_key?: ReturnType<typeof RatchetSharedKeyResponse.prototype.toObject>;
                get_shared_key?: ReturnType<typeof GetSharedKeyResponse.prototype.toObject>;
                set_key?: ReturnType<typeof SetKeyResponse.prototype.toObject>;
                ratchet_key?: ReturnType<typeof RatchetKeyResponse.prototype.toObject>;
                get_key?: ReturnType<typeof GetKeyResponse.prototype.toObject>;
            } = {};
            if (this.manager_set_enabled != null) {
                data.manager_set_enabled = this.manager_set_enabled.toObject();
            }
            if (this.manager_get_frame_cryptors != null) {
                data.manager_get_frame_cryptors = this.manager_get_frame_cryptors.toObject();
            }
            if (this.cryptor_set_enabled != null) {
                data.cryptor_set_enabled = this.cryptor_set_enabled.toObject();
            }
            if (this.cryptor_set_key_index != null) {
                data.cryptor_set_key_index = this.cryptor_set_key_index.toObject();
            }
            if (this.set_shared_key != null) {
                data.set_shared_key = this.set_shared_key.toObject();
            }
            if (this.ratchet_shared_key != null) {
                data.ratchet_shared_key = this.ratchet_shared_key.toObject();
            }
            if (this.get_shared_key != null) {
                data.get_shared_key = this.get_shared_key.toObject();
            }
            if (this.set_key != null) {
                data.set_key = this.set_key.toObject();
            }
            if (this.ratchet_key != null) {
                data.ratchet_key = this.ratchet_key.toObject();
            }
            if (this.get_key != null) {
                data.get_key = this.get_key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_manager_set_enabled)
                writer.writeMessage(1, this.manager_set_enabled, () => this.manager_set_enabled.serialize(writer));
            if (this.has_manager_get_frame_cryptors)
                writer.writeMessage(2, this.manager_get_frame_cryptors, () => this.manager_get_frame_cryptors.serialize(writer));
            if (this.has_cryptor_set_enabled)
                writer.writeMessage(3, this.cryptor_set_enabled, () => this.cryptor_set_enabled.serialize(writer));
            if (this.has_cryptor_set_key_index)
                writer.writeMessage(4, this.cryptor_set_key_index, () => this.cryptor_set_key_index.serialize(writer));
            if (this.has_set_shared_key)
                writer.writeMessage(5, this.set_shared_key, () => this.set_shared_key.serialize(writer));
            if (this.has_ratchet_shared_key)
                writer.writeMessage(6, this.ratchet_shared_key, () => this.ratchet_shared_key.serialize(writer));
            if (this.has_get_shared_key)
                writer.writeMessage(7, this.get_shared_key, () => this.get_shared_key.serialize(writer));
            if (this.has_set_key)
                writer.writeMessage(8, this.set_key, () => this.set_key.serialize(writer));
            if (this.has_ratchet_key)
                writer.writeMessage(9, this.ratchet_key, () => this.ratchet_key.serialize(writer));
            if (this.has_get_key)
                writer.writeMessage(10, this.get_key, () => this.get_key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.manager_set_enabled, () => message.manager_set_enabled = E2eeManagerSetEnabledResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.manager_get_frame_cryptors, () => message.manager_get_frame_cryptors = E2eeManagerGetFrameCryptorsResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.cryptor_set_enabled, () => message.cryptor_set_enabled = FrameCryptorSetEnabledResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.cryptor_set_key_index, () => message.cryptor_set_key_index = FrameCryptorSetKeyIndexResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.set_shared_key, () => message.set_shared_key = SetSharedKeyResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.ratchet_shared_key, () => message.ratchet_shared_key = RatchetSharedKeyResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.get_shared_key, () => message.get_shared_key = GetSharedKeyResponse.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.set_key, () => message.set_key = SetKeyResponse.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.ratchet_key, () => message.ratchet_key = RatchetKeyResponse.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.get_key, () => message.get_key = GetKeyResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeResponse {
            return E2eeResponse.deserialize(bytes);
        }
    }
}
