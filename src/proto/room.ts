/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.11
 * source: room.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./e2ee";
import * as dependency_2 from "./handle";
import * as dependency_3 from "./participant";
import * as dependency_4 from "./track";
import * as dependency_5 from "./video_frame";
import * as pb_1 from "google-protobuf";
export namespace livekit.proto {
    export enum ConnectionQuality {
        QUALITY_POOR = 0,
        QUALITY_GOOD = 1,
        QUALITY_EXCELLENT = 2
    }
    export enum ConnectionState {
        CONN_DISCONNECTED = 0,
        CONN_CONNECTED = 1,
        CONN_RECONNECTING = 2
    }
    export enum DataPacketKind {
        KIND_LOSSY = 0,
        KIND_RELIABLE = 1
    }
    export class ConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            token?: string;
            options?: RoomOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getWrapperField(this, RoomOptions, 3) as RoomOptions;
        }
        set options(value: RoomOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            url?: string;
            token?: string;
            options?: ReturnType<typeof RoomOptions.prototype.toObject>;
        }): ConnectRequest {
            const message = new ConnectRequest({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.options != null) {
                message.options = RoomOptions.fromObject(data.options);
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                token?: string;
                options?: ReturnType<typeof RoomOptions.prototype.toObject>;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.has_options)
                writer.writeMessage(3, this.options, () => this.options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.options, () => message.options = RoomOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectRequest {
            return ConnectRequest.deserialize(bytes);
        }
    }
    export class ConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): ConnectResponse {
            const message = new ConnectResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectResponse {
            return ConnectResponse.deserialize(bytes);
        }
    }
    export class ConnectCallback extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            async_id?: number;
            room?: OwnedRoom;
            local_participant?: dependency_3.livekit.proto.OwnedParticipant;
            participants?: ConnectCallback.ParticipantWithTracks[];
        } & (({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("local_participant" in data && data.local_participant != undefined) {
                    this.local_participant = data.local_participant;
                }
                if ("participants" in data && data.participants != undefined) {
                    this.participants = data.participants;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get room() {
            return pb_1.Message.getWrapperField(this, OwnedRoom, 3) as OwnedRoom;
        }
        set room(value: OwnedRoom) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_room() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get local_participant() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.OwnedParticipant, 4) as dependency_3.livekit.proto.OwnedParticipant;
        }
        set local_participant(value: dependency_3.livekit.proto.OwnedParticipant) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_local_participant() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get participants() {
            return pb_1.Message.getRepeatedWrapperField(this, ConnectCallback.ParticipantWithTracks, 5) as ConnectCallback.ParticipantWithTracks[];
        }
        set participants(value: ConnectCallback.ParticipantWithTracks[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            async_id?: number;
            error?: string;
            room?: ReturnType<typeof OwnedRoom.prototype.toObject>;
            local_participant?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
            participants?: ReturnType<typeof ConnectCallback.ParticipantWithTracks.prototype.toObject>[];
        }): ConnectCallback {
            const message = new ConnectCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.room != null) {
                message.room = OwnedRoom.fromObject(data.room);
            }
            if (data.local_participant != null) {
                message.local_participant = dependency_3.livekit.proto.OwnedParticipant.fromObject(data.local_participant);
            }
            if (data.participants != null) {
                message.participants = data.participants.map(item => ConnectCallback.ParticipantWithTracks.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
                error?: string;
                room?: ReturnType<typeof OwnedRoom.prototype.toObject>;
                local_participant?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
                participants?: ReturnType<typeof ConnectCallback.ParticipantWithTracks.prototype.toObject>[];
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.room != null) {
                data.room = this.room.toObject();
            }
            if (this.local_participant != null) {
                data.local_participant = this.local_participant.toObject();
            }
            if (this.participants != null) {
                data.participants = this.participants.map((item: ConnectCallback.ParticipantWithTracks) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (this.has_error)
                writer.writeString(2, this.error);
            if (this.has_room)
                writer.writeMessage(3, this.room, () => this.room.serialize(writer));
            if (this.has_local_participant)
                writer.writeMessage(4, this.local_participant, () => this.local_participant.serialize(writer));
            if (this.participants.length)
                writer.writeRepeatedMessage(5, this.participants, (item: ConnectCallback.ParticipantWithTracks) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.room, () => message.room = OwnedRoom.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.local_participant, () => message.local_participant = dependency_3.livekit.proto.OwnedParticipant.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.participants, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ConnectCallback.ParticipantWithTracks.deserialize(reader), ConnectCallback.ParticipantWithTracks));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectCallback {
            return ConnectCallback.deserialize(bytes);
        }
    }
    export namespace ConnectCallback {
        export class ParticipantWithTracks extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                participant?: dependency_3.livekit.proto.OwnedParticipant;
                publications?: dependency_4.livekit.proto.OwnedTrackPublication[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("participant" in data && data.participant != undefined) {
                        this.participant = data.participant;
                    }
                    if ("publications" in data && data.publications != undefined) {
                        this.publications = data.publications;
                    }
                }
            }
            get participant() {
                return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.OwnedParticipant, 1) as dependency_3.livekit.proto.OwnedParticipant;
            }
            set participant(value: dependency_3.livekit.proto.OwnedParticipant) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_participant() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get publications() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.livekit.proto.OwnedTrackPublication, 2) as dependency_4.livekit.proto.OwnedTrackPublication[];
            }
            set publications(value: dependency_4.livekit.proto.OwnedTrackPublication[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                participant?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
                publications?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>[];
            }): ParticipantWithTracks {
                const message = new ParticipantWithTracks({});
                if (data.participant != null) {
                    message.participant = dependency_3.livekit.proto.OwnedParticipant.fromObject(data.participant);
                }
                if (data.publications != null) {
                    message.publications = data.publications.map(item => dependency_4.livekit.proto.OwnedTrackPublication.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    participant?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
                    publications?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>[];
                } = {};
                if (this.participant != null) {
                    data.participant = this.participant.toObject();
                }
                if (this.publications != null) {
                    data.publications = this.publications.map((item: dependency_4.livekit.proto.OwnedTrackPublication) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_participant)
                    writer.writeMessage(1, this.participant, () => this.participant.serialize(writer));
                if (this.publications.length)
                    writer.writeRepeatedMessage(2, this.publications, (item: dependency_4.livekit.proto.OwnedTrackPublication) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantWithTracks {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantWithTracks();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.participant, () => message.participant = dependency_3.livekit.proto.OwnedParticipant.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.publications, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.livekit.proto.OwnedTrackPublication.deserialize(reader), dependency_4.livekit.proto.OwnedTrackPublication));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ParticipantWithTracks {
                return ParticipantWithTracks.deserialize(bytes);
            }
        }
    }
    export class DisconnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_handle" in data && data.room_handle != undefined) {
                    this.room_handle = data.room_handle;
                }
            }
        }
        get room_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_handle?: number;
        }): DisconnectRequest {
            const message = new DisconnectRequest({});
            if (data.room_handle != null) {
                message.room_handle = data.room_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                room_handle?: number;
            } = {};
            if (this.room_handle != null) {
                data.room_handle = this.room_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_handle != 0)
                writer.writeUint64(1, this.room_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisconnectRequest {
            return DisconnectRequest.deserialize(bytes);
        }
    }
    export class DisconnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): DisconnectResponse {
            const message = new DisconnectResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisconnectResponse {
            return DisconnectResponse.deserialize(bytes);
        }
    }
    export class DisconnectCallback extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): DisconnectCallback {
            const message = new DisconnectCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisconnectCallback {
            return DisconnectCallback.deserialize(bytes);
        }
    }
    export class PublishTrackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local_participant_handle?: number;
            track_handle?: number;
            options?: TrackPublishOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local_participant_handle" in data && data.local_participant_handle != undefined) {
                    this.local_participant_handle = data.local_participant_handle;
                }
                if ("track_handle" in data && data.track_handle != undefined) {
                    this.track_handle = data.track_handle;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get local_participant_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set local_participant_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set track_handle(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getWrapperField(this, TrackPublishOptions, 3) as TrackPublishOptions;
        }
        set options(value: TrackPublishOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            local_participant_handle?: number;
            track_handle?: number;
            options?: ReturnType<typeof TrackPublishOptions.prototype.toObject>;
        }): PublishTrackRequest {
            const message = new PublishTrackRequest({});
            if (data.local_participant_handle != null) {
                message.local_participant_handle = data.local_participant_handle;
            }
            if (data.track_handle != null) {
                message.track_handle = data.track_handle;
            }
            if (data.options != null) {
                message.options = TrackPublishOptions.fromObject(data.options);
            }
            return message;
        }
        toObject() {
            const data: {
                local_participant_handle?: number;
                track_handle?: number;
                options?: ReturnType<typeof TrackPublishOptions.prototype.toObject>;
            } = {};
            if (this.local_participant_handle != null) {
                data.local_participant_handle = this.local_participant_handle;
            }
            if (this.track_handle != null) {
                data.track_handle = this.track_handle;
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local_participant_handle != 0)
                writer.writeUint64(1, this.local_participant_handle);
            if (this.track_handle != 0)
                writer.writeUint64(2, this.track_handle);
            if (this.has_options)
                writer.writeMessage(3, this.options, () => this.options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishTrackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishTrackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local_participant_handle = reader.readUint64();
                        break;
                    case 2:
                        message.track_handle = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.options, () => message.options = TrackPublishOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishTrackRequest {
            return PublishTrackRequest.deserialize(bytes);
        }
    }
    export class PublishTrackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): PublishTrackResponse {
            const message = new PublishTrackResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishTrackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishTrackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishTrackResponse {
            return PublishTrackResponse.deserialize(bytes);
        }
    }
    export class PublishTrackCallback extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            async_id?: number;
            publication?: dependency_4.livekit.proto.OwnedTrackPublication;
        } & (({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("publication" in data && data.publication != undefined) {
                    this.publication = data.publication;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get publication() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.OwnedTrackPublication, 3) as dependency_4.livekit.proto.OwnedTrackPublication;
        }
        set publication(value: dependency_4.livekit.proto.OwnedTrackPublication) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_publication() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            async_id?: number;
            error?: string;
            publication?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>;
        }): PublishTrackCallback {
            const message = new PublishTrackCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.publication != null) {
                message.publication = dependency_4.livekit.proto.OwnedTrackPublication.fromObject(data.publication);
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
                error?: string;
                publication?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.publication != null) {
                data.publication = this.publication.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (this.has_error)
                writer.writeString(2, this.error);
            if (this.has_publication)
                writer.writeMessage(3, this.publication, () => this.publication.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishTrackCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishTrackCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.publication, () => message.publication = dependency_4.livekit.proto.OwnedTrackPublication.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishTrackCallback {
            return PublishTrackCallback.deserialize(bytes);
        }
    }
    export class UnpublishTrackRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local_participant_handle?: number;
            track_sid?: string;
            stop_on_unpublish?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local_participant_handle" in data && data.local_participant_handle != undefined) {
                    this.local_participant_handle = data.local_participant_handle;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
                if ("stop_on_unpublish" in data && data.stop_on_unpublish != undefined) {
                    this.stop_on_unpublish = data.stop_on_unpublish;
                }
            }
        }
        get local_participant_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set local_participant_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stop_on_unpublish() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set stop_on_unpublish(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            local_participant_handle?: number;
            track_sid?: string;
            stop_on_unpublish?: boolean;
        }): UnpublishTrackRequest {
            const message = new UnpublishTrackRequest({});
            if (data.local_participant_handle != null) {
                message.local_participant_handle = data.local_participant_handle;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            if (data.stop_on_unpublish != null) {
                message.stop_on_unpublish = data.stop_on_unpublish;
            }
            return message;
        }
        toObject() {
            const data: {
                local_participant_handle?: number;
                track_sid?: string;
                stop_on_unpublish?: boolean;
            } = {};
            if (this.local_participant_handle != null) {
                data.local_participant_handle = this.local_participant_handle;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            if (this.stop_on_unpublish != null) {
                data.stop_on_unpublish = this.stop_on_unpublish;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local_participant_handle != 0)
                writer.writeUint64(1, this.local_participant_handle);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (this.stop_on_unpublish != false)
                writer.writeBool(3, this.stop_on_unpublish);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnpublishTrackRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnpublishTrackRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local_participant_handle = reader.readUint64();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    case 3:
                        message.stop_on_unpublish = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnpublishTrackRequest {
            return UnpublishTrackRequest.deserialize(bytes);
        }
    }
    export class UnpublishTrackResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): UnpublishTrackResponse {
            const message = new UnpublishTrackResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnpublishTrackResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnpublishTrackResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnpublishTrackResponse {
            return UnpublishTrackResponse.deserialize(bytes);
        }
    }
    export class UnpublishTrackCallback extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            async_id?: number;
        } & (({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            async_id?: number;
            error?: string;
        }): UnpublishTrackCallback {
            const message = new UnpublishTrackCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
                error?: string;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (this.has_error)
                writer.writeString(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnpublishTrackCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnpublishTrackCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnpublishTrackCallback {
            return UnpublishTrackCallback.deserialize(bytes);
        }
    }
    export class PublishDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local_participant_handle?: number;
            data_ptr?: number;
            data_len?: number;
            kind?: DataPacketKind;
            destination_sids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local_participant_handle" in data && data.local_participant_handle != undefined) {
                    this.local_participant_handle = data.local_participant_handle;
                }
                if ("data_ptr" in data && data.data_ptr != undefined) {
                    this.data_ptr = data.data_ptr;
                }
                if ("data_len" in data && data.data_len != undefined) {
                    this.data_len = data.data_len;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("destination_sids" in data && data.destination_sids != undefined) {
                    this.destination_sids = data.destination_sids;
                }
            }
        }
        get local_participant_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set local_participant_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set data_ptr(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data_len() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set data_len(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 4, DataPacketKind.KIND_LOSSY) as DataPacketKind;
        }
        set kind(value: DataPacketKind) {
            pb_1.Message.setField(this, 4, value);
        }
        get destination_sids() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set destination_sids(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            local_participant_handle?: number;
            data_ptr?: number;
            data_len?: number;
            kind?: DataPacketKind;
            destination_sids?: string[];
        }): PublishDataRequest {
            const message = new PublishDataRequest({});
            if (data.local_participant_handle != null) {
                message.local_participant_handle = data.local_participant_handle;
            }
            if (data.data_ptr != null) {
                message.data_ptr = data.data_ptr;
            }
            if (data.data_len != null) {
                message.data_len = data.data_len;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.destination_sids != null) {
                message.destination_sids = data.destination_sids;
            }
            return message;
        }
        toObject() {
            const data: {
                local_participant_handle?: number;
                data_ptr?: number;
                data_len?: number;
                kind?: DataPacketKind;
                destination_sids?: string[];
            } = {};
            if (this.local_participant_handle != null) {
                data.local_participant_handle = this.local_participant_handle;
            }
            if (this.data_ptr != null) {
                data.data_ptr = this.data_ptr;
            }
            if (this.data_len != null) {
                data.data_len = this.data_len;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.destination_sids != null) {
                data.destination_sids = this.destination_sids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local_participant_handle != 0)
                writer.writeUint64(1, this.local_participant_handle);
            if (this.data_ptr != 0)
                writer.writeUint64(2, this.data_ptr);
            if (this.data_len != 0)
                writer.writeUint64(3, this.data_len);
            if (this.kind != DataPacketKind.KIND_LOSSY)
                writer.writeEnum(4, this.kind);
            if (this.destination_sids.length)
                writer.writeRepeatedString(5, this.destination_sids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local_participant_handle = reader.readUint64();
                        break;
                    case 2:
                        message.data_ptr = reader.readUint64();
                        break;
                    case 3:
                        message.data_len = reader.readUint64();
                        break;
                    case 4:
                        message.kind = reader.readEnum();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishDataRequest {
            return PublishDataRequest.deserialize(bytes);
        }
    }
    export class PublishDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_id?: number;
        }): PublishDataResponse {
            const message = new PublishDataResponse({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishDataResponse {
            return PublishDataResponse.deserialize(bytes);
        }
    }
    export class PublishDataCallback extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            async_id?: number;
        } & (({
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_id" in data && data.async_id != undefined) {
                    this.async_id = data.async_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get async_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set async_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            async_id?: number;
            error?: string;
        }): PublishDataCallback {
            const message = new PublishDataCallback({});
            if (data.async_id != null) {
                message.async_id = data.async_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                async_id?: number;
                error?: string;
            } = {};
            if (this.async_id != null) {
                data.async_id = this.async_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_id != 0)
                writer.writeUint64(1, this.async_id);
            if (this.has_error)
                writer.writeString(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublishDataCallback {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublishDataCallback();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_id = reader.readUint64();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublishDataCallback {
            return PublishDataCallback.deserialize(bytes);
        }
    }
    export class SetSubscribedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscribe?: boolean;
            publication_handle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscribe" in data && data.subscribe != undefined) {
                    this.subscribe = data.subscribe;
                }
                if ("publication_handle" in data && data.publication_handle != undefined) {
                    this.publication_handle = data.publication_handle;
                }
            }
        }
        get subscribe() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set subscribe(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get publication_handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set publication_handle(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            subscribe?: boolean;
            publication_handle?: number;
        }): SetSubscribedRequest {
            const message = new SetSubscribedRequest({});
            if (data.subscribe != null) {
                message.subscribe = data.subscribe;
            }
            if (data.publication_handle != null) {
                message.publication_handle = data.publication_handle;
            }
            return message;
        }
        toObject() {
            const data: {
                subscribe?: boolean;
                publication_handle?: number;
            } = {};
            if (this.subscribe != null) {
                data.subscribe = this.subscribe;
            }
            if (this.publication_handle != null) {
                data.publication_handle = this.publication_handle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subscribe != false)
                writer.writeBool(1, this.subscribe);
            if (this.publication_handle != 0)
                writer.writeUint64(2, this.publication_handle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSubscribedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSubscribedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subscribe = reader.readBool();
                        break;
                    case 2:
                        message.publication_handle = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSubscribedRequest {
            return SetSubscribedRequest.deserialize(bytes);
        }
    }
    export class SetSubscribedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SetSubscribedResponse {
            const message = new SetSubscribedResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSubscribedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSubscribedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSubscribedResponse {
            return SetSubscribedResponse.deserialize(bytes);
        }
    }
    export class VideoEncoding extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_bitrate?: number;
            max_framerate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_bitrate" in data && data.max_bitrate != undefined) {
                    this.max_bitrate = data.max_bitrate;
                }
                if ("max_framerate" in data && data.max_framerate != undefined) {
                    this.max_framerate = data.max_framerate;
                }
            }
        }
        get max_bitrate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_bitrate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_framerate() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_framerate(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            max_bitrate?: number;
            max_framerate?: number;
        }): VideoEncoding {
            const message = new VideoEncoding({});
            if (data.max_bitrate != null) {
                message.max_bitrate = data.max_bitrate;
            }
            if (data.max_framerate != null) {
                message.max_framerate = data.max_framerate;
            }
            return message;
        }
        toObject() {
            const data: {
                max_bitrate?: number;
                max_framerate?: number;
            } = {};
            if (this.max_bitrate != null) {
                data.max_bitrate = this.max_bitrate;
            }
            if (this.max_framerate != null) {
                data.max_framerate = this.max_framerate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_bitrate != 0)
                writer.writeUint64(1, this.max_bitrate);
            if (this.max_framerate != 0)
                writer.writeDouble(2, this.max_framerate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoEncoding {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoEncoding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_bitrate = reader.readUint64();
                        break;
                    case 2:
                        message.max_framerate = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoEncoding {
            return VideoEncoding.deserialize(bytes);
        }
    }
    export class AudioEncoding extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_bitrate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_bitrate" in data && data.max_bitrate != undefined) {
                    this.max_bitrate = data.max_bitrate;
                }
            }
        }
        get max_bitrate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_bitrate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            max_bitrate?: number;
        }): AudioEncoding {
            const message = new AudioEncoding({});
            if (data.max_bitrate != null) {
                message.max_bitrate = data.max_bitrate;
            }
            return message;
        }
        toObject() {
            const data: {
                max_bitrate?: number;
            } = {};
            if (this.max_bitrate != null) {
                data.max_bitrate = this.max_bitrate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_bitrate != 0)
                writer.writeUint64(1, this.max_bitrate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioEncoding {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioEncoding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_bitrate = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioEncoding {
            return AudioEncoding.deserialize(bytes);
        }
    }
    export class TrackPublishOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            video_encoding?: VideoEncoding;
            audio_encoding?: AudioEncoding;
            video_codec?: dependency_5.livekit.proto.VideoCodec;
            dtx?: boolean;
            red?: boolean;
            simulcast?: boolean;
            source?: dependency_4.livekit.proto.TrackSource;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("video_encoding" in data && data.video_encoding != undefined) {
                    this.video_encoding = data.video_encoding;
                }
                if ("audio_encoding" in data && data.audio_encoding != undefined) {
                    this.audio_encoding = data.audio_encoding;
                }
                if ("video_codec" in data && data.video_codec != undefined) {
                    this.video_codec = data.video_codec;
                }
                if ("dtx" in data && data.dtx != undefined) {
                    this.dtx = data.dtx;
                }
                if ("red" in data && data.red != undefined) {
                    this.red = data.red;
                }
                if ("simulcast" in data && data.simulcast != undefined) {
                    this.simulcast = data.simulcast;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
            }
        }
        get video_encoding() {
            return pb_1.Message.getWrapperField(this, VideoEncoding, 1) as VideoEncoding;
        }
        set video_encoding(value: VideoEncoding) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_video_encoding() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get audio_encoding() {
            return pb_1.Message.getWrapperField(this, AudioEncoding, 2) as AudioEncoding;
        }
        set audio_encoding(value: AudioEncoding) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_audio_encoding() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get video_codec() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_5.livekit.proto.VideoCodec.VP8) as dependency_5.livekit.proto.VideoCodec;
        }
        set video_codec(value: dependency_5.livekit.proto.VideoCodec) {
            pb_1.Message.setField(this, 3, value);
        }
        get dtx() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set dtx(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get red() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set red(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get simulcast() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set simulcast(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_4.livekit.proto.TrackSource.SOURCE_UNKNOWN) as dependency_4.livekit.proto.TrackSource;
        }
        set source(value: dependency_4.livekit.proto.TrackSource) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            video_encoding?: ReturnType<typeof VideoEncoding.prototype.toObject>;
            audio_encoding?: ReturnType<typeof AudioEncoding.prototype.toObject>;
            video_codec?: dependency_5.livekit.proto.VideoCodec;
            dtx?: boolean;
            red?: boolean;
            simulcast?: boolean;
            source?: dependency_4.livekit.proto.TrackSource;
        }): TrackPublishOptions {
            const message = new TrackPublishOptions({});
            if (data.video_encoding != null) {
                message.video_encoding = VideoEncoding.fromObject(data.video_encoding);
            }
            if (data.audio_encoding != null) {
                message.audio_encoding = AudioEncoding.fromObject(data.audio_encoding);
            }
            if (data.video_codec != null) {
                message.video_codec = data.video_codec;
            }
            if (data.dtx != null) {
                message.dtx = data.dtx;
            }
            if (data.red != null) {
                message.red = data.red;
            }
            if (data.simulcast != null) {
                message.simulcast = data.simulcast;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            return message;
        }
        toObject() {
            const data: {
                video_encoding?: ReturnType<typeof VideoEncoding.prototype.toObject>;
                audio_encoding?: ReturnType<typeof AudioEncoding.prototype.toObject>;
                video_codec?: dependency_5.livekit.proto.VideoCodec;
                dtx?: boolean;
                red?: boolean;
                simulcast?: boolean;
                source?: dependency_4.livekit.proto.TrackSource;
            } = {};
            if (this.video_encoding != null) {
                data.video_encoding = this.video_encoding.toObject();
            }
            if (this.audio_encoding != null) {
                data.audio_encoding = this.audio_encoding.toObject();
            }
            if (this.video_codec != null) {
                data.video_codec = this.video_codec;
            }
            if (this.dtx != null) {
                data.dtx = this.dtx;
            }
            if (this.red != null) {
                data.red = this.red;
            }
            if (this.simulcast != null) {
                data.simulcast = this.simulcast;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_video_encoding)
                writer.writeMessage(1, this.video_encoding, () => this.video_encoding.serialize(writer));
            if (this.has_audio_encoding)
                writer.writeMessage(2, this.audio_encoding, () => this.audio_encoding.serialize(writer));
            if (this.video_codec != dependency_5.livekit.proto.VideoCodec.VP8)
                writer.writeEnum(3, this.video_codec);
            if (this.dtx != false)
                writer.writeBool(4, this.dtx);
            if (this.red != false)
                writer.writeBool(5, this.red);
            if (this.simulcast != false)
                writer.writeBool(6, this.simulcast);
            if (this.source != dependency_4.livekit.proto.TrackSource.SOURCE_UNKNOWN)
                writer.writeEnum(7, this.source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackPublishOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackPublishOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.video_encoding, () => message.video_encoding = VideoEncoding.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.audio_encoding, () => message.audio_encoding = AudioEncoding.deserialize(reader));
                        break;
                    case 3:
                        message.video_codec = reader.readEnum();
                        break;
                    case 4:
                        message.dtx = reader.readBool();
                        break;
                    case 5:
                        message.red = reader.readBool();
                        break;
                    case 6:
                        message.simulcast = reader.readBool();
                        break;
                    case 7:
                        message.source = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackPublishOptions {
            return TrackPublishOptions.deserialize(bytes);
        }
    }
    export class RoomOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            auto_subscribe?: boolean;
            adaptive_stream?: boolean;
            dynacast?: boolean;
        } & (({
            e2ee?: dependency_1.livekit.proto.E2eeOptions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auto_subscribe" in data && data.auto_subscribe != undefined) {
                    this.auto_subscribe = data.auto_subscribe;
                }
                if ("adaptive_stream" in data && data.adaptive_stream != undefined) {
                    this.adaptive_stream = data.adaptive_stream;
                }
                if ("dynacast" in data && data.dynacast != undefined) {
                    this.dynacast = data.dynacast;
                }
                if ("e2ee" in data && data.e2ee != undefined) {
                    this.e2ee = data.e2ee;
                }
            }
        }
        get auto_subscribe() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set auto_subscribe(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get adaptive_stream() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set adaptive_stream(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get dynacast() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set dynacast(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get e2ee() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.proto.E2eeOptions, 4) as dependency_1.livekit.proto.E2eeOptions;
        }
        set e2ee(value: dependency_1.livekit.proto.E2eeOptions) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_e2ee() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _e2ee() {
            const cases: {
                [index: number]: "none" | "e2ee";
            } = {
                0: "none",
                4: "e2ee"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            auto_subscribe?: boolean;
            adaptive_stream?: boolean;
            dynacast?: boolean;
            e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeOptions.prototype.toObject>;
        }): RoomOptions {
            const message = new RoomOptions({});
            if (data.auto_subscribe != null) {
                message.auto_subscribe = data.auto_subscribe;
            }
            if (data.adaptive_stream != null) {
                message.adaptive_stream = data.adaptive_stream;
            }
            if (data.dynacast != null) {
                message.dynacast = data.dynacast;
            }
            if (data.e2ee != null) {
                message.e2ee = dependency_1.livekit.proto.E2eeOptions.fromObject(data.e2ee);
            }
            return message;
        }
        toObject() {
            const data: {
                auto_subscribe?: boolean;
                adaptive_stream?: boolean;
                dynacast?: boolean;
                e2ee?: ReturnType<typeof dependency_1.livekit.proto.E2eeOptions.prototype.toObject>;
            } = {};
            if (this.auto_subscribe != null) {
                data.auto_subscribe = this.auto_subscribe;
            }
            if (this.adaptive_stream != null) {
                data.adaptive_stream = this.adaptive_stream;
            }
            if (this.dynacast != null) {
                data.dynacast = this.dynacast;
            }
            if (this.e2ee != null) {
                data.e2ee = this.e2ee.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.auto_subscribe != false)
                writer.writeBool(1, this.auto_subscribe);
            if (this.adaptive_stream != false)
                writer.writeBool(2, this.adaptive_stream);
            if (this.dynacast != false)
                writer.writeBool(3, this.dynacast);
            if (this.has_e2ee)
                writer.writeMessage(4, this.e2ee, () => this.e2ee.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.auto_subscribe = reader.readBool();
                        break;
                    case 2:
                        message.adaptive_stream = reader.readBool();
                        break;
                    case 3:
                        message.dynacast = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.e2ee, () => message.e2ee = dependency_1.livekit.proto.E2eeOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomOptions {
            return RoomOptions.deserialize(bytes);
        }
    }
    export class BufferInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_ptr?: number;
            data_len?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_ptr" in data && data.data_ptr != undefined) {
                    this.data_ptr = data.data_ptr;
                }
                if ("data_len" in data && data.data_len != undefined) {
                    this.data_len = data.data_len;
                }
            }
        }
        get data_ptr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_ptr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_len() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set data_len(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            data_ptr?: number;
            data_len?: number;
        }): BufferInfo {
            const message = new BufferInfo({});
            if (data.data_ptr != null) {
                message.data_ptr = data.data_ptr;
            }
            if (data.data_len != null) {
                message.data_len = data.data_len;
            }
            return message;
        }
        toObject() {
            const data: {
                data_ptr?: number;
                data_len?: number;
            } = {};
            if (this.data_ptr != null) {
                data.data_ptr = this.data_ptr;
            }
            if (this.data_len != null) {
                data.data_len = this.data_len;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_ptr != 0)
                writer.writeUint64(1, this.data_ptr);
            if (this.data_len != 0)
                writer.writeUint64(2, this.data_len);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BufferInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BufferInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_ptr = reader.readUint64();
                        break;
                    case 2:
                        message.data_len = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BufferInfo {
            return BufferInfo.deserialize(bytes);
        }
    }
    export class OwnedBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_2.livekit.proto.FfiOwnedHandle;
            data?: BufferInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.FfiOwnedHandle, 1) as dependency_2.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_2.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, BufferInfo, 2) as BufferInfo;
        }
        set data(value: BufferInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            data?: ReturnType<typeof BufferInfo.prototype.toObject>;
        }): OwnedBuffer {
            const message = new OwnedBuffer({});
            if (data.handle != null) {
                message.handle = dependency_2.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.data != null) {
                message.data = BufferInfo.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                data?: ReturnType<typeof BufferInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedBuffer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedBuffer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_2.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = BufferInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedBuffer {
            return OwnedBuffer.deserialize(bytes);
        }
    }
    export class RoomEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21]];
        constructor(data?: any[] | ({
            room_handle?: number;
        } & (({
            participant_connected?: ParticipantConnected;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: ParticipantDisconnected;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: LocalTrackPublished;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: LocalTrackUnpublished;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: TrackPublished;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: TrackUnpublished;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: TrackSubscribed;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: TrackUnsubscribed;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: TrackSubscriptionFailed;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: TrackMuted;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: TrackUnmuted;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: ActiveSpeakersChanged;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: ConnectionQualityChanged;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: DataReceived;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: ConnectionStateChanged;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: Disconnected;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: Reconnecting;
            reconnected?: never;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: Reconnected;
            e2ee_state_changed?: never;
        } | {
            participant_connected?: never;
            participant_disconnected?: never;
            local_track_published?: never;
            local_track_unpublished?: never;
            track_published?: never;
            track_unpublished?: never;
            track_subscribed?: never;
            track_unsubscribed?: never;
            track_subscription_failed?: never;
            track_muted?: never;
            track_unmuted?: never;
            active_speakers_changed?: never;
            connection_quality_changed?: never;
            data_received?: never;
            connection_state_changed?: never;
            disconnected?: never;
            reconnecting?: never;
            reconnected?: never;
            e2ee_state_changed?: E2eeStateChanged;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_handle" in data && data.room_handle != undefined) {
                    this.room_handle = data.room_handle;
                }
                if ("participant_connected" in data && data.participant_connected != undefined) {
                    this.participant_connected = data.participant_connected;
                }
                if ("participant_disconnected" in data && data.participant_disconnected != undefined) {
                    this.participant_disconnected = data.participant_disconnected;
                }
                if ("local_track_published" in data && data.local_track_published != undefined) {
                    this.local_track_published = data.local_track_published;
                }
                if ("local_track_unpublished" in data && data.local_track_unpublished != undefined) {
                    this.local_track_unpublished = data.local_track_unpublished;
                }
                if ("track_published" in data && data.track_published != undefined) {
                    this.track_published = data.track_published;
                }
                if ("track_unpublished" in data && data.track_unpublished != undefined) {
                    this.track_unpublished = data.track_unpublished;
                }
                if ("track_subscribed" in data && data.track_subscribed != undefined) {
                    this.track_subscribed = data.track_subscribed;
                }
                if ("track_unsubscribed" in data && data.track_unsubscribed != undefined) {
                    this.track_unsubscribed = data.track_unsubscribed;
                }
                if ("track_subscription_failed" in data && data.track_subscription_failed != undefined) {
                    this.track_subscription_failed = data.track_subscription_failed;
                }
                if ("track_muted" in data && data.track_muted != undefined) {
                    this.track_muted = data.track_muted;
                }
                if ("track_unmuted" in data && data.track_unmuted != undefined) {
                    this.track_unmuted = data.track_unmuted;
                }
                if ("active_speakers_changed" in data && data.active_speakers_changed != undefined) {
                    this.active_speakers_changed = data.active_speakers_changed;
                }
                if ("connection_quality_changed" in data && data.connection_quality_changed != undefined) {
                    this.connection_quality_changed = data.connection_quality_changed;
                }
                if ("data_received" in data && data.data_received != undefined) {
                    this.data_received = data.data_received;
                }
                if ("connection_state_changed" in data && data.connection_state_changed != undefined) {
                    this.connection_state_changed = data.connection_state_changed;
                }
                if ("disconnected" in data && data.disconnected != undefined) {
                    this.disconnected = data.disconnected;
                }
                if ("reconnecting" in data && data.reconnecting != undefined) {
                    this.reconnecting = data.reconnecting;
                }
                if ("reconnected" in data && data.reconnected != undefined) {
                    this.reconnected = data.reconnected;
                }
                if ("e2ee_state_changed" in data && data.e2ee_state_changed != undefined) {
                    this.e2ee_state_changed = data.e2ee_state_changed;
                }
            }
        }
        get room_handle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set room_handle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get participant_connected() {
            return pb_1.Message.getWrapperField(this, ParticipantConnected, 2) as ParticipantConnected;
        }
        set participant_connected(value: ParticipantConnected) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_participant_connected() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get participant_disconnected() {
            return pb_1.Message.getWrapperField(this, ParticipantDisconnected, 3) as ParticipantDisconnected;
        }
        set participant_disconnected(value: ParticipantDisconnected) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_participant_disconnected() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get local_track_published() {
            return pb_1.Message.getWrapperField(this, LocalTrackPublished, 4) as LocalTrackPublished;
        }
        set local_track_published(value: LocalTrackPublished) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_local_track_published() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get local_track_unpublished() {
            return pb_1.Message.getWrapperField(this, LocalTrackUnpublished, 5) as LocalTrackUnpublished;
        }
        set local_track_unpublished(value: LocalTrackUnpublished) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_local_track_unpublished() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get track_published() {
            return pb_1.Message.getWrapperField(this, TrackPublished, 6) as TrackPublished;
        }
        set track_published(value: TrackPublished) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_track_published() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get track_unpublished() {
            return pb_1.Message.getWrapperField(this, TrackUnpublished, 7) as TrackUnpublished;
        }
        set track_unpublished(value: TrackUnpublished) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_track_unpublished() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get track_subscribed() {
            return pb_1.Message.getWrapperField(this, TrackSubscribed, 8) as TrackSubscribed;
        }
        set track_subscribed(value: TrackSubscribed) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_track_subscribed() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get track_unsubscribed() {
            return pb_1.Message.getWrapperField(this, TrackUnsubscribed, 9) as TrackUnsubscribed;
        }
        set track_unsubscribed(value: TrackUnsubscribed) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_track_unsubscribed() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get track_subscription_failed() {
            return pb_1.Message.getWrapperField(this, TrackSubscriptionFailed, 10) as TrackSubscriptionFailed;
        }
        set track_subscription_failed(value: TrackSubscriptionFailed) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_track_subscription_failed() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get track_muted() {
            return pb_1.Message.getWrapperField(this, TrackMuted, 11) as TrackMuted;
        }
        set track_muted(value: TrackMuted) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_track_muted() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get track_unmuted() {
            return pb_1.Message.getWrapperField(this, TrackUnmuted, 12) as TrackUnmuted;
        }
        set track_unmuted(value: TrackUnmuted) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_track_unmuted() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get active_speakers_changed() {
            return pb_1.Message.getWrapperField(this, ActiveSpeakersChanged, 13) as ActiveSpeakersChanged;
        }
        set active_speakers_changed(value: ActiveSpeakersChanged) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_active_speakers_changed() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get connection_quality_changed() {
            return pb_1.Message.getWrapperField(this, ConnectionQualityChanged, 14) as ConnectionQualityChanged;
        }
        set connection_quality_changed(value: ConnectionQualityChanged) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_connection_quality_changed() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get data_received() {
            return pb_1.Message.getWrapperField(this, DataReceived, 15) as DataReceived;
        }
        set data_received(value: DataReceived) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_data_received() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get connection_state_changed() {
            return pb_1.Message.getWrapperField(this, ConnectionStateChanged, 16) as ConnectionStateChanged;
        }
        set connection_state_changed(value: ConnectionStateChanged) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_connection_state_changed() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get disconnected() {
            return pb_1.Message.getWrapperField(this, Disconnected, 18) as Disconnected;
        }
        set disconnected(value: Disconnected) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_disconnected() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get reconnecting() {
            return pb_1.Message.getWrapperField(this, Reconnecting, 19) as Reconnecting;
        }
        set reconnecting(value: Reconnecting) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_reconnecting() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get reconnected() {
            return pb_1.Message.getWrapperField(this, Reconnected, 20) as Reconnected;
        }
        set reconnected(value: Reconnected) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_reconnected() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get e2ee_state_changed() {
            return pb_1.Message.getWrapperField(this, E2eeStateChanged, 21) as E2eeStateChanged;
        }
        set e2ee_state_changed(value: E2eeStateChanged) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_e2ee_state_changed() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "participant_connected" | "participant_disconnected" | "local_track_published" | "local_track_unpublished" | "track_published" | "track_unpublished" | "track_subscribed" | "track_unsubscribed" | "track_subscription_failed" | "track_muted" | "track_unmuted" | "active_speakers_changed" | "connection_quality_changed" | "data_received" | "connection_state_changed" | "disconnected" | "reconnecting" | "reconnected" | "e2ee_state_changed";
            } = {
                0: "none",
                2: "participant_connected",
                3: "participant_disconnected",
                4: "local_track_published",
                5: "local_track_unpublished",
                6: "track_published",
                7: "track_unpublished",
                8: "track_subscribed",
                9: "track_unsubscribed",
                10: "track_subscription_failed",
                11: "track_muted",
                12: "track_unmuted",
                13: "active_speakers_changed",
                14: "connection_quality_changed",
                15: "data_received",
                16: "connection_state_changed",
                18: "disconnected",
                19: "reconnecting",
                20: "reconnected",
                21: "e2ee_state_changed"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21])];
        }
        static fromObject(data: {
            room_handle?: number;
            participant_connected?: ReturnType<typeof ParticipantConnected.prototype.toObject>;
            participant_disconnected?: ReturnType<typeof ParticipantDisconnected.prototype.toObject>;
            local_track_published?: ReturnType<typeof LocalTrackPublished.prototype.toObject>;
            local_track_unpublished?: ReturnType<typeof LocalTrackUnpublished.prototype.toObject>;
            track_published?: ReturnType<typeof TrackPublished.prototype.toObject>;
            track_unpublished?: ReturnType<typeof TrackUnpublished.prototype.toObject>;
            track_subscribed?: ReturnType<typeof TrackSubscribed.prototype.toObject>;
            track_unsubscribed?: ReturnType<typeof TrackUnsubscribed.prototype.toObject>;
            track_subscription_failed?: ReturnType<typeof TrackSubscriptionFailed.prototype.toObject>;
            track_muted?: ReturnType<typeof TrackMuted.prototype.toObject>;
            track_unmuted?: ReturnType<typeof TrackUnmuted.prototype.toObject>;
            active_speakers_changed?: ReturnType<typeof ActiveSpeakersChanged.prototype.toObject>;
            connection_quality_changed?: ReturnType<typeof ConnectionQualityChanged.prototype.toObject>;
            data_received?: ReturnType<typeof DataReceived.prototype.toObject>;
            connection_state_changed?: ReturnType<typeof ConnectionStateChanged.prototype.toObject>;
            disconnected?: ReturnType<typeof Disconnected.prototype.toObject>;
            reconnecting?: ReturnType<typeof Reconnecting.prototype.toObject>;
            reconnected?: ReturnType<typeof Reconnected.prototype.toObject>;
            e2ee_state_changed?: ReturnType<typeof E2eeStateChanged.prototype.toObject>;
        }): RoomEvent {
            const message = new RoomEvent({});
            if (data.room_handle != null) {
                message.room_handle = data.room_handle;
            }
            if (data.participant_connected != null) {
                message.participant_connected = ParticipantConnected.fromObject(data.participant_connected);
            }
            if (data.participant_disconnected != null) {
                message.participant_disconnected = ParticipantDisconnected.fromObject(data.participant_disconnected);
            }
            if (data.local_track_published != null) {
                message.local_track_published = LocalTrackPublished.fromObject(data.local_track_published);
            }
            if (data.local_track_unpublished != null) {
                message.local_track_unpublished = LocalTrackUnpublished.fromObject(data.local_track_unpublished);
            }
            if (data.track_published != null) {
                message.track_published = TrackPublished.fromObject(data.track_published);
            }
            if (data.track_unpublished != null) {
                message.track_unpublished = TrackUnpublished.fromObject(data.track_unpublished);
            }
            if (data.track_subscribed != null) {
                message.track_subscribed = TrackSubscribed.fromObject(data.track_subscribed);
            }
            if (data.track_unsubscribed != null) {
                message.track_unsubscribed = TrackUnsubscribed.fromObject(data.track_unsubscribed);
            }
            if (data.track_subscription_failed != null) {
                message.track_subscription_failed = TrackSubscriptionFailed.fromObject(data.track_subscription_failed);
            }
            if (data.track_muted != null) {
                message.track_muted = TrackMuted.fromObject(data.track_muted);
            }
            if (data.track_unmuted != null) {
                message.track_unmuted = TrackUnmuted.fromObject(data.track_unmuted);
            }
            if (data.active_speakers_changed != null) {
                message.active_speakers_changed = ActiveSpeakersChanged.fromObject(data.active_speakers_changed);
            }
            if (data.connection_quality_changed != null) {
                message.connection_quality_changed = ConnectionQualityChanged.fromObject(data.connection_quality_changed);
            }
            if (data.data_received != null) {
                message.data_received = DataReceived.fromObject(data.data_received);
            }
            if (data.connection_state_changed != null) {
                message.connection_state_changed = ConnectionStateChanged.fromObject(data.connection_state_changed);
            }
            if (data.disconnected != null) {
                message.disconnected = Disconnected.fromObject(data.disconnected);
            }
            if (data.reconnecting != null) {
                message.reconnecting = Reconnecting.fromObject(data.reconnecting);
            }
            if (data.reconnected != null) {
                message.reconnected = Reconnected.fromObject(data.reconnected);
            }
            if (data.e2ee_state_changed != null) {
                message.e2ee_state_changed = E2eeStateChanged.fromObject(data.e2ee_state_changed);
            }
            return message;
        }
        toObject() {
            const data: {
                room_handle?: number;
                participant_connected?: ReturnType<typeof ParticipantConnected.prototype.toObject>;
                participant_disconnected?: ReturnType<typeof ParticipantDisconnected.prototype.toObject>;
                local_track_published?: ReturnType<typeof LocalTrackPublished.prototype.toObject>;
                local_track_unpublished?: ReturnType<typeof LocalTrackUnpublished.prototype.toObject>;
                track_published?: ReturnType<typeof TrackPublished.prototype.toObject>;
                track_unpublished?: ReturnType<typeof TrackUnpublished.prototype.toObject>;
                track_subscribed?: ReturnType<typeof TrackSubscribed.prototype.toObject>;
                track_unsubscribed?: ReturnType<typeof TrackUnsubscribed.prototype.toObject>;
                track_subscription_failed?: ReturnType<typeof TrackSubscriptionFailed.prototype.toObject>;
                track_muted?: ReturnType<typeof TrackMuted.prototype.toObject>;
                track_unmuted?: ReturnType<typeof TrackUnmuted.prototype.toObject>;
                active_speakers_changed?: ReturnType<typeof ActiveSpeakersChanged.prototype.toObject>;
                connection_quality_changed?: ReturnType<typeof ConnectionQualityChanged.prototype.toObject>;
                data_received?: ReturnType<typeof DataReceived.prototype.toObject>;
                connection_state_changed?: ReturnType<typeof ConnectionStateChanged.prototype.toObject>;
                disconnected?: ReturnType<typeof Disconnected.prototype.toObject>;
                reconnecting?: ReturnType<typeof Reconnecting.prototype.toObject>;
                reconnected?: ReturnType<typeof Reconnected.prototype.toObject>;
                e2ee_state_changed?: ReturnType<typeof E2eeStateChanged.prototype.toObject>;
            } = {};
            if (this.room_handle != null) {
                data.room_handle = this.room_handle;
            }
            if (this.participant_connected != null) {
                data.participant_connected = this.participant_connected.toObject();
            }
            if (this.participant_disconnected != null) {
                data.participant_disconnected = this.participant_disconnected.toObject();
            }
            if (this.local_track_published != null) {
                data.local_track_published = this.local_track_published.toObject();
            }
            if (this.local_track_unpublished != null) {
                data.local_track_unpublished = this.local_track_unpublished.toObject();
            }
            if (this.track_published != null) {
                data.track_published = this.track_published.toObject();
            }
            if (this.track_unpublished != null) {
                data.track_unpublished = this.track_unpublished.toObject();
            }
            if (this.track_subscribed != null) {
                data.track_subscribed = this.track_subscribed.toObject();
            }
            if (this.track_unsubscribed != null) {
                data.track_unsubscribed = this.track_unsubscribed.toObject();
            }
            if (this.track_subscription_failed != null) {
                data.track_subscription_failed = this.track_subscription_failed.toObject();
            }
            if (this.track_muted != null) {
                data.track_muted = this.track_muted.toObject();
            }
            if (this.track_unmuted != null) {
                data.track_unmuted = this.track_unmuted.toObject();
            }
            if (this.active_speakers_changed != null) {
                data.active_speakers_changed = this.active_speakers_changed.toObject();
            }
            if (this.connection_quality_changed != null) {
                data.connection_quality_changed = this.connection_quality_changed.toObject();
            }
            if (this.data_received != null) {
                data.data_received = this.data_received.toObject();
            }
            if (this.connection_state_changed != null) {
                data.connection_state_changed = this.connection_state_changed.toObject();
            }
            if (this.disconnected != null) {
                data.disconnected = this.disconnected.toObject();
            }
            if (this.reconnecting != null) {
                data.reconnecting = this.reconnecting.toObject();
            }
            if (this.reconnected != null) {
                data.reconnected = this.reconnected.toObject();
            }
            if (this.e2ee_state_changed != null) {
                data.e2ee_state_changed = this.e2ee_state_changed.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_handle != 0)
                writer.writeUint64(1, this.room_handle);
            if (this.has_participant_connected)
                writer.writeMessage(2, this.participant_connected, () => this.participant_connected.serialize(writer));
            if (this.has_participant_disconnected)
                writer.writeMessage(3, this.participant_disconnected, () => this.participant_disconnected.serialize(writer));
            if (this.has_local_track_published)
                writer.writeMessage(4, this.local_track_published, () => this.local_track_published.serialize(writer));
            if (this.has_local_track_unpublished)
                writer.writeMessage(5, this.local_track_unpublished, () => this.local_track_unpublished.serialize(writer));
            if (this.has_track_published)
                writer.writeMessage(6, this.track_published, () => this.track_published.serialize(writer));
            if (this.has_track_unpublished)
                writer.writeMessage(7, this.track_unpublished, () => this.track_unpublished.serialize(writer));
            if (this.has_track_subscribed)
                writer.writeMessage(8, this.track_subscribed, () => this.track_subscribed.serialize(writer));
            if (this.has_track_unsubscribed)
                writer.writeMessage(9, this.track_unsubscribed, () => this.track_unsubscribed.serialize(writer));
            if (this.has_track_subscription_failed)
                writer.writeMessage(10, this.track_subscription_failed, () => this.track_subscription_failed.serialize(writer));
            if (this.has_track_muted)
                writer.writeMessage(11, this.track_muted, () => this.track_muted.serialize(writer));
            if (this.has_track_unmuted)
                writer.writeMessage(12, this.track_unmuted, () => this.track_unmuted.serialize(writer));
            if (this.has_active_speakers_changed)
                writer.writeMessage(13, this.active_speakers_changed, () => this.active_speakers_changed.serialize(writer));
            if (this.has_connection_quality_changed)
                writer.writeMessage(14, this.connection_quality_changed, () => this.connection_quality_changed.serialize(writer));
            if (this.has_data_received)
                writer.writeMessage(15, this.data_received, () => this.data_received.serialize(writer));
            if (this.has_connection_state_changed)
                writer.writeMessage(16, this.connection_state_changed, () => this.connection_state_changed.serialize(writer));
            if (this.has_disconnected)
                writer.writeMessage(18, this.disconnected, () => this.disconnected.serialize(writer));
            if (this.has_reconnecting)
                writer.writeMessage(19, this.reconnecting, () => this.reconnecting.serialize(writer));
            if (this.has_reconnected)
                writer.writeMessage(20, this.reconnected, () => this.reconnected.serialize(writer));
            if (this.has_e2ee_state_changed)
                writer.writeMessage(21, this.e2ee_state_changed, () => this.e2ee_state_changed.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_handle = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.participant_connected, () => message.participant_connected = ParticipantConnected.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.participant_disconnected, () => message.participant_disconnected = ParticipantDisconnected.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.local_track_published, () => message.local_track_published = LocalTrackPublished.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.local_track_unpublished, () => message.local_track_unpublished = LocalTrackUnpublished.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.track_published, () => message.track_published = TrackPublished.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.track_unpublished, () => message.track_unpublished = TrackUnpublished.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.track_subscribed, () => message.track_subscribed = TrackSubscribed.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.track_unsubscribed, () => message.track_unsubscribed = TrackUnsubscribed.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.track_subscription_failed, () => message.track_subscription_failed = TrackSubscriptionFailed.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.track_muted, () => message.track_muted = TrackMuted.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.track_unmuted, () => message.track_unmuted = TrackUnmuted.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.active_speakers_changed, () => message.active_speakers_changed = ActiveSpeakersChanged.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.connection_quality_changed, () => message.connection_quality_changed = ConnectionQualityChanged.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.data_received, () => message.data_received = DataReceived.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.connection_state_changed, () => message.connection_state_changed = ConnectionStateChanged.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.disconnected, () => message.disconnected = Disconnected.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.reconnecting, () => message.reconnecting = Reconnecting.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.reconnected, () => message.reconnected = Reconnected.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.e2ee_state_changed, () => message.e2ee_state_changed = E2eeStateChanged.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomEvent {
            return RoomEvent.deserialize(bytes);
        }
    }
    export class RoomInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            name?: string;
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sid?: string;
            name?: string;
            metadata?: string;
        }): RoomInfo {
            const message = new RoomInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                name?: string;
                metadata?: string;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.metadata.length)
                writer.writeString(3, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomInfo {
            return RoomInfo.deserialize(bytes);
        }
    }
    export class OwnedRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handle?: dependency_2.livekit.proto.FfiOwnedHandle;
            info?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get handle() {
            return pb_1.Message.getWrapperField(this, dependency_2.livekit.proto.FfiOwnedHandle, 1) as dependency_2.livekit.proto.FfiOwnedHandle;
        }
        set handle(value: dependency_2.livekit.proto.FfiOwnedHandle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_handle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 2) as RoomInfo;
        }
        set info(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
            info?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): OwnedRoom {
            const message = new OwnedRoom({});
            if (data.handle != null) {
                message.handle = dependency_2.livekit.proto.FfiOwnedHandle.fromObject(data.handle);
            }
            if (data.info != null) {
                message.info = RoomInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                handle?: ReturnType<typeof dependency_2.livekit.proto.FfiOwnedHandle.prototype.toObject>;
                info?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.handle != null) {
                data.handle = this.handle.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_handle)
                writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handle, () => message.handle = dependency_2.livekit.proto.FfiOwnedHandle.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OwnedRoom {
            return OwnedRoom.deserialize(bytes);
        }
    }
    export class ParticipantConnected extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info?: dependency_3.livekit.proto.OwnedParticipant;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get info() {
            return pb_1.Message.getWrapperField(this, dependency_3.livekit.proto.OwnedParticipant, 1) as dependency_3.livekit.proto.OwnedParticipant;
        }
        set info(value: dependency_3.livekit.proto.OwnedParticipant) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            info?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
        }): ParticipantConnected {
            const message = new ParticipantConnected({});
            if (data.info != null) {
                message.info = dependency_3.livekit.proto.OwnedParticipant.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                info?: ReturnType<typeof dependency_3.livekit.proto.OwnedParticipant.prototype.toObject>;
            } = {};
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_info)
                writer.writeMessage(1, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantConnected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantConnected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.info, () => message.info = dependency_3.livekit.proto.OwnedParticipant.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipantConnected {
            return ParticipantConnected.deserialize(bytes);
        }
    }
    export class ParticipantDisconnected extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            participant_sid?: string;
        }): ParticipantDisconnected {
            const message = new ParticipantDisconnected({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantDisconnected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantDisconnected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipantDisconnected {
            return ParticipantDisconnected.deserialize(bytes);
        }
    }
    export class LocalTrackPublished extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            track_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
            }
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            track_sid?: string;
        }): LocalTrackPublished {
            const message = new LocalTrackPublished({});
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                track_sid?: string;
            } = {};
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.track_sid.length)
                writer.writeString(1, this.track_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalTrackPublished {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalTrackPublished();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.track_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalTrackPublished {
            return LocalTrackPublished.deserialize(bytes);
        }
    }
    export class LocalTrackUnpublished extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            publication_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("publication_sid" in data && data.publication_sid != undefined) {
                    this.publication_sid = data.publication_sid;
                }
            }
        }
        get publication_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set publication_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            publication_sid?: string;
        }): LocalTrackUnpublished {
            const message = new LocalTrackUnpublished({});
            if (data.publication_sid != null) {
                message.publication_sid = data.publication_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                publication_sid?: string;
            } = {};
            if (this.publication_sid != null) {
                data.publication_sid = this.publication_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.publication_sid.length)
                writer.writeString(1, this.publication_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalTrackUnpublished {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalTrackUnpublished();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.publication_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalTrackUnpublished {
            return LocalTrackUnpublished.deserialize(bytes);
        }
    }
    export class TrackPublished extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            publication?: dependency_4.livekit.proto.OwnedTrackPublication;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("publication" in data && data.publication != undefined) {
                    this.publication = data.publication;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get publication() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.OwnedTrackPublication, 2) as dependency_4.livekit.proto.OwnedTrackPublication;
        }
        set publication(value: dependency_4.livekit.proto.OwnedTrackPublication) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_publication() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            participant_sid?: string;
            publication?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>;
        }): TrackPublished {
            const message = new TrackPublished({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.publication != null) {
                message.publication = dependency_4.livekit.proto.OwnedTrackPublication.fromObject(data.publication);
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                publication?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrackPublication.prototype.toObject>;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.publication != null) {
                data.publication = this.publication.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.has_publication)
                writer.writeMessage(2, this.publication, () => this.publication.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackPublished {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackPublished();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.publication, () => message.publication = dependency_4.livekit.proto.OwnedTrackPublication.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackPublished {
            return TrackPublished.deserialize(bytes);
        }
    }
    export class TrackUnpublished extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            publication_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("publication_sid" in data && data.publication_sid != undefined) {
                    this.publication_sid = data.publication_sid;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get publication_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set publication_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            publication_sid?: string;
        }): TrackUnpublished {
            const message = new TrackUnpublished({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.publication_sid != null) {
                message.publication_sid = data.publication_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                publication_sid?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.publication_sid != null) {
                data.publication_sid = this.publication_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.publication_sid.length)
                writer.writeString(2, this.publication_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackUnpublished {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackUnpublished();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.publication_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackUnpublished {
            return TrackUnpublished.deserialize(bytes);
        }
    }
    export class TrackSubscribed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track?: dependency_4.livekit.proto.OwnedTrack;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track" in data && data.track != undefined) {
                    this.track = data.track;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track() {
            return pb_1.Message.getWrapperField(this, dependency_4.livekit.proto.OwnedTrack, 2) as dependency_4.livekit.proto.OwnedTrack;
        }
        set track(value: dependency_4.livekit.proto.OwnedTrack) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_track() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            participant_sid?: string;
            track?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrack.prototype.toObject>;
        }): TrackSubscribed {
            const message = new TrackSubscribed({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track != null) {
                message.track = dependency_4.livekit.proto.OwnedTrack.fromObject(data.track);
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track?: ReturnType<typeof dependency_4.livekit.proto.OwnedTrack.prototype.toObject>;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track != null) {
                data.track = this.track.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.has_track)
                writer.writeMessage(2, this.track, () => this.track.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackSubscribed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackSubscribed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.track, () => message.track = dependency_4.livekit.proto.OwnedTrack.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackSubscribed {
            return TrackSubscribed.deserialize(bytes);
        }
    }
    export class TrackUnsubscribed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            track_sid?: string;
        }): TrackUnsubscribed {
            const message = new TrackUnsubscribed({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track_sid?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackUnsubscribed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackUnsubscribed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackUnsubscribed {
            return TrackUnsubscribed.deserialize(bytes);
        }
    }
    export class TrackSubscriptionFailed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track_sid?: string;
            error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            track_sid?: string;
            error?: string;
        }): TrackSubscriptionFailed {
            const message = new TrackSubscriptionFailed({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track_sid?: string;
                error?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackSubscriptionFailed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackSubscriptionFailed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackSubscriptionFailed {
            return TrackSubscriptionFailed.deserialize(bytes);
        }
    }
    export class TrackMuted extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            track_sid?: string;
        }): TrackMuted {
            const message = new TrackMuted({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track_sid?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackMuted {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackMuted();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackMuted {
            return TrackMuted.deserialize(bytes);
        }
    }
    export class TrackUnmuted extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track_sid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track_sid" in data && data.track_sid != undefined) {
                    this.track_sid = data.track_sid;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set track_sid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            track_sid?: string;
        }): TrackUnmuted {
            const message = new TrackUnmuted({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track_sid != null) {
                message.track_sid = data.track_sid;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track_sid?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track_sid != null) {
                data.track_sid = this.track_sid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.track_sid.length)
                writer.writeString(2, this.track_sid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackUnmuted {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackUnmuted();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.track_sid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackUnmuted {
            return TrackUnmuted.deserialize(bytes);
        }
    }
    export class E2eeStateChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            state?: dependency_1.livekit.proto.EncryptionState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.livekit.proto.EncryptionState.NEW) as dependency_1.livekit.proto.EncryptionState;
        }
        set state(value: dependency_1.livekit.proto.EncryptionState) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            state?: dependency_1.livekit.proto.EncryptionState;
        }): E2eeStateChanged {
            const message = new E2eeStateChanged({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                state?: dependency_1.livekit.proto.EncryptionState;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.state != dependency_1.livekit.proto.EncryptionState.NEW)
                writer.writeEnum(2, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E2eeStateChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E2eeStateChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E2eeStateChanged {
            return E2eeStateChanged.deserialize(bytes);
        }
    }
    export class ActiveSpeakersChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sids" in data && data.participant_sids != undefined) {
                    this.participant_sids = data.participant_sids;
                }
            }
        }
        get participant_sids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set participant_sids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            participant_sids?: string[];
        }): ActiveSpeakersChanged {
            const message = new ActiveSpeakersChanged({});
            if (data.participant_sids != null) {
                message.participant_sids = data.participant_sids;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sids?: string[];
            } = {};
            if (this.participant_sids != null) {
                data.participant_sids = this.participant_sids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sids.length)
                writer.writeRepeatedString(1, this.participant_sids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveSpeakersChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveSpeakersChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveSpeakersChanged {
            return ActiveSpeakersChanged.deserialize(bytes);
        }
    }
    export class ConnectionQualityChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            quality?: ConnectionQuality;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("quality" in data && data.quality != undefined) {
                    this.quality = data.quality;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get quality() {
            return pb_1.Message.getFieldWithDefault(this, 2, ConnectionQuality.QUALITY_POOR) as ConnectionQuality;
        }
        set quality(value: ConnectionQuality) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            quality?: ConnectionQuality;
        }): ConnectionQualityChanged {
            const message = new ConnectionQualityChanged({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.quality != null) {
                message.quality = data.quality;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                quality?: ConnectionQuality;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.quality != null) {
                data.quality = this.quality;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.quality != ConnectionQuality.QUALITY_POOR)
                writer.writeEnum(2, this.quality);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionQualityChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionQualityChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.quality = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionQualityChanged {
            return ConnectionQualityChanged.deserialize(bytes);
        }
    }
    export class DataReceived extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            data?: OwnedBuffer;
            kind?: DataPacketKind;
        } & (({
            participant_sid?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
            }
        }
        get data() {
            return pb_1.Message.getWrapperField(this, OwnedBuffer, 1) as OwnedBuffer;
        }
        set data(value: OwnedBuffer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_participant_sid() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 3, DataPacketKind.KIND_LOSSY) as DataPacketKind;
        }
        set kind(value: DataPacketKind) {
            pb_1.Message.setField(this, 3, value);
        }
        get _participant_sid() {
            const cases: {
                [index: number]: "none" | "participant_sid";
            } = {
                0: "none",
                2: "participant_sid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            data?: ReturnType<typeof OwnedBuffer.prototype.toObject>;
            participant_sid?: string;
            kind?: DataPacketKind;
        }): DataReceived {
            const message = new DataReceived({});
            if (data.data != null) {
                message.data = OwnedBuffer.fromObject(data.data);
            }
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof OwnedBuffer.prototype.toObject>;
                participant_sid?: string;
                kind?: DataPacketKind;
            } = {};
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_data)
                writer.writeMessage(1, this.data, () => this.data.serialize(writer));
            if (this.has_participant_sid)
                writer.writeString(2, this.participant_sid);
            if (this.kind != DataPacketKind.KIND_LOSSY)
                writer.writeEnum(3, this.kind);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataReceived {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataReceived();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => message.data = OwnedBuffer.deserialize(reader));
                        break;
                    case 2:
                        message.participant_sid = reader.readString();
                        break;
                    case 3:
                        message.kind = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataReceived {
            return DataReceived.deserialize(bytes);
        }
    }
    export class ConnectionStateChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: ConnectionState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, ConnectionState.CONN_DISCONNECTED) as ConnectionState;
        }
        set state(value: ConnectionState) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            state?: ConnectionState;
        }): ConnectionStateChanged {
            const message = new ConnectionStateChanged({});
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: ConnectionState;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state != ConnectionState.CONN_DISCONNECTED)
                writer.writeEnum(1, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectionStateChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectionStateChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectionStateChanged {
            return ConnectionStateChanged.deserialize(bytes);
        }
    }
    export class Connected extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Connected {
            const message = new Connected({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Connected {
            return Connected.deserialize(bytes);
        }
    }
    export class Disconnected extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Disconnected {
            const message = new Disconnected({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Disconnected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Disconnected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Disconnected {
            return Disconnected.deserialize(bytes);
        }
    }
    export class Reconnecting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Reconnecting {
            const message = new Reconnecting({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reconnecting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reconnecting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reconnecting {
            return Reconnecting.deserialize(bytes);
        }
    }
    export class Reconnected extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Reconnected {
            const message = new Reconnected({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reconnected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reconnected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reconnected {
            return Reconnected.deserialize(bytes);
        }
    }
}
